"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@bluebase/core");
const Checkbox_1 = require("../Checkbox");
const react_1 = tslib_1.__importDefault(require("react"));
const components_1 = require("@bluebase/components");
const enzyme_1 = require("enzyme");
const enzyme_async_helpers_1 = require("enzyme-async-helpers");
describe.only('Checkbox', () => {
    it('should set the status to checked when checked is true', () => {
        const component = enzyme_1.mount(react_1.default.createElement(Checkbox_1.Checkbox, { checked: true }));
        // expect(component).toMatchSnapshot();
        expect(component.childAt(0).prop('status')).toEqual('checked');
    });
    it('should set the status to unchecked when checked is false', () => {
        const component = enzyme_1.mount(react_1.default.createElement(Checkbox_1.Checkbox, { checked: false }));
        expect(component.childAt(0).prop('status')).toEqual('unchecked');
    });
    it('should set the status to indeterminate when indeterminate flag is true', () => {
        const component = enzyme_1.mount(react_1.default.createElement(Checkbox_1.Checkbox, { checked: false, indeterminate: true }));
        // expect(component).toMatchSnapshot();
        expect(component.childAt(0).prop('status')).toEqual('indeterminate');
    });
    it('should pass the color as is when set to "primary"', async () => {
        const BBCheckbox = components_1.getComponent('Checkbox');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Checkbox: Checkbox_1.Checkbox } },
            react_1.default.createElement(BBCheckbox, { color: "primary" })));
        await enzyme_async_helpers_1.waitForElement(component, BBCheckbox);
        // expect(component).toMatchSnapshot();
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('#3f51b5');
    });
    it('should pass the color as is when set to "secondary"', async () => {
        const BBCheckbox = components_1.getComponent('Checkbox');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Checkbox: Checkbox_1.Checkbox } },
            react_1.default.createElement(BBCheckbox, { color: "secondary" })));
        await enzyme_async_helpers_1.waitForElement(component, BBCheckbox);
        // expect(component).toMatchSnapshot();
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('#f50057');
    });
    it('should pass the color as is when set to "default"', async () => {
        const BBCheckbox = components_1.getComponent('Checkbox');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Checkbox: Checkbox_1.Checkbox } },
            react_1.default.createElement(BBCheckbox, { color: "default" })));
        await enzyme_async_helpers_1.waitForElement(component, BBCheckbox);
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('');
        // expect(component).toMatchSnapshot();
    });
    it('should set the color prop to undefined and create classes for custom colors', async () => {
        const BBCheckbox = components_1.getComponent('Checkbox');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Checkbox: Checkbox_1.Checkbox } },
            react_1.default.createElement(BBCheckbox, { color: "red" })));
        await enzyme_async_helpers_1.waitForElement(component, BBCheckbox);
        // expect(component).toMatchSnapshot();
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('red');
    });
    it('should set the label component', async () => {
        const BBCheckbox = components_1.getComponent('Checkbox');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Checkbox: Checkbox_1.Checkbox } },
            react_1.default.createElement(BBCheckbox, { label: "Foo" })));
        await enzyme_async_helpers_1.waitForElement(component, BBCheckbox);
        // expect(component).toMatchSnapshot();
        expect(component.find('Checkbox Text').last().text()).toEqual('Foo');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,