"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@bluebase/core");
const index_1 = tslib_1.__importDefault(require("../../../index"));
const Radio_1 = require("../../Radio");
const RadioGroup_1 = require("../RadioGroup");
const react_1 = tslib_1.__importDefault(require("react"));
const deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));
const enzyme_1 = require("enzyme");
const enzyme_async_helpers_1 = require("enzyme-async-helpers");
const CAPTION_COLOR = 'rgba(0, 0, 0, 0.38)';
const ERROR_COLOR = '#f44336';
describe('RadioGroup', () => {
    it('should map onValueChange fn to onChange fn', async () => {
        const cb = jest.fn();
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { plugins: [index_1.default] },
            react_1.default.createElement(RadioGroup_1.RadioGroup, { onValueChange: cb },
                react_1.default.createElement(Radio_1.Radio, { label: "Option A", value: "option-a" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option B", value: "option-b" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option C", value: "option-c" }))));
        await enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup);
        const radio = component.find('TouchableRipple').first();
        // expect(component).toMatchSnapshot();
        const onPress = radio.prop('onPress');
        onPress();
        expect(cb).toBeCalledTimes(1);
        expect(cb).toBeCalledWith('option-a');
    });
    // it('should make the radio passed by "value" prop as selected on render', async () => {
    // 	const component = mount(
    // 		<BlueBaseApp plugins={[Plugin]}>
    // 			<RadioGroup value="option-c">
    // 				<Radio label="Option A" value="option-a" />
    // 				<Radio label="Option B" value="option-b" />
    // 				<Radio label="Option C" value="option-c" />
    // 			</RadioGroup>
    // 		</BlueBaseApp>
    // 	);
    // 	await waitForElement(component as any, RadioGroup);
    // 	// expect(component).toMatchSnapshot();
    // 	const radio = component.find('[value="option-c"]').last();
    // 	expect(radio.prop('status')).toBe('checked');
    // });
    it('should display label & helperText', async () => {
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { plugins: [index_1.default] },
            react_1.default.createElement(RadioGroup_1.RadioGroup, { label: "FooBar", helperText: "description" },
                react_1.default.createElement(Radio_1.Radio, { label: "Option A", value: "option-a" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option B", value: "option-b" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option C", value: "option-c" }))));
        await enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup);
        // expect(component).toMatchSnapshot();
        const label = component.find('FormControlLabel Text').last();
        const helperText = component.find('FormHelperText Text').last();
        expect(label.getElements()).toHaveLength(1);
        expect(label.text()).toBe('FooBar');
        expect(helperText.getElements()).toHaveLength(1);
        expect(helperText.text()).toBe('description');
    });
    it('should display label & helperText in grey color if error is true', async () => {
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { plugins: [index_1.default] },
            react_1.default.createElement(RadioGroup_1.RadioGroup, { label: "FooBar", helperText: "description" },
                react_1.default.createElement(Radio_1.Radio, { label: "Option A", value: "option-a" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option B", value: "option-b" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option C", value: "option-c" }))));
        await enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup);
        // expect(component).toMatchSnapshot();
        const label = component.find('FormControlLabel Text').last();
        const helperText = component.find('FormHelperText Text').last();
        const labelStyleProp = label.prop('style');
        const labelStyle = deepmerge_1.default(labelStyleProp[0], deepmerge_1.default.all(labelStyleProp[1].filter((x) => !!x)));
        expect(labelStyle.color).toBe(CAPTION_COLOR);
        const helperTextStyleProp = helperText.prop('style');
        const helperTextStyle = deepmerge_1.default(helperTextStyleProp[0], deepmerge_1.default.all(helperTextStyleProp[1].filter((x) => !!x)));
        expect(helperTextStyle.color).toBe(CAPTION_COLOR);
    });
    it('should display label & helperText in red color if error is true', async () => {
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { plugins: [index_1.default] },
            react_1.default.createElement(RadioGroup_1.RadioGroup, { error: true, label: "FooBar", helperText: "description" },
                react_1.default.createElement(Radio_1.Radio, { label: "Option A", value: "option-a" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option B", value: "option-b" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option C", value: "option-c" }))));
        await enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup);
        // expect(component).toMatchSnapshot();
        const label = component.find('FormControlLabel Text').last();
        const helperText = component.find('FormHelperText Text').last();
        const labelStyleProp = label.prop('style');
        const labelStyle = deepmerge_1.default(labelStyleProp[0], deepmerge_1.default.all(labelStyleProp[1].filter((x) => !!x)));
        expect(labelStyle.color).toBe(ERROR_COLOR);
        const helperTextStyleProp = helperText.prop('style');
        const helperTextStyle = deepmerge_1.default(helperTextStyleProp[0], deepmerge_1.default.all(helperTextStyleProp[1].filter((x) => !!x)));
        expect(helperTextStyle.color).toBe(ERROR_COLOR);
    });
    it('should only render display label and not helperText', async () => {
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { RadioGroup: RadioGroup_1.RadioGroup, Radio: Radio_1.Radio } },
            react_1.default.createElement(RadioGroup_1.RadioGroup, { label: "FooBar" },
                react_1.default.createElement(Radio_1.Radio, { label: "Option A", value: "option-a" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option B", value: "option-b" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option C", value: "option-c" }))));
        await enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup);
        // expect(component).toMatchSnapshot();
        const label = component.find('FormControlLabel Text').last();
        const helperText = component.find('FormHelperText Text').last();
        expect(label.getElements()).toHaveLength(1);
        expect(label.text()).toBe('FooBar');
        expect(helperText.getElements()).toHaveLength(0);
    });
    it('should only render display helperText and not label', async () => {
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { RadioGroup: RadioGroup_1.RadioGroup, Radio: Radio_1.Radio } },
            react_1.default.createElement(RadioGroup_1.RadioGroup, { helperText: "description" },
                react_1.default.createElement(Radio_1.Radio, { label: "Option A", value: "option-a" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option B", value: "option-b" }),
                react_1.default.createElement(Radio_1.Radio, { label: "Option C", value: "option-c" }))));
        await enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup);
        // expect(component).toMatchSnapshot();
        const label = component.find('FormControlLabel Text').last();
        const helperText = component.find('FormHelperText Text').last();
        expect(label.getElements()).toHaveLength(0);
        expect(helperText.getElements()).toHaveLength(1);
        expect(helperText.text()).toBe('description');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,