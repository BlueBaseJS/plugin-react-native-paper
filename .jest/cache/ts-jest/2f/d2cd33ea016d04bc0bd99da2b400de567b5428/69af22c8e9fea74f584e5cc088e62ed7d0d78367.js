"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@bluebase/core");
const Radio_1 = require("../Radio");
const react_1 = tslib_1.__importDefault(require("react"));
const components_1 = require("@bluebase/components");
const enzyme_1 = require("enzyme");
const enzyme_async_helpers_1 = require("enzyme-async-helpers");
describe.only('Radio', () => {
    it('should set the status to checked when checked is true', () => {
        const component = enzyme_1.mount(react_1.default.createElement(Radio_1.Radio, { checked: true }));
        // expect(component).toMatchSnapshot();
        expect(component.childAt(0).prop('status')).toEqual('checked');
    });
    it('should set the status to unchecked when checked is false', () => {
        const component = enzyme_1.mount(react_1.default.createElement(Radio_1.Radio, { checked: false }));
        expect(component.childAt(0).prop('status')).toEqual('unchecked');
    });
    it('should pass the color as is when set to "primary"', async () => {
        const BBRadio = components_1.getComponent('Radio');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Radio: Radio_1.Radio } },
            react_1.default.createElement(BBRadio, { color: "primary" })));
        await enzyme_async_helpers_1.waitForElement(component, BBRadio);
        // expect(component).toMatchSnapshot();
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('#3f51b5');
    });
    it('should pass the color as is when set to "secondary"', async () => {
        const BBRadio = components_1.getComponent('Radio');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Radio: Radio_1.Radio } },
            react_1.default.createElement(BBRadio, { color: "secondary" })));
        await enzyme_async_helpers_1.waitForElement(component, BBRadio);
        // expect(component).toMatchSnapshot();
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('#f50057');
    });
    it('should pass the color as is when set to "default"', async () => {
        const BBRadio = components_1.getComponent('Radio');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Radio: Radio_1.Radio } },
            react_1.default.createElement(BBRadio, { color: "default" })));
        await enzyme_async_helpers_1.waitForElement(component, BBRadio);
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('');
        // expect(component).toMatchSnapshot();
    });
    it('should set the color prop to undefined and create classes for custom colors', async () => {
        const BBRadio = components_1.getComponent('Radio');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Radio: Radio_1.Radio } },
            react_1.default.createElement(BBRadio, { color: "red" })));
        await enzyme_async_helpers_1.waitForElement(component, BBRadio);
        // expect(component).toMatchSnapshot();
        expect(component.find('TouchableHighlight').last().prop('color')).toEqual('red');
    });
    it('should set the label component', async () => {
        const BBRadio = components_1.getComponent('Radio');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Radio: Radio_1.Radio } },
            react_1.default.createElement(BBRadio, { label: "Foo" })));
        await enzyme_async_helpers_1.waitForElement(component, BBRadio);
        // expect(component).toMatchSnapshot();
        expect(component.find('Radio Text').last().text()).toEqual('Foo');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,