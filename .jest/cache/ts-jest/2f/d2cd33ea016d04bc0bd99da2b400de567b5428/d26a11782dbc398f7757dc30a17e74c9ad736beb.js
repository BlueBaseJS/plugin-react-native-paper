"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@bluebase/core");
const react_1 = tslib_1.__importDefault(require("react"));
const Switch_1 = require("../Switch");
const components_1 = require("@bluebase/components");
const enzyme_1 = require("enzyme");
const enzyme_async_helpers_1 = require("enzyme-async-helpers");
describe.only('Switch', () => {
    it('should set the checked to true when checked is true', () => {
        const component = enzyme_1.mount(react_1.default.createElement(Switch_1.Switch, { checked: true }));
        // expect(component).toMatchSnapshot();
        expect(component.find('Switch').first().prop('value')).toEqual(true);
    });
    it('should set the checked to false when checked is false', () => {
        const component = enzyme_1.mount(react_1.default.createElement(Switch_1.Switch, { checked: false }));
        expect(component.find('Switch').first().prop('value')).toEqual(false);
    });
    it('should pass the color as is when set to "primary"', async () => {
        const BBSwitch = components_1.getComponent('Switch');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Switch: Switch_1.Switch } },
            react_1.default.createElement(BBSwitch, { color: "primary" })));
        await enzyme_async_helpers_1.waitForElement(component, BBSwitch);
        // expect(component).toMatchSnapshot();
        expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#3f51b5');
    });
    it('should pass the color as is when set to "secondary"', async () => {
        const BBSwitch = components_1.getComponent('Switch');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Switch: Switch_1.Switch } },
            react_1.default.createElement(BBSwitch, { color: "secondary" })));
        await enzyme_async_helpers_1.waitForElement(component, BBSwitch);
        // expect(component).toMatchSnapshot();
        expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#f50057');
    });
    it('should pass the color as is when set to "default"', async () => {
        const BBSwitch = components_1.getComponent('Switch');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Switch: Switch_1.Switch } },
            react_1.default.createElement(BBSwitch, { color: "default" })));
        await enzyme_async_helpers_1.waitForElement(component, BBSwitch);
        // expect(component).toMatchSnapshot();
        expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#03dac4');
    });
    it('should set the color prop to undefined and create classes for custom colors', async () => {
        const BBSwitch = components_1.getComponent('Switch');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Switch: Switch_1.Switch } },
            react_1.default.createElement(BBSwitch, { color: "red" })));
        await enzyme_async_helpers_1.waitForElement(component, BBSwitch);
        // expect(component).toMatchSnapshot();
        expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('red');
    });
    it('should set the label component', async () => {
        const BBSwitch = components_1.getComponent('Switch');
        const component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, { components: { Switch: Switch_1.Switch } },
            react_1.default.createElement(BBSwitch, { label: "Foo" })));
        await enzyme_async_helpers_1.waitForElement(component, BBSwitch);
        // expect(component).toMatchSnapshot();
        expect(component.find('Switch Text').last().text()).toEqual('Foo');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,