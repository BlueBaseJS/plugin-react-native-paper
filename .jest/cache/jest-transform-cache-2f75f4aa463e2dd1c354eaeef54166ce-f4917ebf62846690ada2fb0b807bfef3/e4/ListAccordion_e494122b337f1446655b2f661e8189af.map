{"version":3,"sources":["ListAccordion.js"],"names":["ListAccordion","expanded","props","onPress","undefined","setState","state","left","title","description","children","theme","style","titleColor","colors","text","alpha","rgb","string","descriptionColor","styles","container","_handlePress","row","color","primary","item","content","multiline","React","Children","map","child","isValidElement","right","cloneElement","Component","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport Icon from '../Icon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\ntype Props = {|\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.Node,\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.Node,\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.Node,\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Content of the section.\n   */\n  children: React.Node,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  style?: any,\n|};\n\ntype State = {\n  expanded: boolean,\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Checkbox } from 'react-native-paper';\n *\n * class MyComponent extends React.Component {\n *   state = {\n *     expanded: true\n *   }\n *\n *   _handlePress = () =>\n *     this.setState({\n *       expanded: !this.state.expanded\n *     });\n *\n *   render() {\n *     return (\n *       <List.Section title=\"Accordions\">\n *         <List.Accordion\n *           title=\"Uncontrolled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *\n *         <List.Accordion\n *           title=\"Controlled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *           expanded={this.state.expanded}\n *           onPress={this._handlePress}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *       </List.Section>\n *     );\n *   }\n * }\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  _handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const { left, title, description, children, theme, style } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expanded =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <View>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={this._handlePress}\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: expanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                numberOfLines={1}\n                style={[\n                  styles.title,\n                  {\n                    color: expanded ? theme.colors.primary : titleColor,\n                  },\n                ]}\n              >\n                {title}\n              </Text>\n              {description && (\n                <Text\n                  numberOfLines={2}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                  ]}\n                >\n                  {description}\n                </Text>\n              )}\n            </View>\n            <View style={[styles.item, description && styles.multiline]}>\n              <Icon\n                source={expanded ? 'keyboard-arrow-up' : 'keyboard-arrow-down'}\n                color={titleColor}\n                size={24}\n              />\n            </View>\n          </View>\n        </TouchableRipple>\n        {expanded\n          ? React.Children.map(children, child => {\n              if (\n                left &&\n                React.isValidElement(child) &&\n                !child.props.left &&\n                !child.props.right\n              ) {\n                return React.cloneElement(child, {\n                  style: [styles.child, child.props.style],\n                });\n              }\n\n              return child;\n            })\n          : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}