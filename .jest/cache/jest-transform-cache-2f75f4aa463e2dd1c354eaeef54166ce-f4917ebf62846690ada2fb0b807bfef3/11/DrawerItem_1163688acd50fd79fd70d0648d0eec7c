3faeb99f4fcfde6997294675754a369b
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple"));

var _theming = require("../../core/theming");

var DrawerItem = function (_React$Component) {
  (0, _inherits2.default)(DrawerItem, _React$Component);

  function DrawerItem() {
    (0, _classCallCheck2.default)(this, DrawerItem);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(DrawerItem).apply(this, arguments));
  }

  (0, _createClass2.default)(DrawerItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          label = _this$props.label,
          active = _this$props.active,
          theme = _this$props.theme,
          style = _this$props.style,
          onPress = _this$props.onPress,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["icon", "label", "active", "theme", "style", "onPress"]);
      var colors = theme.colors,
          roundness = theme.roundness;
      var backgroundColor = active ? (0, _color.default)(colors.primary).alpha(0.12).rgb().string() : 'transparent';
      var contentColor = active ? colors.primary : (0, _color.default)(colors.text).alpha(0.68).rgb().string();
      var fontFamily = theme.fonts.medium;
      var labelMargin = icon ? 32 : 0;
      return React.createElement(_reactNative.View, (0, _extends2.default)({}, rest, {
        style: [styles.container, {
          backgroundColor: backgroundColor,
          borderRadius: roundness
        }, style]
      }), React.createElement(_TouchableRipple.default, {
        borderless: true,
        delayPressIn: 0,
        onPress: onPress,
        style: {
          borderRadius: roundness
        },
        accessibilityTraits: active ? ['button', 'selected'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityStates: active ? ['selected'] : undefined
      }, React.createElement(_reactNative.View, {
        style: styles.wrapper
      }, icon ? React.createElement(_Icon.default, {
        source: icon,
        size: 24,
        color: contentColor
      }) : null, React.createElement(_Text.default, {
        numberOfLines: 1,
        style: [styles.label, {
          color: contentColor,
          fontFamily: fontFamily,
          marginLeft: labelMargin
        }]
      }, label))));
    }
  }]);
  return DrawerItem;
}(React.Component);

(0, _defineProperty2.default)(DrawerItem, "displayName", 'Drawer.Item');

var styles = _reactNative.StyleSheet.create({
  container: {
    marginHorizontal: 10,
    marginVertical: 4
  },
  wrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8
  },
  label: {
    marginRight: 32
  }
});

var _default = (0, _theming.withTheme)(DrawerItem);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRyYXdlckl0ZW0uanMiXSwibmFtZXMiOlsiRHJhd2VySXRlbSIsInByb3BzIiwiaWNvbiIsImxhYmVsIiwiYWN0aXZlIiwidGhlbWUiLCJzdHlsZSIsIm9uUHJlc3MiLCJyZXN0IiwiY29sb3JzIiwicm91bmRuZXNzIiwiYmFja2dyb3VuZENvbG9yIiwicHJpbWFyeSIsImFscGhhIiwicmdiIiwic3RyaW5nIiwiY29udGVudENvbG9yIiwidGV4dCIsImZvbnRGYW1pbHkiLCJmb250cyIsIm1lZGl1bSIsImxhYmVsTWFyZ2luIiwic3R5bGVzIiwiY29udGFpbmVyIiwiYm9yZGVyUmFkaXVzIiwidW5kZWZpbmVkIiwid3JhcHBlciIsImNvbG9yIiwibWFyZ2luTGVmdCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsIm1hcmdpbkhvcml6b250YWwiLCJtYXJnaW5WZXJ0aWNhbCIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwicGFkZGluZyIsIm1hcmdpblJpZ2h0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0lBMkNNQSxVOzs7Ozs7Ozs7OzZCQUdLO0FBQUEsd0JBQ3lELEtBQUtDLEtBRDlEO0FBQUEsVUFDQ0MsSUFERCxlQUNDQSxJQUREO0FBQUEsVUFDT0MsS0FEUCxlQUNPQSxLQURQO0FBQUEsVUFDY0MsTUFEZCxlQUNjQSxNQURkO0FBQUEsVUFDc0JDLEtBRHRCLGVBQ3NCQSxLQUR0QjtBQUFBLFVBQzZCQyxLQUQ3QixlQUM2QkEsS0FEN0I7QUFBQSxVQUNvQ0MsT0FEcEMsZUFDb0NBLE9BRHBDO0FBQUEsVUFDZ0RDLElBRGhEO0FBQUEsVUFFQ0MsTUFGRCxHQUV1QkosS0FGdkIsQ0FFQ0ksTUFGRDtBQUFBLFVBRVNDLFNBRlQsR0FFdUJMLEtBRnZCLENBRVNLLFNBRlQ7QUFHUCxVQUFNQyxlQUFlLEdBQUdQLE1BQU0sR0FDMUIsb0JBQU1LLE1BQU0sQ0FBQ0csT0FBYixFQUNHQyxLQURILENBQ1MsSUFEVCxFQUVHQyxHQUZILEdBR0dDLE1BSEgsRUFEMEIsR0FLMUIsYUFMSjtBQU1BLFVBQU1DLFlBQVksR0FBR1osTUFBTSxHQUN2QkssTUFBTSxDQUFDRyxPQURnQixHQUV2QixvQkFBTUgsTUFBTSxDQUFDUSxJQUFiLEVBQ0dKLEtBREgsQ0FDUyxJQURULEVBRUdDLEdBRkgsR0FHR0MsTUFISCxFQUZKO0FBTUEsVUFBTUcsVUFBVSxHQUFHYixLQUFLLENBQUNjLEtBQU4sQ0FBWUMsTUFBL0I7QUFDQSxVQUFNQyxXQUFXLEdBQUduQixJQUFJLEdBQUcsRUFBSCxHQUFRLENBQWhDO0FBRUEsYUFDRSxvQkFBQyxpQkFBRCw2QkFDTU0sSUFETjtBQUVFLFFBQUEsS0FBSyxFQUFFLENBQ0xjLE1BQU0sQ0FBQ0MsU0FERixFQUVMO0FBQUVaLFVBQUFBLGVBQWUsRUFBZkEsZUFBRjtBQUFtQmEsVUFBQUEsWUFBWSxFQUFFZDtBQUFqQyxTQUZLLEVBR0xKLEtBSEs7QUFGVCxVQVFFLG9CQUFDLHdCQUFEO0FBQ0UsUUFBQSxVQUFVLE1BRFo7QUFFRSxRQUFBLFlBQVksRUFBRSxDQUZoQjtBQUdFLFFBQUEsT0FBTyxFQUFFQyxPQUhYO0FBSUUsUUFBQSxLQUFLLEVBQUU7QUFBRWlCLFVBQUFBLFlBQVksRUFBRWQ7QUFBaEIsU0FKVDtBQUtFLFFBQUEsbUJBQW1CLEVBQUVOLE1BQU0sR0FBRyxDQUFDLFFBQUQsRUFBVyxVQUFYLENBQUgsR0FBNEIsUUFMekQ7QUFNRSxRQUFBLDBCQUEwQixFQUFDLFFBTjdCO0FBT0UsUUFBQSxpQkFBaUIsRUFBQyxRQVBwQjtBQVFFLFFBQUEsbUJBQW1CLEVBQUVBLE1BQU0sR0FBRyxDQUFDLFVBQUQsQ0FBSCxHQUFrQnFCO0FBUi9DLFNBVUUsb0JBQUMsaUJBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRUgsTUFBTSxDQUFDSTtBQUFwQixTQUNHeEIsSUFBSSxHQUNILG9CQUFDLGFBQUQ7QUFBTSxRQUFBLE1BQU0sRUFBRUEsSUFBZDtBQUFvQixRQUFBLElBQUksRUFBRSxFQUExQjtBQUE4QixRQUFBLEtBQUssRUFBRWM7QUFBckMsUUFERyxHQUVELElBSE4sRUFJRSxvQkFBQyxhQUFEO0FBQ0UsUUFBQSxhQUFhLEVBQUUsQ0FEakI7QUFFRSxRQUFBLEtBQUssRUFBRSxDQUNMTSxNQUFNLENBQUNuQixLQURGLEVBRUw7QUFDRXdCLFVBQUFBLEtBQUssRUFBRVgsWUFEVDtBQUVFRSxVQUFBQSxVQUFVLEVBQVZBLFVBRkY7QUFHRVUsVUFBQUEsVUFBVSxFQUFFUDtBQUhkLFNBRks7QUFGVCxTQVdHbEIsS0FYSCxDQUpGLENBVkYsQ0FSRixDQURGO0FBd0NEOzs7RUE3RHNCMEIsS0FBSyxDQUFDQyxTOzs4QkFBekI5QixVLGlCQUNpQixhOztBQStEdkIsSUFBTXNCLE1BQU0sR0FBR1Msd0JBQVdDLE1BQVgsQ0FBa0I7QUFDL0JULEVBQUFBLFNBQVMsRUFBRTtBQUNUVSxJQUFBQSxnQkFBZ0IsRUFBRSxFQURUO0FBRVRDLElBQUFBLGNBQWMsRUFBRTtBQUZQLEdBRG9CO0FBSy9CUixFQUFBQSxPQUFPLEVBQUU7QUFDUFMsSUFBQUEsYUFBYSxFQUFFLEtBRFI7QUFFUEMsSUFBQUEsVUFBVSxFQUFFLFFBRkw7QUFHUEMsSUFBQUEsT0FBTyxFQUFFO0FBSEYsR0FMc0I7QUFVL0JsQyxFQUFBQSxLQUFLLEVBQUU7QUFDTG1DLElBQUFBLFdBQVcsRUFBRTtBQURSO0FBVndCLENBQWxCLENBQWY7O2VBZWUsd0JBQVV0QyxVQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgY29sb3IgZnJvbSAnY29sb3InO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi9UeXBvZ3JhcGh5L1RleHQnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vSWNvbic7XG5pbXBvcnQgVG91Y2hhYmxlUmlwcGxlIGZyb20gJy4uL1RvdWNoYWJsZVJpcHBsZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IHR5cGUgeyBUaGVtZSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgSWNvblNvdXJjZSB9IGZyb20gJy4uL0ljb24nO1xuXG50eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogVGhlIGxhYmVsIHRleHQgb2YgdGhlIGl0ZW0uXG4gICAqL1xuICBsYWJlbDogc3RyaW5nLFxuICAvKipcbiAgICogSWNvbiB0byBkaXNwbGF5IGZvciB0aGUgYERyYXdlckl0ZW1gLlxuICAgKi9cbiAgaWNvbj86IEljb25Tb3VyY2UsXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGhpZ2hsaWdodCB0aGUgZHJhd2VyIGl0ZW0gYXMgYWN0aXZlLlxuICAgKi9cbiAgYWN0aXZlPzogYm9vbGVhbixcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gcHJlc3MuXG4gICAqL1xuICBvblByZXNzPzogKCkgPT4gbWl4ZWQsXG4gIHN0eWxlPzogYW55LFxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogVGhlbWUsXG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHVzZWQgdG8gc2hvdyBhbiBhY3Rpb24gaXRlbSB3aXRoIGFuIGljb24gYW5kIGEgbGFiZWwgaW4gYSBuYXZpZ2F0aW9uIGRyYXdlci5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IERyYXdlciB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiAoXG4gKiAgIDxEcmF3ZXIuSXRlbSBsYWJlbD1cIkZpcnN0IEl0ZW1cIiAvPlxuICogKTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqIGBgYFxuICovXG5jbGFzcyBEcmF3ZXJJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdEcmF3ZXIuSXRlbSc7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaWNvbiwgbGFiZWwsIGFjdGl2ZSwgdGhlbWUsIHN0eWxlLCBvblByZXNzLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY29sb3JzLCByb3VuZG5lc3MgfSA9IHRoZW1lO1xuICAgIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGFjdGl2ZVxuICAgICAgPyBjb2xvcihjb2xvcnMucHJpbWFyeSlcbiAgICAgICAgICAuYWxwaGEoMC4xMilcbiAgICAgICAgICAucmdiKClcbiAgICAgICAgICAuc3RyaW5nKClcbiAgICAgIDogJ3RyYW5zcGFyZW50JztcbiAgICBjb25zdCBjb250ZW50Q29sb3IgPSBhY3RpdmVcbiAgICAgID8gY29sb3JzLnByaW1hcnlcbiAgICAgIDogY29sb3IoY29sb3JzLnRleHQpXG4gICAgICAgICAgLmFscGhhKDAuNjgpXG4gICAgICAgICAgLnJnYigpXG4gICAgICAgICAgLnN0cmluZygpO1xuICAgIGNvbnN0IGZvbnRGYW1pbHkgPSB0aGVtZS5mb250cy5tZWRpdW07XG4gICAgY29uc3QgbGFiZWxNYXJnaW4gPSBpY29uID8gMzIgOiAwO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3XG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgICBzdHlsZT17W1xuICAgICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3IsIGJvcmRlclJhZGl1czogcm91bmRuZXNzIH0sXG4gICAgICAgICAgc3R5bGUsXG4gICAgICAgIF19XG4gICAgICA+XG4gICAgICAgIDxUb3VjaGFibGVSaXBwbGVcbiAgICAgICAgICBib3JkZXJsZXNzXG4gICAgICAgICAgZGVsYXlQcmVzc0luPXswfVxuICAgICAgICAgIG9uUHJlc3M9e29uUHJlc3N9XG4gICAgICAgICAgc3R5bGU9e3sgYm9yZGVyUmFkaXVzOiByb3VuZG5lc3MgfX1cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPXthY3RpdmUgPyBbJ2J1dHRvbicsICdzZWxlY3RlZCddIDogJ2J1dHRvbid9XG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5U3RhdGVzPXthY3RpdmUgPyBbJ3NlbGVjdGVkJ10gOiB1bmRlZmluZWR9XG4gICAgICAgID5cbiAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLndyYXBwZXJ9PlxuICAgICAgICAgICAge2ljb24gPyAoXG4gICAgICAgICAgICAgIDxJY29uIHNvdXJjZT17aWNvbn0gc2l6ZT17MjR9IGNvbG9yPXtjb250ZW50Q29sb3J9IC8+XG4gICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIG51bWJlck9mTGluZXM9ezF9XG4gICAgICAgICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgICAgICAgc3R5bGVzLmxhYmVsLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb250ZW50Q29sb3IsXG4gICAgICAgICAgICAgICAgICBmb250RmFtaWx5LFxuICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogbGFiZWxNYXJnaW4sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgPC9Ub3VjaGFibGVSaXBwbGU+XG4gICAgICA8L1ZpZXc+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIG1hcmdpbkhvcml6b250YWw6IDEwLFxuICAgIG1hcmdpblZlcnRpY2FsOiA0LFxuICB9LFxuICB3cmFwcGVyOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgcGFkZGluZzogOCxcbiAgfSxcbiAgbGFiZWw6IHtcbiAgICBtYXJnaW5SaWdodDogMzIsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKERyYXdlckl0ZW0pO1xuIl19