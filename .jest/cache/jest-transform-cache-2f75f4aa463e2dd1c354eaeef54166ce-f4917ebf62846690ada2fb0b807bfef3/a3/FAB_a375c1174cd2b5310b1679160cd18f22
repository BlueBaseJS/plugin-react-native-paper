06b3dacbaba8a4188e8997d886bf1b8d
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _FABGroup = _interopRequireDefault(require("./FABGroup"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _CrossFadeIcon = _interopRequireDefault(require("../CrossFadeIcon"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple"));

var _colors = require("../../styles/colors");

var _theming = require("../../core/theming");

var FAB = function (_React$Component) {
  (0, _inherits2.default)(FAB, _React$Component);

  function FAB() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, FAB);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(FAB)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      visibility: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0)
    });
    return _this;
  }

  (0, _createClass2.default)(FAB, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.visible === prevProps.visible) {
        return;
      }

      if (this.props.visible) {
        _reactNative.Animated.timing(this.state.visibility, {
          toValue: 1,
          duration: 200,
          useNativeDriver: true
        }).start();
      } else {
        _reactNative.Animated.timing(this.state.visibility, {
          toValue: 0,
          duration: 150,
          useNativeDriver: true
        }).start();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          small = _this$props.small,
          icon = _this$props.icon,
          label = _this$props.label,
          _this$props$accessibi = _this$props.accessibilityLabel,
          accessibilityLabel = _this$props$accessibi === void 0 ? label : _this$props$accessibi,
          customColor = _this$props.color,
          disabled = _this$props.disabled,
          onPress = _this$props.onPress,
          theme = _this$props.theme,
          style = _this$props.style,
          visible = _this$props.visible,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["small", "icon", "label", "accessibilityLabel", "color", "disabled", "onPress", "theme", "style", "visible"]);
      var visibility = this.state.visibility;
      var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();

      var _ref = _reactNative.StyleSheet.flatten(style) || {},
          _ref$backgroundColor = _ref.backgroundColor,
          backgroundColor = _ref$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref$backgroundColor;

      var foregroundColor;

      if (typeof customColor !== 'undefined') {
        foregroundColor = customColor;
      } else if (disabled) {
        foregroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
      } else {
        foregroundColor = !(0, _color.default)(backgroundColor).light() ? _colors.white : 'rgba(0, 0, 0, .54)';
      }

      var rippleColor = (0, _color.default)(foregroundColor).alpha(0.32).rgb().string();
      return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {
        style: [{
          backgroundColor: backgroundColor,
          opacity: visibility,
          transform: [{
            scale: visibility
          }]
        }, styles.container, disabled && styles.disabled, style],
        pointerEvents: visible ? 'auto' : 'none'
      }), React.createElement(_TouchableRipple.default, {
        borderless: true,
        onPress: onPress,
        rippleColor: rippleColor,
        disabled: disabled,
        accessibilityLabel: accessibilityLabel,
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityStates: disabled ? ['disabled'] : undefined,
        style: styles.touchable
      }, React.createElement(_reactNative.View, {
        style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],
        pointerEvents: "none"
      }, React.createElement(_CrossFadeIcon.default, {
        source: icon,
        size: 24,
        color: foregroundColor
      }), label ? React.createElement(_Text.default, {
        style: [styles.label, {
          color: foregroundColor,
          fontFamily: theme.fonts.medium
        }]
      }, label.toUpperCase()) : null)));
    }
  }]);
  return FAB;
}(React.Component);

(0, _defineProperty2.default)(FAB, "Group", _FABGroup.default);
(0, _defineProperty2.default)(FAB, "defaultProps", {
  visible: true
});

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 28,
    elevation: 6
  },
  touchable: {
    borderRadius: 28
  },
  standard: {
    height: 56,
    width: 56
  },
  small: {
    height: 40,
    width: 40
  },
  extended: {
    height: 48,
    paddingHorizontal: 16
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  label: {
    marginHorizontal: 8
  },
  disabled: {
    elevation: 0
  }
});

var _default = (0, _theming.withTheme)(FAB);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,