{"version":3,"sources":["MetroListView.js"],"names":["ListView","require","React","RefreshControl","ScrollView","invariant","MetroListView","_computeState","props","ds","DataSource","rowHasChanged","itemA","itemB","sectionHeaderHasChanged","getSectionHeaderData","dataBlob","sectionID","state","sectionHeaderData","ref","_listRef","item","rowID","highlightRow","renderItem","index","section","renderSectionHeader","sID","rID","params","Error","animated","offset","scrollTo","horizontal","x","y","setNativeProps","newProps","setState","_captureRef","_renderRow","FooterComponent","_renderFooter","sections","_renderSectionHeader","SeparatorComponent","_renderSeparator","items","forEach","sectionIn","ii","data","cloneWithRowsAndSections","cloneWithRows","Component","keyExtractor","key","String","renderScrollComponent","onRefresh","refreshing","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst React = require('React');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype Item = any;\n\ntype NormalProps = {\n  FooterComponent?: React.ComponentType<*>,\n  renderItem: (info: Object) => ?React.Element<any>,\n  /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n   * suppresses an error when upgrading Flow's support for React. To see the\n   * error delete this comment and run Flow. */\n  renderSectionHeader?: ({section: Object}) => ?React.Element<any>,\n  SeparatorComponent?: ?React.ComponentType<*>, // not supported yet\n\n  // Provide either `items` or `sections`\n  items?: ?Array<Item>, // By default, an Item is assumed to be {key: string}\n  // $FlowFixMe - Something is a little off with the type Array<Item>\n  sections?: ?Array<{key: string, data: Array<Item>}>,\n\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: boolean,\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n};\ntype DefaultProps = {\n  keyExtractor: (item: Item, index: number) => string,\n};\ntype Props = NormalProps & DefaultProps;\n\n/**\n * This is just a wrapper around the legacy ListView that matches the new API of FlatList, but with\n * some section support tacked on. It is recommended to just use FlatList directly, this component\n * is mostly for debugging and performance comparison.\n */\nclass MetroListView extends React.Component<Props, $FlowFixMeState> {\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    throw new Error('scrollToEnd not supported in legacy ListView.');\n  }\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToIndex not supported in legacy ListView.');\n  }\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: Item,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToItem not supported in legacy ListView.');\n  }\n  scrollToLocation(params: {\n    animated?: ?boolean,\n    itemIndex: number,\n    sectionIndex: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToLocation not supported in legacy ListView.');\n  }\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    // $FlowFixMe Invalid prop usage\n    this._listRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated},\n    );\n  }\n  getListRef() {\n    return this._listRef;\n  }\n  setNativeProps(props: Object) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n  static defaultProps: DefaultProps = {\n    keyExtractor: (item, index) => item.key || String(index),\n    renderScrollComponent: (props: Props) => {\n      if (props.onRefresh) {\n        return (\n          // $FlowFixMe Invalid prop usage\n          <ScrollView\n            {...props}\n            refreshControl={\n              /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss)\n               * This comment suppresses an error when upgrading Flow's support\n               * for React. To see the error delete this comment and run Flow.\n               */\n              <RefreshControl\n                refreshing={props.refreshing}\n                onRefresh={props.onRefresh}\n              />\n            }\n          />\n        );\n      } else {\n        // $FlowFixMe Invalid prop usage\n        return <ScrollView {...props} />;\n      }\n    },\n  };\n  state = this._computeState(this.props, {\n    ds: new ListView.DataSource({\n      rowHasChanged: (itemA, itemB) => true,\n      sectionHeaderHasChanged: () => true,\n      getSectionHeaderData: (dataBlob, sectionID) =>\n        this.state.sectionHeaderData[sectionID],\n    }),\n    sectionHeaderData: {},\n  });\n  UNSAFE_componentWillReceiveProps(newProps: Props) {\n    this.setState(state => this._computeState(newProps, state));\n  }\n  render() {\n    return (\n      // $FlowFixMe Found when typing ListView\n      <ListView\n        {...this.props}\n        dataSource={this.state.ds}\n        ref={this._captureRef}\n        renderRow={this._renderRow}\n        renderFooter={this.props.FooterComponent && this._renderFooter}\n        renderSectionHeader={this.props.sections && this._renderSectionHeader}\n        renderSeparator={this.props.SeparatorComponent && this._renderSeparator}\n      />\n    );\n  }\n  _listRef: ?ListView;\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n  _computeState(props: Props, state) {\n    const sectionHeaderData = {};\n    if (props.sections) {\n      invariant(!props.items, 'Cannot have both sections and items props.');\n      const sections = {};\n      props.sections.forEach((sectionIn, ii) => {\n        const sectionID = 's' + ii;\n        sections[sectionID] = sectionIn.data;\n        sectionHeaderData[sectionID] = sectionIn;\n      });\n      return {\n        ds: state.ds.cloneWithRowsAndSections(sections),\n        sectionHeaderData,\n      };\n    } else {\n      invariant(!props.sections, 'Cannot have both sections and items props.');\n      return {\n        // $FlowFixMe Found when typing ListView\n        ds: state.ds.cloneWithRows(props.items),\n        sectionHeaderData,\n      };\n    }\n  }\n  /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n   * suppresses an error when upgrading Flow's support for React. To see the\n   * error delete this comment and run Flow. */\n  _renderFooter = () => <this.props.FooterComponent key=\"$footer\" />;\n  _renderRow = (item, sectionID, rowID, highlightRow) => {\n    return this.props.renderItem({item, index: rowID});\n  };\n  _renderSectionHeader = (section, sectionID) => {\n    const {renderSectionHeader} = this.props;\n    invariant(\n      renderSectionHeader,\n      'Must provide renderSectionHeader with sections prop',\n    );\n    return renderSectionHeader({section});\n  };\n  _renderSeparator = (sID, rID) => (\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    <this.props.SeparatorComponent key={sID + rID} />\n  );\n}\n\nmodule.exports = MetroListView;\n"]}