083af4f8691036d0ed3360f426ed8b0d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var components_1 = require("@bluebase/components");

var react_1 = tslib_1.__importDefault(require("react"));

var __1 = require("..");

var react_test_renderer_1 = tslib_1.__importDefault(require("react-test-renderer"));

describe('SelectionControl', function () {
  it('should render label on the right', function (done) {
    var rendered = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, null, react_1.default.createElement(__1.SelectionControl, {
      label: "foo",
      ControlComponent: components_1.Noop
    })));
    setTimeout(function () {
      var style = rendered.toJSON().props.style;
      expect(style.flexDirection).toBe('row');
      done();
    });
  });
  it('should render label on the left', function (done) {
    var rendered = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, null, react_1.default.createElement(__1.SelectionControl, {
      label: "foo",
      labelPlacement: "end",
      ControlComponent: components_1.Noop
    })));
    setTimeout(function () {
      var style = rendered.toJSON().props.style;
      expect(style.flexDirection).toBe('row-reverse');
      done();
    });
  });
  it('should render label on the top', function (done) {
    var rendered = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, null, react_1.default.createElement(__1.SelectionControl, {
      label: "foo",
      labelPlacement: "top",
      ControlComponent: components_1.Noop
    })));
    setTimeout(function () {
      var style = rendered.toJSON().props.style;
      expect(style.flexDirection).toBe('column');
      done();
    });
  });
  it('should render label on the bottom', function (done) {
    var rendered = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, null, react_1.default.createElement(__1.SelectionControl, {
      label: "foo",
      labelPlacement: "bottom",
      ControlComponent: components_1.Noop
    })));
    setTimeout(function () {
      var style = rendered.toJSON().props.style;
      expect(style.flexDirection).toBe('column-reverse');
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG5hbi9EZXNrdG9wL3BsdWdpbi1yZWFjdC1uYXRpdmUtcGFwZXIvc3JjL2NvbXBvbmVudHMvU2VsZWN0aW9uQ29udHJvbC9fX3Rlc3RzX18vU2VsZWN0aW9uQ29udHJvbC50ZXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsR0FBQSxHQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUE7O0FBQ0EsSUFBQSxxQkFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQTs7QUFFQSxRQUFRLENBQUMsa0JBQUQsRUFBcUIsWUFBSztBQUdqQyxFQUFBLEVBQUUsQ0FBQyxrQ0FBRCxFQUFxQyxVQUFDLElBQUQsRUFBUztBQUUvQyxRQUFNLFFBQVEsR0FBRyxxQkFBQSxDQUFBLE9BQUEsQ0FBYSxNQUFiLENBQ2hCLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLE1BQUEsQ0FBQSxXQUFELEVBQVksSUFBWixFQUNDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLEdBQUEsQ0FBQSxnQkFBRCxFQUFpQjtBQUFDLE1BQUEsS0FBSyxFQUFDLEtBQVA7QUFBYSxNQUFBLGdCQUFnQixFQUFFLFlBQUEsQ0FBQTtBQUEvQixLQUFqQixDQURELENBRGdCLENBQWpCO0FBTUEsSUFBQSxVQUFVLENBQUMsWUFBSztBQUdmLFVBQU0sS0FBSyxHQUFXLFFBQWdCLENBQUMsTUFBakIsR0FBMEIsS0FBMUIsQ0FBZ0MsS0FBdEQ7QUFFQSxNQUFBLE1BQU0sQ0FBRSxLQUFhLENBQUMsYUFBaEIsQ0FBTixDQUFxQyxJQUFyQyxDQUEwQyxLQUExQztBQUNBLE1BQUEsSUFBSTtBQUNKLEtBUFMsQ0FBVjtBQVNBLEdBakJDLENBQUY7QUFvQkEsRUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsVUFBQyxJQUFELEVBQVM7QUFFOUMsUUFBTSxRQUFRLEdBQUcscUJBQUEsQ0FBQSxPQUFBLENBQWEsTUFBYixDQUNoQixPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxNQUFBLENBQUEsV0FBRCxFQUFZLElBQVosRUFDQyxPQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxHQUFBLENBQUEsZ0JBQUQsRUFBaUI7QUFBQyxNQUFBLEtBQUssRUFBQyxLQUFQO0FBQWEsTUFBQSxjQUFjLEVBQUMsS0FBNUI7QUFBa0MsTUFBQSxnQkFBZ0IsRUFBRSxZQUFBLENBQUE7QUFBcEQsS0FBakIsQ0FERCxDQURnQixDQUFqQjtBQU1BLElBQUEsVUFBVSxDQUFDLFlBQUs7QUFHZixVQUFNLEtBQUssR0FBVyxRQUFnQixDQUFDLE1BQWpCLEdBQTBCLEtBQTFCLENBQWdDLEtBQXREO0FBRUEsTUFBQSxNQUFNLENBQUUsS0FBYSxDQUFDLGFBQWhCLENBQU4sQ0FBcUMsSUFBckMsQ0FBMEMsYUFBMUM7QUFDQSxNQUFBLElBQUk7QUFDSixLQVBTLENBQVY7QUFTQSxHQWpCQyxDQUFGO0FBb0JBLEVBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFVBQUMsSUFBRCxFQUFTO0FBRTdDLFFBQU0sUUFBUSxHQUFHLHFCQUFBLENBQUEsT0FBQSxDQUFhLE1BQWIsQ0FDaEIsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsTUFBQSxDQUFBLFdBQUQsRUFBWSxJQUFaLEVBQ0MsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsR0FBQSxDQUFBLGdCQUFELEVBQWlCO0FBQUMsTUFBQSxLQUFLLEVBQUMsS0FBUDtBQUFhLE1BQUEsY0FBYyxFQUFDLEtBQTVCO0FBQWtDLE1BQUEsZ0JBQWdCLEVBQUUsWUFBQSxDQUFBO0FBQXBELEtBQWpCLENBREQsQ0FEZ0IsQ0FBakI7QUFNQSxJQUFBLFVBQVUsQ0FBQyxZQUFLO0FBR2YsVUFBTSxLQUFLLEdBQVcsUUFBZ0IsQ0FBQyxNQUFqQixHQUEwQixLQUExQixDQUFnQyxLQUF0RDtBQUVBLE1BQUEsTUFBTSxDQUFFLEtBQWEsQ0FBQyxhQUFoQixDQUFOLENBQXFDLElBQXJDLENBQTBDLFFBQTFDO0FBQ0EsTUFBQSxJQUFJO0FBQ0osS0FQUyxDQUFWO0FBU0EsR0FqQkMsQ0FBRjtBQW9CQSxFQUFBLEVBQUUsQ0FBQyxtQ0FBRCxFQUFzQyxVQUFDLElBQUQsRUFBUztBQUVoRCxRQUFNLFFBQVEsR0FBRyxxQkFBQSxDQUFBLE9BQUEsQ0FBYSxNQUFiLENBQ2hCLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLE1BQUEsQ0FBQSxXQUFELEVBQVksSUFBWixFQUNDLE9BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLEdBQUEsQ0FBQSxnQkFBRCxFQUFpQjtBQUFDLE1BQUEsS0FBSyxFQUFDLEtBQVA7QUFBYSxNQUFBLGNBQWMsRUFBQyxRQUE1QjtBQUFxQyxNQUFBLGdCQUFnQixFQUFFLFlBQUEsQ0FBQTtBQUF2RCxLQUFqQixDQURELENBRGdCLENBQWpCO0FBTUEsSUFBQSxVQUFVLENBQUMsWUFBSztBQUdmLFVBQU0sS0FBSyxHQUFXLFFBQWdCLENBQUMsTUFBakIsR0FBMEIsS0FBMUIsQ0FBZ0MsS0FBdEQ7QUFFQSxNQUFBLE1BQU0sQ0FBRSxLQUFhLENBQUMsYUFBaEIsQ0FBTixDQUFxQyxJQUFyQyxDQUEwQyxnQkFBMUM7QUFDQSxNQUFBLElBQUk7QUFDSixLQVBTLENBQVY7QUFTQSxHQWpCQyxDQUFGO0FBbUJBLENBbEZPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbHVlQmFzZUFwcCB9IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCB7IE5vb3AgfSBmcm9tICdAYmx1ZWJhc2UvY29tcG9uZW50cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2VsZWN0aW9uQ29udHJvbCB9IGZyb20gJy4uJztcbmltcG9ydCBUZXN0UmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5cbmRlc2NyaWJlKCdTZWxlY3Rpb25Db250cm9sJywgKCkgPT4ge1xuXG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgbGFiZWwgb24gdGhlIHJpZ2h0JywgKGRvbmUpID0+IHtcblxuXHRcdGNvbnN0IHJlbmRlcmVkID0gVGVzdFJlbmRlcmVyLmNyZWF0ZShcblx0XHRcdDxCbHVlQmFzZUFwcD5cblx0XHRcdFx0PFNlbGVjdGlvbkNvbnRyb2wgbGFiZWw9XCJmb29cIiBDb250cm9sQ29tcG9uZW50PXtOb29wfSAvPlxuXHRcdFx0PC9CbHVlQmFzZUFwcD5cblx0XHQpO1xuXG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHQvLyBleHBlY3QocmVuZGVyZWQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuXG5cdFx0XHRjb25zdCBzdHlsZTogYW55W10gPSAocmVuZGVyZWQgYXMgYW55KS50b0pTT04oKS5wcm9wcy5zdHlsZTtcblxuXHRcdFx0ZXhwZWN0KChzdHlsZSBhcyBhbnkpLmZsZXhEaXJlY3Rpb24pLnRvQmUoJ3JvdycpO1xuXHRcdFx0ZG9uZSgpO1xuXHRcdH0pO1xuXG5cdH0pO1xuXG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgbGFiZWwgb24gdGhlIGxlZnQnLCAoZG9uZSkgPT4ge1xuXG5cdFx0Y29uc3QgcmVuZGVyZWQgPSBUZXN0UmVuZGVyZXIuY3JlYXRlKFxuXHRcdFx0PEJsdWVCYXNlQXBwPlxuXHRcdFx0XHQ8U2VsZWN0aW9uQ29udHJvbCBsYWJlbD1cImZvb1wiIGxhYmVsUGxhY2VtZW50PVwiZW5kXCIgQ29udHJvbENvbXBvbmVudD17Tm9vcH0gLz5cblx0XHRcdDwvQmx1ZUJhc2VBcHA+XG5cdFx0KTtcblxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Ly8gZXhwZWN0KHJlbmRlcmVkKS50b01hdGNoU25hcHNob3QoKTtcblxuXHRcdFx0Y29uc3Qgc3R5bGU6IGFueVtdID0gKHJlbmRlcmVkIGFzIGFueSkudG9KU09OKCkucHJvcHMuc3R5bGU7XG5cblx0XHRcdGV4cGVjdCgoc3R5bGUgYXMgYW55KS5mbGV4RGlyZWN0aW9uKS50b0JlKCdyb3ctcmV2ZXJzZScpO1xuXHRcdFx0ZG9uZSgpO1xuXHRcdH0pO1xuXG5cdH0pO1xuXG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgbGFiZWwgb24gdGhlIHRvcCcsIChkb25lKSA9PiB7XG5cblx0XHRjb25zdCByZW5kZXJlZCA9IFRlc3RSZW5kZXJlci5jcmVhdGUoXG5cdFx0XHQ8Qmx1ZUJhc2VBcHA+XG5cdFx0XHRcdDxTZWxlY3Rpb25Db250cm9sIGxhYmVsPVwiZm9vXCIgbGFiZWxQbGFjZW1lbnQ9XCJ0b3BcIiBDb250cm9sQ29tcG9uZW50PXtOb29wfSAvPlxuXHRcdFx0PC9CbHVlQmFzZUFwcD5cblx0XHQpO1xuXG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHQvLyBleHBlY3QocmVuZGVyZWQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuXG5cdFx0XHRjb25zdCBzdHlsZTogYW55W10gPSAocmVuZGVyZWQgYXMgYW55KS50b0pTT04oKS5wcm9wcy5zdHlsZTtcblxuXHRcdFx0ZXhwZWN0KChzdHlsZSBhcyBhbnkpLmZsZXhEaXJlY3Rpb24pLnRvQmUoJ2NvbHVtbicpO1xuXHRcdFx0ZG9uZSgpO1xuXHRcdH0pO1xuXG5cdH0pO1xuXG5cblx0aXQoJ3Nob3VsZCByZW5kZXIgbGFiZWwgb24gdGhlIGJvdHRvbScsIChkb25lKSA9PiB7XG5cblx0XHRjb25zdCByZW5kZXJlZCA9IFRlc3RSZW5kZXJlci5jcmVhdGUoXG5cdFx0XHQ8Qmx1ZUJhc2VBcHA+XG5cdFx0XHRcdDxTZWxlY3Rpb25Db250cm9sIGxhYmVsPVwiZm9vXCIgbGFiZWxQbGFjZW1lbnQ9XCJib3R0b21cIiBDb250cm9sQ29tcG9uZW50PXtOb29wfSAvPlxuXHRcdFx0PC9CbHVlQmFzZUFwcD5cblx0XHQpO1xuXG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHQvLyBleHBlY3QocmVuZGVyZWQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuXG5cdFx0XHRjb25zdCBzdHlsZTogYW55W10gPSAocmVuZGVyZWQgYXMgYW55KS50b0pTT04oKS5wcm9wcy5zdHlsZTtcblxuXHRcdFx0ZXhwZWN0KChzdHlsZSBhcyBhbnkpLmZsZXhEaXJlY3Rpb24pLnRvQmUoJ2NvbHVtbi1yZXZlcnNlJyk7XG5cdFx0XHRkb25lKCk7XG5cdFx0fSk7XG5cblx0fSk7XG5cbn0pO1xuIl19