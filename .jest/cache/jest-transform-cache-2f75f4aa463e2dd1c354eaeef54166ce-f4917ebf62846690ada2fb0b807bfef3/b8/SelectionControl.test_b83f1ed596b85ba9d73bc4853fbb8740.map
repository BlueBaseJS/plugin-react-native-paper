{"version":3,"sources":["/Users/adnan/Desktop/plugin-react-native-paper/src/components/SelectionControl/__tests__/SelectionControl.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlueBaseApp } from '@bluebase/core';\nimport { Noop } from '@bluebase/components';\nimport React from 'react';\nimport { SelectionControl } from '..';\nimport TestRenderer from 'react-test-renderer';\n\ndescribe('SelectionControl', () => {\n\n\n\tit('should render label on the right', (done) => {\n\n\t\tconst rendered = TestRenderer.create(\n\t\t\t<BlueBaseApp>\n\t\t\t\t<SelectionControl label=\"foo\" ControlComponent={Noop} />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tsetTimeout(() => {\n\t\t\t// expect(rendered).toMatchSnapshot();\n\n\t\t\tconst style: any[] = (rendered as any).toJSON().props.style;\n\n\t\t\texpect((style as any).flexDirection).toBe('row');\n\t\t\tdone();\n\t\t});\n\n\t});\n\n\n\tit('should render label on the left', (done) => {\n\n\t\tconst rendered = TestRenderer.create(\n\t\t\t<BlueBaseApp>\n\t\t\t\t<SelectionControl label=\"foo\" labelPlacement=\"end\" ControlComponent={Noop} />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tsetTimeout(() => {\n\t\t\t// expect(rendered).toMatchSnapshot();\n\n\t\t\tconst style: any[] = (rendered as any).toJSON().props.style;\n\n\t\t\texpect((style as any).flexDirection).toBe('row-reverse');\n\t\t\tdone();\n\t\t});\n\n\t});\n\n\n\tit('should render label on the top', (done) => {\n\n\t\tconst rendered = TestRenderer.create(\n\t\t\t<BlueBaseApp>\n\t\t\t\t<SelectionControl label=\"foo\" labelPlacement=\"top\" ControlComponent={Noop} />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tsetTimeout(() => {\n\t\t\t// expect(rendered).toMatchSnapshot();\n\n\t\t\tconst style: any[] = (rendered as any).toJSON().props.style;\n\n\t\t\texpect((style as any).flexDirection).toBe('column');\n\t\t\tdone();\n\t\t});\n\n\t});\n\n\n\tit('should render label on the bottom', (done) => {\n\n\t\tconst rendered = TestRenderer.create(\n\t\t\t<BlueBaseApp>\n\t\t\t\t<SelectionControl label=\"foo\" labelPlacement=\"bottom\" ControlComponent={Noop} />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tsetTimeout(() => {\n\t\t\t// expect(rendered).toMatchSnapshot();\n\n\t\t\tconst style: any[] = (rendered as any).toJSON().props.style;\n\n\t\t\texpect((style as any).flexDirection).toBe('column-reverse');\n\t\t\tdone();\n\t\t});\n\n\t});\n\n});\n"]}