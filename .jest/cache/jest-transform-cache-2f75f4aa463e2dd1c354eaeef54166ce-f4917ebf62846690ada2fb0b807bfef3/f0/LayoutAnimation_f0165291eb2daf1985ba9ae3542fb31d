c2a59d25f5f13c4c82dd0f76b4098c2a
'use strict';

var PropTypes = require('prop-types');

var UIManager = require('UIManager');

var keyMirror = require('fbjs/lib/keyMirror');

var checkPropTypes = PropTypes.checkPropTypes;
var TypesEnum = {
  spring: true,
  linear: true,
  easeInEaseOut: true,
  easeIn: true,
  easeOut: true,
  keyboard: true
};
var Types = keyMirror(TypesEnum);
var PropertiesEnum = {
  opacity: true,
  scaleX: true,
  scaleY: true,
  scaleXY: true
};
var Properties = keyMirror(PropertiesEnum);
var animType = PropTypes.shape({
  duration: PropTypes.number,
  delay: PropTypes.number,
  springDamping: PropTypes.number,
  initialVelocity: PropTypes.number,
  type: PropTypes.oneOf(Object.keys(Types)).isRequired,
  property: PropTypes.oneOf(Object.keys(Properties))
});
var configType = PropTypes.shape({
  duration: PropTypes.number.isRequired,
  create: animType,
  update: animType,
  delete: animType
});

function checkConfig(config, location, name) {
  checkPropTypes({
    config: configType
  }, {
    config: config
  }, location, name);
}

function configureNext(config, onAnimationDidEnd) {
  if (__DEV__) {
    checkConfig(config, 'config', 'LayoutAnimation.configureNext');
  }

  UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
}

function create(duration, type, creationProp) {
  return {
    duration: duration,
    create: {
      type: type,
      property: creationProp
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: creationProp
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
  linear: create(500, Types.linear, Properties.opacity),
  spring: {
    duration: 700,
    create: {
      type: Types.linear,
      property: Properties.opacity
    },
    update: {
      type: Types.spring,
      springDamping: 0.4
    },
    delete: {
      type: Types.linear,
      property: Properties.opacity
    }
  }
};
var LayoutAnimation = {
  configureNext: configureNext,
  create: create,
  Types: Types,
  Properties: Properties,
  checkConfig: checkConfig,
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};
module.exports = LayoutAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxheW91dEFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJyZXF1aXJlIiwiVUlNYW5hZ2VyIiwia2V5TWlycm9yIiwiY2hlY2tQcm9wVHlwZXMiLCJUeXBlc0VudW0iLCJzcHJpbmciLCJsaW5lYXIiLCJlYXNlSW5FYXNlT3V0IiwiZWFzZUluIiwiZWFzZU91dCIsImtleWJvYXJkIiwiVHlwZXMiLCJQcm9wZXJ0aWVzRW51bSIsIm9wYWNpdHkiLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVhZIiwiUHJvcGVydGllcyIsImFuaW1UeXBlIiwic2hhcGUiLCJkdXJhdGlvbiIsIm51bWJlciIsImRlbGF5Iiwic3ByaW5nRGFtcGluZyIsImluaXRpYWxWZWxvY2l0eSIsInR5cGUiLCJvbmVPZiIsIk9iamVjdCIsImtleXMiLCJpc1JlcXVpcmVkIiwicHJvcGVydHkiLCJjb25maWdUeXBlIiwiY3JlYXRlIiwidXBkYXRlIiwiZGVsZXRlIiwiY2hlY2tDb25maWciLCJjb25maWciLCJsb2NhdGlvbiIsIm5hbWUiLCJjb25maWd1cmVOZXh0Iiwib25BbmltYXRpb25EaWRFbmQiLCJfX0RFVl9fIiwiY29uZmlndXJlTmV4dExheW91dEFuaW1hdGlvbiIsImNyZWF0aW9uUHJvcCIsIlByZXNldHMiLCJMYXlvdXRBbmltYXRpb24iLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsWUFBRCxDQUF6Qjs7QUFDQSxJQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUtBLElBQU1FLFNBQVMsR0FBR0YsT0FBTyxDQUFDLG9CQUFELENBQXpCOztJQUVPRyxjLEdBQWtCSixTLENBQWxCSSxjO0FBRVAsSUFBTUMsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxNQUFNLEVBQUUsSUFEUTtBQUVoQkMsRUFBQUEsTUFBTSxFQUFFLElBRlE7QUFHaEJDLEVBQUFB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LENBQUNPLElBQWQsQ0FBbUIsSUFBbkIsRUFBeUJGLE9BQU8sQ0FBQ3ZDLE1BQWpDO0FBMUJjLENBQXhCO0FBNkJBMEMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxlQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBVSU1hbmFnZXIgPSByZXF1aXJlKCdVSU1hbmFnZXInKTtcblxuLyogJEZsb3dGaXhNZSg+PTAuNTQuMCBzaXRlPXJlYWN0X25hdGl2ZV9vc3MpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuIGVycm9yXG4gKiBmb3VuZCB3aGVuIEZsb3cgdjAuNTQgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kXG4gKiBydW4gRmxvdy4gKi9cbmNvbnN0IGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xuXG5jb25zdCB7Y2hlY2tQcm9wVHlwZXN9ID0gUHJvcFR5cGVzO1xuXG5jb25zdCBUeXBlc0VudW0gPSB7XG4gIHNwcmluZzogdHJ1ZSxcbiAgbGluZWFyOiB0cnVlLFxuICBlYXNlSW5FYXNlT3V0OiB0cnVlLFxuICBlYXNlSW46IHRydWUsXG4gIGVhc2VPdXQ6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxufTtcbmNvbnN0IFR5cGVzID0ga2V5TWlycm9yKFR5cGVzRW51bSk7XG5cbmNvbnN0IFByb3BlcnRpZXNFbnVtID0ge1xuICBvcGFjaXR5OiB0cnVlLFxuICBzY2FsZVg6IHRydWUsXG4gIHNjYWxlWTogdHJ1ZSxcbiAgc2NhbGVYWTogdHJ1ZSxcbn07XG5jb25zdCBQcm9wZXJ0aWVzID0ga2V5TWlycm9yKFByb3BlcnRpZXNFbnVtKTtcblxuY29uc3QgYW5pbVR5cGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBkdXJhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcbiAgZGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIHNwcmluZ0RhbXBpbmc6IFByb3BUeXBlcy5udW1iZXIsXG4gIGluaXRpYWxWZWxvY2l0eTogUHJvcFR5cGVzLm51bWJlcixcbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKFR5cGVzKSkuaXNSZXF1aXJlZCxcbiAgcHJvcGVydHk6IFByb3BUeXBlcy5vbmVPZihcbiAgICAvLyBPbmx5IGFwcGxpZXMgdG8gY3JlYXRlL2RlbGV0ZVxuICAgIE9iamVjdC5rZXlzKFByb3BlcnRpZXMpLFxuICApLFxufSk7XG5cbnR5cGUgQW5pbSA9IHtcbiAgZHVyYXRpb24/OiBudW1iZXIsXG4gIGRlbGF5PzogbnVtYmVyLFxuICBzcHJpbmdEYW1waW5nPzogbnVtYmVyLFxuICBpbml0aWFsVmVsb2NpdHk/OiBudW1iZXIsXG4gIHR5cGU/OiAkRW51bTx0eXBlb2YgVHlwZXNFbnVtPixcbiAgcHJvcGVydHk/OiAkRW51bTx0eXBlb2YgUHJvcGVydGllc0VudW0+LFxufTtcblxuY29uc3QgY29uZmlnVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGR1cmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGNyZWF0ZTogYW5pbVR5cGUsXG4gIHVwZGF0ZTogYW5pbVR5cGUsXG4gIGRlbGV0ZTogYW5pbVR5cGUsXG59KTtcblxudHlwZSBDb25maWcgPSB7XG4gIGR1cmF0aW9uOiBudW1iZXIsXG4gIGNyZWF0ZT86IEFuaW0sXG4gIHVwZGF0ZT86IEFuaW0sXG4gIGRlbGV0ZT86IEFuaW0sXG59O1xuXG5mdW5jdGlvbiBjaGVja0NvbmZpZyhjb25maWc6IENvbmZpZywgbG9jYXRpb246IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gIGNoZWNrUHJvcFR5cGVzKHtjb25maWc6IGNvbmZpZ1R5cGV9LCB7Y29uZmlnfSwgbG9jYXRpb24sIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBjb25maWd1cmVOZXh0KGNvbmZpZzogQ29uZmlnLCBvbkFuaW1hdGlvbkRpZEVuZD86IEZ1bmN0aW9uKSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY2hlY2tDb25maWcoY29uZmlnLCAnY29uZmlnJywgJ0xheW91dEFuaW1hdGlvbi5jb25maWd1cmVOZXh0Jyk7XG4gIH1cbiAgVUlNYW5hZ2VyLmNvbmZpZ3VyZU5leHRMYXlvdXRBbmltYXRpb24oXG4gICAgY29uZmlnLFxuICAgIG9uQW5pbWF0aW9uRGlkRW5kIHx8IGZ1bmN0aW9uKCkge30sXG4gICAgZnVuY3Rpb24oKSB7XG4gICAgICAvKiB1bnVzZWQgKi9cbiAgICB9LFxuICApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUoZHVyYXRpb246IG51bWJlciwgdHlwZSwgY3JlYXRpb25Qcm9wKTogQ29uZmlnIHtcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbixcbiAgICBjcmVhdGU6IHtcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wZXJ0eTogY3JlYXRpb25Qcm9wLFxuICAgIH0sXG4gICAgdXBkYXRlOiB7XG4gICAgICB0eXBlLFxuICAgIH0sXG4gICAgZGVsZXRlOiB7XG4gICAgICB0eXBlLFxuICAgICAgcHJvcGVydHk6IGNyZWF0aW9uUHJvcCxcbiAgICB9LFxuICB9O1xufVxuXG5jb25zdCBQcmVzZXRzID0ge1xuICBlYXNlSW5FYXNlT3V0OiBjcmVhdGUoMzAwLCBUeXBlcy5lYXNlSW5FYXNlT3V0LCBQcm9wZXJ0aWVzLm9wYWNpdHkpLFxuICBsaW5lYXI6IGNyZWF0ZSg1MDAsIFR5cGVzLmxpbmVhciwgUHJvcGVydGllcy5vcGFjaXR5KSxcbiAgc3ByaW5nOiB7XG4gICAgZHVyYXRpb246IDcwMCxcbiAgICBjcmVhdGU6IHtcbiAgICAgIHR5cGU6IFR5cGVzLmxpbmVhcixcbiAgICAgIHByb3BlcnR5OiBQcm9wZXJ0aWVzLm9wYWNpdHksXG4gICAgfSxcbiAgICB1cGRhdGU6IHtcbiAgICAgIHR5cGU6IFR5cGVzLnNwcmluZyxcbiAgICAgIHNwcmluZ0RhbXBpbmc6IDAuNCxcbiAgICB9LFxuICAgIGRlbGV0ZToge1xuICAgICAgdHlwZTogVHlwZXMubGluZWFyLFxuICAgICAgcHJvcGVydHk6IFByb3BlcnRpZXMub3BhY2l0eSxcbiAgICB9LFxuICB9LFxufTtcblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IGFuaW1hdGVzIHZpZXdzIHRvIHRoZWlyIG5ldyBwb3NpdGlvbnMgd2hlbiB0aGVcbiAqIG5leHQgbGF5b3V0IGhhcHBlbnMuXG4gKlxuICogQSBjb21tb24gd2F5IHRvIHVzZSB0aGlzIEFQSSBpcyB0byBjYWxsIGl0IGJlZm9yZSBjYWxsaW5nIGBzZXRTdGF0ZWAuXG4gKlxuICogTm90ZSB0aGF0IGluIG9yZGVyIHRvIGdldCB0aGlzIHRvIHdvcmsgb24gKipBbmRyb2lkKiogeW91IG5lZWQgdG8gc2V0IHRoZSBmb2xsb3dpbmcgZmxhZ3MgdmlhIGBVSU1hbmFnZXJgOlxuICpcbiAqICAgICBVSU1hbmFnZXIuc2V0TGF5b3V0QW5pbWF0aW9uRW5hYmxlZEV4cGVyaW1lbnRhbCAmJiBVSU1hbmFnZXIuc2V0TGF5b3V0QW5pbWF0aW9uRW5hYmxlZEV4cGVyaW1lbnRhbCh0cnVlKTtcbiAqL1xuY29uc3QgTGF5b3V0QW5pbWF0aW9uID0ge1xuICAvKipcbiAgICogU2NoZWR1bGVzIGFuIGFuaW1hdGlvbiB0byBoYXBwZW4gb24gdGhlIG5leHQgbGF5b3V0LlxuICAgKlxuICAgKiBAcGFyYW0gY29uZmlnIFNwZWNpZmllcyBhbmltYXRpb24gcHJvcGVydGllczpcbiAgICpcbiAgICogICAtIGBkdXJhdGlvbmAgaW4gbWlsbGlzZWNvbmRzXG4gICAqICAgLSBgY3JlYXRlYCwgY29uZmlnIGZvciBhbmltYXRpbmcgaW4gbmV3IHZpZXdzIChzZWUgYEFuaW1gIHR5cGUpXG4gICAqICAgLSBgdXBkYXRlYCwgY29uZmlnIGZvciBhbmltYXRpbmcgdmlld3MgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZFxuICAgKiAoc2VlIGBBbmltYCB0eXBlKVxuICAgKlxuICAgKiBAcGFyYW0gb25BbmltYXRpb25EaWRFbmQgQ2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBmaW5pc2hlZC5cbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TLlxuICAgKiBAcGFyYW0gb25FcnJvciBDYWxsZWQgb24gZXJyb3IuIE9ubHkgc3VwcG9ydGVkIG9uIGlPUy5cbiAgICovXG4gIGNvbmZpZ3VyZU5leHQsXG4gIC8qKlxuICAgKiBIZWxwZXIgZm9yIGNyZWF0aW5nIGEgY29uZmlnIGZvciBgY29uZmlndXJlTmV4dGAuXG4gICAqL1xuICBjcmVhdGUsXG4gIFR5cGVzLFxuICBQcm9wZXJ0aWVzLFxuICBjaGVja0NvbmZpZyxcbiAgUHJlc2V0cyxcbiAgZWFzZUluRWFzZU91dDogY29uZmlndXJlTmV4dC5iaW5kKG51bGwsIFByZXNldHMuZWFzZUluRWFzZU91dCksXG4gIGxpbmVhcjogY29uZmlndXJlTmV4dC5iaW5kKG51bGwsIFByZXNldHMubGluZWFyKSxcbiAgc3ByaW5nOiBjb25maWd1cmVOZXh0LmJpbmQobnVsbCwgUHJlc2V0cy5zcHJpbmcpLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMYXlvdXRBbmltYXRpb247XG4iXX0=