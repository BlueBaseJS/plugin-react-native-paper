a5a5229e1e9799ac708ef27819ce6dc7
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../core/theming");

var DURATION = 2400;

var ActivityIndicator = function (_React$Component) {
  (0, _inherits2.default)(ActivityIndicator, _React$Component);

  function ActivityIndicator() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ActivityIndicator);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ActivityIndicator)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      timer: new _reactNative.Animated.Value(0),
      fade: new _reactNative.Animated.Value(!_this.props.animating && _this.props.hidesWhenStopped ? 0 : 1)
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "rotation", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_startRotation", function () {
      var _this$state = _this.state,
          fade = _this$state.fade,
          timer = _this$state.timer;

      _reactNative.Animated.timing(fade, {
        duration: 200,
        toValue: 1,
        isInteraction: false,
        useNativeDriver: true
      }).start();

      if (_this.rotation) {
        timer.setValue(0);

        _reactNative.Animated.loop(_this.rotation).start();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_stopRotation", function () {
      if (_this.rotation) {
        _this.rotation.stop();
      }
    });
    return _this;
  }

  (0, _createClass2.default)(ActivityIndicator, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var animating = this.props.animating;
      var timer = this.state.timer;
      this.rotation = _reactNative.Animated.timing(timer, {
        duration: DURATION,
        easing: _reactNative.Easing.linear,
        useNativeDriver: _reactNative.Platform.OS !== 'web',
        toValue: 1,
        isInteraction: false
      });

      if (animating) {
        this._startRotation();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          animating = _this$props.animating,
          hidesWhenStopped = _this$props.hidesWhenStopped;
      var fade = this.state.fade;

      if (animating !== prevProps.animating) {
        if (animating) {
          this._startRotation();
        } else if (hidesWhenStopped) {
          _reactNative.Animated.timing(fade, {
            duration: 200,
            toValue: 0,
            useNativeDriver: true,
            isInteraction: false
          }).start(this._stopRotation.bind(this));
        } else {
          this._stopRotation();
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          fade = _this$state2.fade,
          timer = _this$state2.timer;
      var _this$props2 = this.props,
          animating = _this$props2.animating,
          indicatorColor = _this$props2.color,
          hidesWhenStopped = _this$props2.hidesWhenStopped,
          indicatorSize = _this$props2.size,
          style = _this$props2.style,
          theme = _this$props2.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props2, ["animating", "color", "hidesWhenStopped", "size", "style", "theme"]);
      var color = indicatorColor || theme.colors.primary;
      var size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize;
      var frames = 60 * DURATION / 1000;

      var easing = _reactNative.Easing.bezier(0.4, 0.0, 0.7, 1.0);

      var containerStyle = {
        width: size,
        height: size / 2,
        overflow: 'hidden'
      };
      return React.createElement(_reactNative.View, (0, _extends2.default)({
        style: [styles.container, style]
      }, rest), React.createElement(_reactNative.Animated.View, {
        style: [{
          width: size,
          height: size,
          opacity: fade
        }]
      }, [0, 1].map(function (index) {
        var inputRange = Array.from(new Array(frames), function (frame, frameIndex) {
          return frameIndex / (frames - 1);
        });
        var outputRange = Array.from(new Array(frames), function (frame, frameIndex) {
          var progress = 2 * frameIndex / (frames - 1);
          var rotation = index ? +(360 - 15) : -(180 - 15);

          if (progress > 1.0) {
            progress = 2.0 - progress;
          }

          var direction = index ? -1 : +1;
          return direction * (180 - 30) * easing(progress) + rotation + "deg";
        });
        var layerStyle = {
          width: size,
          height: size,
          transform: [{
            rotate: timer.interpolate({
              inputRange: [0, 1],
              outputRange: [0 + 30 + 15 + "deg", 2 * 360 + 30 + 15 + "deg"]
            })
          }]
        };
        var viewportStyle = {
          width: size,
          height: size,
          transform: [{
            translateY: index ? -size / 2 : 0
          }, {
            rotate: timer.interpolate({
              inputRange: inputRange,
              outputRange: outputRange
            })
          }]
        };
        var offsetStyle = index ? {
          top: size / 2
        } : null;
        var lineStyle = {
          width: size,
          height: size,
          borderColor: color,
          borderWidth: size / 10,
          borderRadius: size / 2
        };
        return React.createElement(_reactNative.Animated.View, {
          key: index,
          style: [styles.layer]
        }, React.createElement(_reactNative.Animated.View, {
          style: layerStyle
        }, React.createElement(_reactNative.Animated.View, {
          style: [containerStyle, offsetStyle],
          collapsable: false
        }, React.createElement(_reactNative.Animated.View, {
          style: viewportStyle
        }, React.createElement(_reactNative.Animated.View, {
          style: containerStyle,
          collapsable: false
        }, React.createElement(_reactNative.Animated.View, {
          style: lineStyle
        }))))));
      })));
    }
  }]);
  return ActivityIndicator;
}(React.Component);

(0, _defineProperty2.default)(ActivityIndicator, "defaultProps", {
  animating: true,
  size: 'small',
  hidesWhenStopped: true
});

var styles = _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  layer: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'center',
    alignItems: 'center'
  })
});

var _default = (0, _theming.withTheme)(ActivityIndicator);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFjdGl2aXR5SW5kaWNhdG9yLmpzIl0sIm5hbWVzIjpbIkRVUkFUSU9OIiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJ0aW1lciIsIkFuaW1hdGVkIiwiVmFsdWUiLCJmYWRlIiwicHJvcHMiLCJhbmltYXRpbmciLCJoaWRlc1doZW5TdG9wcGVkIiwic3RhdGUiLCJ0aW1pbmciLCJkdXJhdGlvbiIsInRvVmFsdWUiLCJpc0ludGVyYWN0aW9uIiwidXNlTmF0aXZlRHJpdmVyIiwic3RhcnQiLCJyb3RhdGlvbiIsInNldFZhbHVlIiwibG9vcCIsInN0b3AiLCJlYXNpbmciLCJFYXNpbmciLCJsaW5lYXIiLCJQbGF0Zm9ybSIsIk9TIiwiX3N0YXJ0Um90YXRpb24iLCJwcmV2UHJvcHMiLCJfc3RvcFJvdGF0aW9uIiwiYmluZCIsImluZGljYXRvckNvbG9yIiwiY29sb3IiLCJpbmRpY2F0b3JTaXplIiwic2l6ZSIsInN0eWxlIiwidGhlbWUiLCJyZXN0IiwiY29sb3JzIiwicHJpbWFyeSIsImZyYW1lcyIsImJlemllciIsImNvbnRhaW5lclN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJvdmVyZmxvdyIsInN0eWxlcyIsImNvbnRhaW5lciIsIm9wYWNpdHkiLCJtYXAiLCJpbmRleCIsImlucHV0UmFuZ2UiLCJBcnJheSIsImZyb20iLCJmcmFtZSIsImZyYW1lSW5kZXgiLCJvdXRwdXRSYW5nZSIsInByb2dyZXNzIiwiZGlyZWN0aW9uIiwibGF5ZXJTdHlsZSIsInRyYW5zZm9ybSIsInJvdGF0ZSIsImludGVycG9sYXRlIiwidmlld3BvcnRTdHlsZSIsInRyYW5zbGF0ZVkiLCJvZmZzZXRTdHlsZSIsInRvcCIsImxpbmVTdHlsZSIsImJvcmRlckNvbG9yIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJSYWRpdXMiLCJsYXllciIsIlJlYWN0IiwiQ29tcG9uZW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImFic29sdXRlRmls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S0FBSyxFQUFFLENBQUNqQixjQUFELEVBQWlCdUIsV0FBakIsQ0FEVDtBQUVFLFVBQUEsV0FBVyxFQUFFO0FBRmYsV0FJRSxvQkFBQyxxQkFBRCxDQUFVLElBQVY7QUFBZSxVQUFBLEtBQUssRUFBRUY7QUFBdEIsV0FDRSxvQkFBQyxxQkFBRCxDQUFVLElBQVY7QUFBZSxVQUFBLEtBQUssRUFBRXJCLGNBQXRCO0FBQXNDLFVBQUEsV0FBVyxFQUFFO0FBQW5ELFdBQ0Usb0JBQUMscUJBQUQsQ0FBVSxJQUFWO0FBQWUsVUFBQSxLQUFLLEVBQUV5QjtBQUF0QixVQURGLENBREYsQ0FKRixDQURGLENBREYsQ0FERjtBQWdCRCxPQTlFQSxDQURILENBREYsQ0FERjtBQXFGRDs7O0VBak02QkssS0FBSyxDQUFDQyxTOzs4QkFBaEN0RSxpQixrQkFDa0I7QUFDcEJNLEVBQUFBLFNBQVMsRUFBRSxJQURTO0FBRXBCeUIsRUFBQUEsSUFBSSxFQUFFLE9BRmM7QUFHcEJ4QixFQUFBQSxnQkFBZ0IsRUFBRTtBQUhFLEM7O0FBbU14QixJQUFNb0MsTUFBTSxHQUFHNEIsd0JBQVdDLE1BQVgsQ0FBa0I7QUFDL0I1QixFQUFBQSxTQUFTLEVBQUU7QUFDVDZCLElBQUFBLGNBQWMsRUFBRSxRQURQO0FBRVRDLElBQUFBLFVBQVUsRUFBRTtBQUZILEdBRG9CO0FBTS9CTixFQUFBQSxLQUFLLGtDQUNBRyx3QkFBV0ksa0JBRFg7QUFHSEYsSUFBQUEsY0FBYyxFQUFFLFFBSGI7QUFJSEMsSUFBQUEsVUFBVSxFQUFFO0FBSlQ7QUFOMEIsQ0FBbEIsQ0FBZjs7ZUFjZSx3QkFBVTFFLGlCQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbmltYXRlZCwgRWFzaW5nLCBQbGF0Zm9ybSwgU3R5bGVTaGVldCwgVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IHR5cGUgeyBUaGVtZSB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxudHlwZSBQcm9wcyA9IHt8XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHNob3cgdGhlIGluZGljYXRvciBvciBoaWRlIGl0LlxuICAgKi9cbiAgYW5pbWF0aW5nOiBib29sZWFuLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBzcGlubmVyLlxuICAgKi9cbiAgY29sb3I/OiBzdHJpbmcsXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBpbmRpY2F0b3IuXG4gICAqL1xuICBzaXplOiAnc21hbGwnIHwgJ2xhcmdlJyB8IG51bWJlcixcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGluZGljYXRvciBzaG91bGQgaGlkZSB3aGVuIG5vdCBhbmltYXRpbmcuXG4gICAqL1xuICBoaWRlc1doZW5TdG9wcGVkOiBib29sZWFuLFxuICBzdHlsZT86IGFueSxcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFRoZW1lLFxufH07XG5cbnR5cGUgU3RhdGUgPSB7XG4gIHRpbWVyOiBBbmltYXRlZC5WYWx1ZSxcbiAgZmFkZTogQW5pbWF0ZWQuVmFsdWUsXG59O1xuXG5jb25zdCBEVVJBVElPTiA9IDI0MDA7XG5cbi8qKlxuICogQWN0aXZpdHkgaW5kaWNhdG9yIGlzIHVzZWQgdG8gcHJlc2VudCBwcm9ncmVzcyBvZiBzb21lIGFjdGl2aXR5IGluIHRoZSBhcHAuXG4gKiBJdCBjYW4gYmUgdXNlZCBhcyBhIGRyb3AtaW4gZm9yIHRoZSBBY3Rpdml0eUluZGljYXRvciBzaGlwcGVkIHdpdGggUmVhY3QgTmF0aXZlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL2FjdGl2aXR5LWluZGljYXRvci5naWZcIiBzdHlsZT1cIndpZHRoOiAxMDBweDtcIiAvPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBBY3Rpdml0eUluZGljYXRvciwgQ29sb3JzIH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbiAqXG4gKiBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IChcbiAqICAgPEFjdGl2aXR5SW5kaWNhdG9yIGFuaW1hdGluZz17dHJ1ZX0gY29sb3I9e0NvbG9ycy5yZWQ4MDB9IC8+XG4gKiApO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IE15Q29tcG9uZW50O1xuICogYGBgXG4gKi9cbmNsYXNzIEFjdGl2aXR5SW5kaWNhdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFuaW1hdGluZzogdHJ1ZSxcbiAgICBzaXplOiAnc21hbGwnLFxuICAgIGhpZGVzV2hlblN0b3BwZWQ6IHRydWUsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgdGltZXI6IG5ldyBBbmltYXRlZC5WYWx1ZSgwKSxcbiAgICBmYWRlOiBuZXcgQW5pbWF0ZWQuVmFsdWUoXG4gICAgICAhdGhpcy5wcm9wcy5hbmltYXRpbmcgJiYgdGhpcy5wcm9wcy5oaWRlc1doZW5TdG9wcGVkID8gMCA6IDFcbiAgICApLFxuICB9O1xuXG4gIHJvdGF0aW9uID0gbnVsbDtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGFuaW1hdGluZyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHRpbWVyIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gQ2lyY3VsYXIgYW5pbWF0aW9uIGluIGxvb3BcbiAgICB0aGlzLnJvdGF0aW9uID0gQW5pbWF0ZWQudGltaW5nKHRpbWVyLCB7XG4gICAgICBkdXJhdGlvbjogRFVSQVRJT04sXG4gICAgICBlYXNpbmc6IEVhc2luZy5saW5lYXIsXG4gICAgICAvLyBBbmltYXRlZC5sb29wIGRvZXMgbm90IHdvcmsgaWYgdXNlTmF0aXZlRHJpdmVyIGlzIHRydWUgb24gd2ViXG4gICAgICB1c2VOYXRpdmVEcml2ZXI6IFBsYXRmb3JtLk9TICE9PSAnd2ViJyxcbiAgICAgIHRvVmFsdWU6IDEsXG4gICAgICBpc0ludGVyYWN0aW9uOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIGlmIChhbmltYXRpbmcpIHtcbiAgICAgIHRoaXMuX3N0YXJ0Um90YXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBQcm9wcykge1xuICAgIGNvbnN0IHsgYW5pbWF0aW5nLCBoaWRlc1doZW5TdG9wcGVkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZmFkZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChhbmltYXRpbmcgIT09IHByZXZQcm9wcy5hbmltYXRpbmcpIHtcbiAgICAgIGlmIChhbmltYXRpbmcpIHtcbiAgICAgICAgdGhpcy5fc3RhcnRSb3RhdGlvbigpO1xuICAgICAgfSBlbHNlIGlmIChoaWRlc1doZW5TdG9wcGVkKSB7XG4gICAgICAgIC8vIEhpZGUgaW5kaWNhdG9yIGZpcnN0IGFuZCB0aGVuIHN0b3Agcm90YXRpb25cbiAgICAgICAgQW5pbWF0ZWQudGltaW5nKGZhZGUsIHtcbiAgICAgICAgICBkdXJhdGlvbjogMjAwLFxuICAgICAgICAgIHRvVmFsdWU6IDAsXG4gICAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxuICAgICAgICAgIGlzSW50ZXJhY3Rpb246IGZhbHNlLFxuICAgICAgICB9KS5zdGFydCh0aGlzLl9zdG9wUm90YXRpb24uYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdG9wUm90YXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfc3RhcnRSb3RhdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCB7IGZhZGUsIHRpbWVyIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gU2hvdyBpbmRpY2F0b3JcbiAgICBBbmltYXRlZC50aW1pbmcoZmFkZSwge1xuICAgICAgZHVyYXRpb246IDIwMCxcbiAgICAgIHRvVmFsdWU6IDEsXG4gICAgICBpc0ludGVyYWN0aW9uOiBmYWxzZSxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICB9KS5zdGFydCgpO1xuXG4gICAgLy8gQ2lyY3VsYXIgYW5pbWF0aW9uIGluIGxvb3BcbiAgICBpZiAodGhpcy5yb3RhdGlvbikge1xuICAgICAgdGltZXIuc2V0VmFsdWUoMCk7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBBbmltYXRlZC5sb29wKHRoaXMucm90YXRpb24pLnN0YXJ0KCk7XG4gICAgfVxuICB9O1xuXG4gIF9zdG9wUm90YXRpb24gPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucm90YXRpb24pIHtcbiAgICAgIHRoaXMucm90YXRpb24uc3RvcCgpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmYWRlLCB0aW1lciB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7XG4gICAgICBhbmltYXRpbmcsXG4gICAgICBjb2xvcjogaW5kaWNhdG9yQ29sb3IsXG4gICAgICBoaWRlc1doZW5TdG9wcGVkLFxuICAgICAgc2l6ZTogaW5kaWNhdG9yU2l6ZSxcbiAgICAgIHN0eWxlLFxuICAgICAgdGhlbWUsXG4gICAgICAuLi5yZXN0XG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY29sb3IgPSBpbmRpY2F0b3JDb2xvciB8fCB0aGVtZS5jb2xvcnMucHJpbWFyeTtcbiAgICBjb25zdCBzaXplID1cbiAgICAgIHR5cGVvZiBpbmRpY2F0b3JTaXplID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGluZGljYXRvclNpemUgPT09ICdzbWFsbCdcbiAgICAgICAgICA/IDI0XG4gICAgICAgICAgOiA0OFxuICAgICAgICA6IGluZGljYXRvclNpemU7XG5cbiAgICBjb25zdCBmcmFtZXMgPSAoNjAgKiBEVVJBVElPTikgLyAxMDAwO1xuICAgIGNvbnN0IGVhc2luZyA9IEVhc2luZy5iZXppZXIoMC40LCAwLjAsIDAuNywgMS4wKTtcbiAgICBjb25zdCBjb250YWluZXJTdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplIC8gMixcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNvbnRhaW5lciwgc3R5bGVdfSB7Li4ucmVzdH0+XG4gICAgICAgIDxBbmltYXRlZC5WaWV3IHN0eWxlPXtbeyB3aWR0aDogc2l6ZSwgaGVpZ2h0OiBzaXplLCBvcGFjaXR5OiBmYWRlIH1dfT5cbiAgICAgICAgICB7WzAsIDFdLm1hcChpbmRleCA9PiB7XG4gICAgICAgICAgICAvLyBUaGFua3MgdG8gaHR0cHM6Ly9naXRodWIuY29tL240a3ovcmVhY3QtbmF0aXZlLWluZGljYXRvcnMgZm9yIHRoZSBncmVhdCB3b3JrXG4gICAgICAgICAgICBjb25zdCBpbnB1dFJhbmdlID0gQXJyYXkuZnJvbShcbiAgICAgICAgICAgICAgbmV3IEFycmF5KGZyYW1lcyksXG4gICAgICAgICAgICAgIChmcmFtZSwgZnJhbWVJbmRleCkgPT4gZnJhbWVJbmRleCAvIChmcmFtZXMgLSAxKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dFJhbmdlID0gQXJyYXkuZnJvbShcbiAgICAgICAgICAgICAgbmV3IEFycmF5KGZyYW1lcyksXG4gICAgICAgICAgICAgIChmcmFtZSwgZnJhbWVJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwcm9ncmVzcyA9ICgyICogZnJhbWVJbmRleCkgLyAoZnJhbWVzIC0gMSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBpbmRleCA/ICsoMzYwIC0gMTUpIDogLSgxODAgLSAxNSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPiAxLjApIHtcbiAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gMi4wIC0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gaW5kZXggPyAtMSA6ICsxO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2RpcmVjdGlvbiAqICgxODAgLSAzMCkgKiBlYXNpbmcocHJvZ3Jlc3MpICtcbiAgICAgICAgICAgICAgICAgIHJvdGF0aW9ufWRlZ2A7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxheWVyU3R5bGUgPSB7XG4gICAgICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHJvdGF0ZTogdGltZXIuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbXG4gICAgICAgICAgICAgICAgICAgICAgYCR7MCArIDMwICsgMTV9ZGVnYCxcbiAgICAgICAgICAgICAgICAgICAgICBgJHsyICogMzYwICsgMzAgKyAxNX1kZWdgLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHZpZXdwb3J0U3R5bGUgPSB7XG4gICAgICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVk6IGluZGV4ID8gLXNpemUgLyAyIDogMCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHJvdGF0ZTogdGltZXIuaW50ZXJwb2xhdGUoeyBpbnB1dFJhbmdlLCBvdXRwdXRSYW5nZSB9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0U3R5bGUgPSBpbmRleCA/IHsgdG9wOiBzaXplIC8gMiB9IDogbnVsbDtcblxuICAgICAgICAgICAgY29uc3QgbGluZVN0eWxlID0ge1xuICAgICAgICAgICAgICB3aWR0aDogc2l6ZSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICAgICAgICBib3JkZXJDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBzaXplIC8gMTAsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogc2l6ZSAvIDIsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8QW5pbWF0ZWQuVmlldyBrZXk9e2luZGV4fSBzdHlsZT17W3N0eWxlcy5sYXllcl19PlxuICAgICAgICAgICAgICAgIDxBbmltYXRlZC5WaWV3IHN0eWxlPXtsYXllclN0eWxlfT5cbiAgICAgICAgICAgICAgICAgIDxBbmltYXRlZC5WaWV3XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtbY29udGFpbmVyU3R5bGUsIG9mZnNldFN0eWxlXX1cbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2FibGU9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8QW5pbWF0ZWQuVmlldyBzdHlsZT17dmlld3BvcnRTdHlsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgPEFuaW1hdGVkLlZpZXcgc3R5bGU9e2NvbnRhaW5lclN0eWxlfSBjb2xsYXBzYWJsZT17ZmFsc2V9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEFuaW1hdGVkLlZpZXcgc3R5bGU9e2xpbmVTdHlsZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L0FuaW1hdGVkLlZpZXc+XG4gICAgICAgICAgICAgICAgICAgIDwvQW5pbWF0ZWQuVmlldz5cbiAgICAgICAgICAgICAgICAgIDwvQW5pbWF0ZWQuVmlldz5cbiAgICAgICAgICAgICAgICA8L0FuaW1hdGVkLlZpZXc+XG4gICAgICAgICAgICAgIDwvQW5pbWF0ZWQuVmlldz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvQW5pbWF0ZWQuVmlldz5cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxuXG4gIGxheWVyOiB7XG4gICAgLi4uU3R5bGVTaGVldC5hYnNvbHV0ZUZpbGxPYmplY3QsXG5cbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEFjdGl2aXR5SW5kaWNhdG9yKTtcbiJdfQ==