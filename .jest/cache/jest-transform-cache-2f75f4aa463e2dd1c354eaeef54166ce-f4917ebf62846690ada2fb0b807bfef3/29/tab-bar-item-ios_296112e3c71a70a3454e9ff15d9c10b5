a707033613e8675e999cb6aaf9706fad
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTabBarItemIOSComponent;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("./react-native");

var ICON_PROP_NAMES = ['iconName', 'iconSize', 'iconColor'];
var SELECTED_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['selectedIconName', 'selectedIconColor']);

var arePropsEqual = function arePropsEqual(keys) {
  return function (prevProps, nextProps) {
    return (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys));
  };
};

var areIconPropsEqual = arePropsEqual(ICON_PROP_NAMES);
var areSelectedIconPropsEqual = arePropsEqual(SELECTED_ICON_PROP_NAMES);

function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
  var _class, _temp;

  return _temp = _class = function (_PureComponent) {
    (0, _inherits2.default)(TabBarItemIOS, _PureComponent);

    function TabBarItemIOS() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, TabBarItemIOS);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(TabBarItemIOS)).call.apply(_getPrototypeOf2, [this].concat(args)));
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
        icon: undefined,
        selectedIcon: undefined
      });
      return _this;
    }

    (0, _createClass2.default)(TabBarItemIOS, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.updateIconSource();
        this.updateSelectedIconSource();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (!areIconPropsEqual(prevProps, this.props)) {
          this.updateIconSource();
        }

        if (!areSelectedIconPropsEqual(prevProps, this.props)) {
          this.updateSelectedIconSource();
        }
      }
    }, {
      key: "updateIconSource",
      value: function updateIconSource() {
        var _this$props, iconName, iconSize, iconColor, icon;

        return _regenerator.default.async(function updateIconSource$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = this.props, iconName = _this$props.iconName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor;

                if (!iconName) {
                  _context.next = 8;
                  break;
                }

                _context.next = 4;
                return _regenerator.default.awrap(getImageSource(iconName, iconSize, iconColor));

              case 4:
                icon = _context.sent;
                this.setState({
                  icon: icon
                });
                _context.next = 9;
                break;

              case 8:
                if (this.state.icon) {
                  this.setState({
                    icon: undefined
                  });
                }

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "updateSelectedIconSource",
      value: function updateSelectedIconSource() {
        var _this$props2, iconName, iconColor, iconSize, selectedIconName, selectedIconColor, selectedIcon;

        return _regenerator.default.async(function updateSelectedIconSource$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$props2 = this.props, iconName = _this$props2.iconName, iconColor = _this$props2.iconColor, iconSize = _this$props2.iconSize, selectedIconName = _this$props2.selectedIconName, selectedIconColor = _this$props2.selectedIconColor;

                if (!(selectedIconName || selectedIconColor)) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 4;
                return _regenerator.default.awrap(getImageSource(selectedIconName || iconName, iconSize, selectedIconColor || iconColor));

              case 4:
                selectedIcon = _context2.sent;
                this.setState({
                  selectedIcon: selectedIcon
                });
                _context2.next = 9;
                break;

              case 8:
                if (this.state.selectedIcon) {
                  this.setState({
                    selectedIcon: undefined
                  });
                }

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement(_reactNative.TabBarIOS.Item, (0, _extends2.default)({}, this.state, this.props));
      }
    }]);
    return TabBarItemIOS;
  }(_react.PureComponent), (0, _defineProperty2.default)(_class, "propTypes", {
    iconName: IconNamePropType.isRequired,
    selectedIconName: IconNamePropType,
    iconSize: _propTypes.default.number,
    iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    selectedIconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  }), (0, _defineProperty2.default)(_class, "defaultProps", {
    iconSize: 30
  }), _temp;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhYi1iYXItaXRlbS1pb3MuanMiXSwibmFtZXMiOlsiSUNPTl9QUk9QX05BTUVTIiwiU0VMRUNURURfSUNPTl9QUk9QX05BTUVTIiwiYXJlUHJvcHNFcXVhbCIsImtleXMiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJhcmVJY29uUHJvcHNFcXVhbCIsImFyZVNlbGVjdGVkSWNvblByb3BzRXF1YWwiLCJjcmVhdGVUYWJCYXJJdGVtSU9TQ29tcG9uZW50IiwiSWNvbk5hbWVQcm9wVHlwZSIsImdldEltYWdlU291cmNlIiwiaWNvbiIsInVuZGVmaW5lZCIsInNlbGVjdGVkSWNvbiIsInVwZGF0ZUljb25Tb3VyY2UiLCJ1cGRhdGVTZWxlY3RlZEljb25Tb3VyY2UiLCJwcm9wcyIsImljb25OYW1lIiwiaWNvblNpemUiLCJpY29uQ29sb3IiLCJzZXRTdGF0ZSIsInN0YXRlIiwic2VsZWN0ZWRJY29uTmFtZSIsInNlbGVjdGVkSWNvbkNvbG9yIiwiUHVyZUNvbXBvbmVudCIsImlzUmVxdWlyZWQiLCJQcm9wVHlwZXMiLCJudW1iZXIiLCJvbmVPZlR5cGUiLCJzdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLGVBQWUsR0FBRyxDQUFDLFVBQUQsRUFBYSxVQUFiLEVBQXlCLFdBQXpCLENBQXhCO0FBQ0EsSUFBTUMsd0JBQXdCLGFBQ3pCRCxlQUR5QixHQUU1QixrQkFGNEIsRUFHNUIsbUJBSDRCLEVBQTlCOztBQU1BLElBQU1FLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQUMsSUFBSTtBQUFBLFNBQUksVUFBQ0MsU0FBRCxFQUFZQyxTQUFaO0FBQUEsV0FDNUIsc0JBQVEsbUJBQUtELFNBQUwsRUFBZ0JELElBQWhCLENBQVIsRUFBK0IsbUJBQUtFLFNBQUwsRUFBZ0JGLElBQWhCLENBQS9CLENBRDRCO0FBQUEsR0FBSjtBQUFBLENBQTFCOztBQUdB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QUEsUUFBUSxFQUFFUixnQkFBZ0IsQ0FBQ2dCLFVBRFY7QUFFakJILElBQUFBLGdCQUFnQixFQUFFYixnQkFGRDtBQUdqQlMsSUFBQUEsUUFBUSxFQUFFUSxtQkFBVUMsTUFISDtBQUlqQlIsSUFBQUEsU0FBUyxFQUFFTyxtQkFBVUUsU0FBVixDQUFvQixDQUFDRixtQkFBVUcsTUFBWCxFQUFtQkgsbUJBQVVDLE1BQTdCLENBQXBCLENBSk07QUFLakJKLElBQUFBLGlCQUFpQixFQUFFRyxtQkFBVUUsU0FBVixDQUFvQixDQUNyQ0YsbUJBQVVHLE1BRDJCLEVBRXJDSCxtQkFBVUMsTUFGMkIsQ0FBcEI7QUFMRixHQURyQix5REFZd0I7QUFDcEJULElBQUFBLFFBQVEsRUFBRTtBQURVLEdBWnhCO0FBdUVEIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXMgKi9cbmltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC9pc0VxdWFsJztcbmltcG9ydCBwaWNrIGZyb20gJ2xvZGFzaC9waWNrJztcbmltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRhYkJhcklPUyB9IGZyb20gJy4vcmVhY3QtbmF0aXZlJztcblxuY29uc3QgSUNPTl9QUk9QX05BTUVTID0gWydpY29uTmFtZScsICdpY29uU2l6ZScsICdpY29uQ29sb3InXTtcbmNvbnN0IFNFTEVDVEVEX0lDT05fUFJPUF9OQU1FUyA9IFtcbiAgLi4uSUNPTl9QUk9QX05BTUVTLFxuICAnc2VsZWN0ZWRJY29uTmFtZScsXG4gICdzZWxlY3RlZEljb25Db2xvcicsXG5dO1xuXG5jb25zdCBhcmVQcm9wc0VxdWFsID0ga2V5cyA9PiAocHJldlByb3BzLCBuZXh0UHJvcHMpID0+XG4gIGlzRXF1YWwocGljayhwcmV2UHJvcHMsIGtleXMpLCBwaWNrKG5leHRQcm9wcywga2V5cykpO1xuXG5jb25zdCBhcmVJY29uUHJvcHNFcXVhbCA9IGFyZVByb3BzRXF1YWwoSUNPTl9QUk9QX05BTUVTKTtcbmNvbnN0IGFyZVNlbGVjdGVkSWNvblByb3BzRXF1YWwgPSBhcmVQcm9wc0VxdWFsKFNFTEVDVEVEX0lDT05fUFJPUF9OQU1FUyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRhYkJhckl0ZW1JT1NDb21wb25lbnQoXG4gIEljb25OYW1lUHJvcFR5cGUsXG4gIGdldEltYWdlU291cmNlXG4pIHtcbiAgcmV0dXJuIGNsYXNzIFRhYkJhckl0ZW1JT1MgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgICAgaWNvbk5hbWU6IEljb25OYW1lUHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgICAgIHNlbGVjdGVkSWNvbk5hbWU6IEljb25OYW1lUHJvcFR5cGUsXG4gICAgICBpY29uU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICAgIGljb25Db2xvcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgICAgc2VsZWN0ZWRJY29uQ29sb3I6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgXSksXG4gICAgfTtcblxuICAgIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICBpY29uU2l6ZTogMzAsXG4gICAgfTtcblxuICAgIHN0YXRlID0ge1xuICAgICAgaWNvbjogdW5kZWZpbmVkLFxuICAgICAgc2VsZWN0ZWRJY29uOiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy51cGRhdGVJY29uU291cmNlKCk7XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkSWNvblNvdXJjZSgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmICghYXJlSWNvblByb3BzRXF1YWwocHJldlByb3BzLCB0aGlzLnByb3BzKSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUljb25Tb3VyY2UoKTtcbiAgICAgIH1cbiAgICAgIGlmICghYXJlU2VsZWN0ZWRJY29uUHJvcHNFcXVhbChwcmV2UHJvcHMsIHRoaXMucHJvcHMpKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRJY29uU291cmNlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlSWNvblNvdXJjZSgpIHtcbiAgICAgIGNvbnN0IHsgaWNvbk5hbWUsIGljb25TaXplLCBpY29uQ29sb3IgfSA9IHRoaXMucHJvcHM7XG4gICAgICBpZiAoaWNvbk5hbWUpIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IGF3YWl0IGdldEltYWdlU291cmNlKGljb25OYW1lLCBpY29uU2l6ZSwgaWNvbkNvbG9yKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGljb24gfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9kZXN0cnVjdHVyaW5nLWFzc2lnbm1lbnRcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5pY29uKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpY29uOiB1bmRlZmluZWQgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlU2VsZWN0ZWRJY29uU291cmNlKCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpY29uTmFtZSxcbiAgICAgICAgaWNvbkNvbG9yLFxuICAgICAgICBpY29uU2l6ZSxcbiAgICAgICAgc2VsZWN0ZWRJY29uTmFtZSxcbiAgICAgICAgc2VsZWN0ZWRJY29uQ29sb3IsXG4gICAgICB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmIChzZWxlY3RlZEljb25OYW1lIHx8IHNlbGVjdGVkSWNvbkNvbG9yKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSWNvbiA9IGF3YWl0IGdldEltYWdlU291cmNlKFxuICAgICAgICAgIHNlbGVjdGVkSWNvbk5hbWUgfHwgaWNvbk5hbWUsXG4gICAgICAgICAgaWNvblNpemUsXG4gICAgICAgICAgc2VsZWN0ZWRJY29uQ29sb3IgfHwgaWNvbkNvbG9yXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZEljb24gfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9kZXN0cnVjdHVyaW5nLWFzc2lnbm1lbnRcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZEljb24pIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSWNvbjogdW5kZWZpbmVkIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiA8VGFiQmFySU9TLkl0ZW0gey4uLnRoaXMuc3RhdGV9IHsuLi50aGlzLnByb3BzfSAvPjtcbiAgICB9XG4gIH07XG59XG4iXX0=