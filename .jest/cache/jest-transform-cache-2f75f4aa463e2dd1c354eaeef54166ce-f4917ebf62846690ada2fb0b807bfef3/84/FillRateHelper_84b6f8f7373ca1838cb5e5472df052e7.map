{"version":3,"sources":["FillRateHelper.js"],"names":["performanceNow","require","warning","Info","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","callback","push","remove","filter","listener","sampleRate","minSampleCount","getFrameMetrics","_getFrameMetrics","_enabled","Math","random","_resetData","_samplesStartTime","console","debug","start","_info","sample_count","total_time_spent","info","derived","avg_blankness","pixels_blank","pixels_sampled","avg_speed","pixels_scrolled","avg_speed_when_any_blank","any_blank_speed_sum","any_blank_count","any_blank_per_min","any_blank_time_frac","any_blank_ms","mostly_blank_per_min","mostly_blank_count","mostly_blank_time_frac","mostly_blank_ms","key","round","forEach","props","state","scrollMetrics","getItemCount","data","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","now","_anyBlankStartTime","_mostlyBlankStartTime","blankTop","first","firstFrame","last","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","deactivateAndFlush","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst performanceNow = require('fbjs/lib/performanceNow');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count = 0;\n  any_blank_ms = 0;\n  any_blank_speed_sum = 0;\n  mostly_blank_count = 0;\n  mostly_blank_ms = 0;\n  pixels_blank = 0;\n  pixels_sampled = 0;\n  pixels_scrolled = 0;\n  total_time_spent = 0;\n  sample_count = 0;\n}\n\ntype FrameMetrics = {inLayout?: boolean, length: number, offset: number};\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime = (null: ?number);\n  _enabled = false;\n  _getFrameMetrics: (index: number) => ?FrameMetrics;\n  _info = new Info();\n  _mostlyBlankStartTime = (null: ?number);\n  _samplesStartTime = (null: ?number);\n\n  static addListener(callback: FillRateInfo => void): {remove: () => void} {\n    warning(\n      _sampleRate !== null,\n      'Call `FillRateHelper.setSampleRate` before `addListener`.',\n    );\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(getFrameMetrics: (index: number) => ?FrameMetrics) {\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = performanceNow();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = performanceNow() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      data: Array<any>,\n      getItemCount: (data: Array<any>) => number,\n      initialNumToRender: number,\n    },\n    state: {\n      first: number,\n      last: number,\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = performanceNow();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = state.first;\n    let firstFrame = this._getFrameMetrics(first);\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = state.last;\n    let lastFrame = this._getFrameMetrics(last);\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"]}