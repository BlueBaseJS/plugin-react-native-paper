f4bc34c172b7af13d71c5124871a084b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var AnimatedNode = require('./AnimatedNode');

var AnimatedWithChildren = require('./AnimatedWithChildren');

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var AnimatedTransform = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedTransform, _AnimatedWithChildren);

  function AnimatedTransform(transforms) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedTransform);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AnimatedTransform).call(this));
    _this._transforms = transforms;
    return _this;
  }

  (0, _createClass2.default)(AnimatedTransform, [{
    key: "__makeNative",
    value: function __makeNative() {
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }
      });

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTransform.prototype), "__makeNative", this).call(this);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return this._transforms.map(function (transform) {
        var result = {};

        for (var key in transform) {
          var value = transform[key];

          if (value instanceof AnimatedNode) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }

        return result;
      });
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return this._transforms.map(function (transform) {
        var result = {};

        for (var key in transform) {
          var value = transform[key];

          if (value instanceof AnimatedNode) {
            result[key] = value.__getAnimatedValue();
          } else {
            result[key] = value;
          }
        }

        return result;
      });
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var _this2 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];

          if (value instanceof AnimatedNode) {
            value.__addChild(_this2);
          }
        }
      });
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var _this3 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];

          if (value instanceof AnimatedNode) {
            value.__removeChild(_this3);
          }
        }
      });

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedTransform.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var transConfigs = [];

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];

          if (value instanceof AnimatedNode) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: value
            });
          }
        }
      });

      NativeAnimatedHelper.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs
      };
    }
  }]);
  return AnimatedTransform;
}(AnimatedWithChildren);

module.exports = AnimatedTransform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkVHJhbnNmb3JtLmpzIl0sIm5hbWVzIjpbIkFuaW1hdGVkTm9kZSIsInJlcXVpcmUiLCJBbmltYXRlZFdpdGhDaGlsZHJlbiIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwiQW5pbWF0ZWRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1zIiwiX3RyYW5zZm9ybXMiLCJmb3JFYWNoIiwidHJhbnNmb3JtIiwia2V5IiwidmFsdWUiLCJfX21ha2VOYXRpdmUiLCJtYXAiLCJyZXN1bHQiLCJfX2dldFZhbHVlIiwiX19nZXRBbmltYXRlZFZhbHVlIiwiX19hZGRDaGlsZCIsIl9fcmVtb3ZlQ2hpbGQiLCJ0cmFuc0NvbmZpZ3MiLCJwdXNoIiwidHlwZSIsInByb3BlcnR5Iiwibm9kZVRhZyIsIl9fZ2V0TmF0aXZlVGFnIiwidmFsaWRhdGVUcmFuc2Zvcm0iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFTQTs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQTVCOztBQUNBLElBQU1DLG9CQUFvQixHQUFHRCxPQUFPLENBQUMsd0JBQUQsQ0FBcEM7O0FBQ0EsSUFBTUUsb0JBQW9CLEdBQUdGLE9BQU8sQ0FBQyx5QkFBRCxDQUFwQzs7SUFFTUcsaUI7OztBQUdKLDZCQUFZQyxVQUFaLEVBQWdEO0FBQUE7O0FBQUE7QUFDOUM7QUFDQSxVQUFLQyxXQUFMLEdBQW1CRCxVQUFuQjtBQUY4QztBQUcvQzs7OzttQ0FFYztBQUNiLFdBQUtDLFdBQUwsQ0FBaUJDLE9BQWpCLENBQXlCLFVBQUFDLFNBQVMsRUFBSTtBQUNwQyxhQUFLLElBQU1DLEdBQVgsSUFBa0JELFNBQWxCLEVBQTZCO0FBQzNCLGNBQU1FLEtBQUssR0FBR0YsU0FBUyxDQUFDQyxHQUFELENBQXZCOztBQUNBLGNBQUlDLEtBQUssWUFBWVYsWUFBckIsRUFBbUM7QUFDakNVLFlBQUFBLEtBQUssQ0FBQ0MsWUFBTjtBQUNEO0FBQ0Y7QUFDRixP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LE9BakJEOztBQW1CQVAsTUFBQUEsb0JBQW9CLENBQUNxQixpQkFBckIsQ0FBdUNOLFlBQXZDO0FBQ0EsYUFBTztBQUNMRSxRQUFBQSxJQUFJLEVBQUUsV0FERDtBQUVMZixRQUFBQSxVQUFVLEVBQUVhO0FBRlAsT0FBUDtBQUlEOzs7RUFyRzZCaEIsb0I7O0FBd0doQ3VCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnRCLGlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkTm9kZScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5jb25zdCBOYXRpdmVBbmltYXRlZEhlbHBlciA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmNsYXNzIEFuaW1hdGVkVHJhbnNmb3JtIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICBfdHJhbnNmb3JtczogJFJlYWRPbmx5QXJyYXk8T2JqZWN0PjtcblxuICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm1zOiAkUmVhZE9ubHlBcnJheTxPYmplY3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl90cmFuc2Zvcm1zID0gdHJhbnNmb3JtcztcbiAgfVxuXG4gIF9fbWFrZU5hdGl2ZSgpIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB2YWx1ZS5fX21ha2VOYXRpdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHN1cGVyLl9fbWFrZU5hdGl2ZSgpO1xuICB9XG5cbiAgX19nZXRWYWx1ZSgpOiAkUmVhZE9ubHlBcnJheTxPYmplY3Q+IHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNmb3Jtcy5tYXAodHJhbnNmb3JtID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWUuX19nZXRWYWx1ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cblxuICBfX2dldEFuaW1hdGVkVmFsdWUoKTogJFJlYWRPbmx5QXJyYXk8T2JqZWN0PiB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybXMubWFwKHRyYW5zZm9ybSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlLl9fZ2V0QW5pbWF0ZWRWYWx1ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEFsbCB0cmFuc2Zvcm0gY29tcG9uZW50cyBuZWVkZWQgdG8gcmVjb21wb3NlIG1hdHJpeFxuICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB2YWx1ZS5fX2FkZENoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfX2RldGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB2YWx1ZS5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQ29uZmlnKCk6IGFueSB7XG4gICAgY29uc3QgdHJhbnNDb25maWdzID0gW107XG5cbiAgICB0aGlzLl90cmFuc2Zvcm1zLmZvckVhY2godHJhbnNmb3JtID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybVtrZXldO1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgICB0cmFuc0NvbmZpZ3MucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAnYW5pbWF0ZWQnLFxuICAgICAgICAgICAgcHJvcGVydHk6IGtleSxcbiAgICAgICAgICAgIG5vZGVUYWc6IHZhbHVlLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNDb25maWdzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3N0YXRpYycsXG4gICAgICAgICAgICBwcm9wZXJ0eToga2V5LFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLnZhbGlkYXRlVHJhbnNmb3JtKHRyYW5zQ29uZmlncyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICd0cmFuc2Zvcm0nLFxuICAgICAgdHJhbnNmb3JtczogdHJhbnNDb25maWdzLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRlZFRyYW5zZm9ybTtcbiJdfQ==