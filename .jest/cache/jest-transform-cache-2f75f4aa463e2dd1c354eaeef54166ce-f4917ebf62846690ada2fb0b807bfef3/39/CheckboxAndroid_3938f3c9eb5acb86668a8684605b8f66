7052e22f0e5753430b39d2d264895923
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _theming = require("../core/theming");

var CheckboxAndroid = function (_React$Component) {
  (0, _inherits2.default)(CheckboxAndroid, _React$Component);

  function CheckboxAndroid() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, CheckboxAndroid);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(CheckboxAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      scaleAnim: new _reactNative.Animated.Value(1)
    });
    return _this;
  }

  (0, _createClass2.default)(CheckboxAndroid, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.status === this.props.status) {
        return;
      }

      var checked = this.props.status === 'checked';

      _reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.scaleAnim, {
        toValue: 0.85,
        duration: checked ? 200 : 0
      }), _reactNative.Animated.timing(this.state.scaleAnim, {
        toValue: 1,
        duration: checked ? 200 : 350
      })]).start();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          status = _this$props.status,
          disabled = _this$props.disabled,
          onPress = _this$props.onPress,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["status", "disabled", "onPress", "theme"]);
      var checked = status === 'checked';
      var indeterminate = status === 'indeterminate';
      var checkedColor = this.props.color || theme.colors.accent;
      var uncheckedColor = this.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
      var rippleColor, checkboxColor;

      if (disabled) {
        rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
        checkboxColor = theme.colors.disabled;
      } else {
        rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
        checkboxColor = checked ? checkedColor : uncheckedColor;
      }

      var borderWidth = this.state.scaleAnim.interpolate({
        inputRange: [0.8, 1],
        outputRange: [7, 0]
      });
      var icon = indeterminate ? 'indeterminate-check-box' : checked ? 'check-box' : 'check-box-outline-blank';
      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: onPress,
        disabled: disabled,
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityStates: disabled ? ['disabled'] : undefined,
        accessibilityLiveRegion: "polite",
        style: styles.container
      }), React.createElement(_reactNative.Animated.View, {
        style: {
          transform: [{
            scale: this.state.scaleAnim
          }]
        }
      }, React.createElement(_Icon.default, {
        allowFontScaling: false,
        source: icon,
        size: 24,
        color: checkboxColor
      }), React.createElement(_reactNative.View, {
        style: [_reactNative.StyleSheet.absoluteFill, styles.fillContainer]
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.fill, {
          borderColor: checkboxColor
        }, {
          borderWidth: borderWidth
        }]
      }))));
    }
  }]);
  return CheckboxAndroid;
}(React.Component);

(0, _defineProperty2.default)(CheckboxAndroid, "displayName", 'Checkbox.Android');

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18,
    width: 36,
    height: 36,
    padding: 6
  },
  fillContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  fill: {
    height: 14,
    width: 14
  }
});

var _default = (0, _theming.withTheme)(CheckboxAndroid);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,