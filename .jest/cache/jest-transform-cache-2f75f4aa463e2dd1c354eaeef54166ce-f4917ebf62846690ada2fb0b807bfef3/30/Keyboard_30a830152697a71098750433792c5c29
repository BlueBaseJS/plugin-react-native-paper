6af7cb79db18e6a887656634d3338eaf
'use strict';

var LayoutAnimation = require('LayoutAnimation');

var invariant = require('fbjs/lib/invariant');

var NativeEventEmitter = require('NativeEventEmitter');

var KeyboardObserver = require('NativeModules').KeyboardObserver;

var dismissKeyboard = require('dismissKeyboard');

var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);
var Keyboard = {
  addListener: function addListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeListener: function removeListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeAllListeners: function removeAllListeners(eventName) {
    invariant(false, 'Dummy method used for documentation');
  },
  dismiss: function dismiss() {
    invariant(false, 'Dummy method used for documentation');
  },
  scheduleLayoutAnimation: function scheduleLayoutAnimation(event) {
    invariant(false, 'Dummy method used for documentation');
  }
};
Keyboard = KeyboardEventEmitter;
Keyboard.dismiss = dismissKeyboard;

Keyboard.scheduleLayoutAnimation = function (event) {
  var duration = event.duration,
      easing = event.easing;

  if (duration) {
    LayoutAnimation.configureNext({
      duration: duration,
      update: {
        duration: duration,
        type: easing && LayoutAnimation.Types[easing] || 'keyboard'
      }
    });
  }
};

module.exports = Keyboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,