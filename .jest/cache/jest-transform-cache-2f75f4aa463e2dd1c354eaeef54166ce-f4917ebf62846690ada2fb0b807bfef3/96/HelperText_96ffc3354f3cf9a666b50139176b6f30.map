{"version":3,"sources":["HelperText.js"],"names":["AnimatedText","Animated","createAnimatedComponent","Text","HelperText","shown","Value","props","visible","textHeight","timing","state","toValue","duration","useNativeDriver","start","e","onLayout","setState","nativeEvent","layout","height","prevProps","prevState","_showText","_hideText","style","type","theme","rest","colors","dark","textColor","error","text","alpha","rgb","string","_handleTextLayout","styles","color","opacity","transform","translateY","interpolate","inputRange","outputRange","children","React","PureComponent","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport color from 'color';\nimport { Animated, StyleSheet } from 'react-native';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\nconst AnimatedText = Animated.createAnimatedComponent(Text);\n\ntype Props = React.ElementConfig<typeof Text> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info',\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean,\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.Node,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\ntype State = {\n  shown: Animated.Value,\n  textHeight: number,\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <View>\n *         <TextInput\n *           label=\"Email\"\n *           value={this.state.text}\n *           onChangeText={text => this.setState({ text })}\n *         />\n *         <HelperText\n *           type=\"error\"\n *           visible={!this.state.text.includes('@')}\n *         >\n *           Email address is invalid!\n *         </HelperText>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass HelperText extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    type: 'info',\n    visible: true,\n  };\n\n  state = {\n    shown: new Animated.Value(this.props.visible ? 1 : 0),\n    textHeight: 0,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.visible !== this.props.visible ||\n      prevState.textHeight !== this.state.textHeight\n    ) {\n      if (this.props.visible) {\n        this._showText();\n      } else {\n        this._hideText();\n      }\n    }\n  }\n\n  _showText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  _hideText = () => {\n    Animated.timing(this.state.shown, {\n      toValue: 0,\n      duration: 180,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  _handleTextLayout = e => {\n    this.props.onLayout && this.props.onLayout(e);\n    this.setState({\n      textHeight: e.nativeEvent.layout.height,\n    });\n  };\n\n  render() {\n    const { style, type, visible, theme, onLayout, ...rest } = this.props;\n    const { colors, dark } = theme;\n\n    const textColor =\n      this.props.type === 'error'\n        ? colors.error\n        : color(colors.text)\n            .alpha(dark ? 0.7 : 0.54)\n            .rgb()\n            .string();\n\n    return (\n      <AnimatedText\n        onLayout={this._handleTextLayout}\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            opacity: this.state.shown,\n            transform:\n              visible && type === 'error'\n                ? [\n                    {\n                      translateY: this.state.shown.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [-this.state.textHeight / 2, 0],\n                      }),\n                    },\n                  ]\n                : [],\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        {this.props.children}\n      </AnimatedText>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]}