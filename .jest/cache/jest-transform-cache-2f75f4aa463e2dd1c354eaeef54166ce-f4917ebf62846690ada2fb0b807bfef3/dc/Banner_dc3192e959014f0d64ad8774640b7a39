64e03bd0c98b1cf00f1dafcf50280347
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _Button = _interopRequireDefault(require("./Button"));

var _theming = require("../core/theming");

var _shadow = _interopRequireDefault(require("../styles/shadow"));

var ELEVATION = 1;

var Banner = function (_React$Component) {
  (0, _inherits2.default)(Banner, _React$Component);

  function Banner() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Banner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Banner)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      position: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
      layout: {
        height: 0,
        measured: false
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleLayout", function (_ref) {
      var nativeEvent = _ref.nativeEvent;
      var height = nativeEvent.layout.height;

      _this.setState({
        layout: {
          height: height,
          measured: true
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_toggle", function () {
      if (_this.props.visible) {
        _this._show();
      } else {
        _this._hide();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_show", function () {
      _reactNative.Animated.timing(_this.state.position, {
        duration: 250,
        toValue: 1
      }).start();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_hide", function () {
      _reactNative.Animated.timing(_this.state.position, {
        duration: 200,
        toValue: 0
      }).start();
    });
    return _this;
  }

  (0, _createClass2.default)(Banner, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        this._toggle();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          visible = _this$props.visible,
          image = _this$props.image,
          children = _this$props.children,
          actions = _this$props.actions,
          style = _this$props.style,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["visible", "image", "children", "actions", "style", "theme"]);
      var _this$state = this.state,
          position = _this$state.position,
          layout = _this$state.layout;

      var height = _reactNative.Animated.multiply(position, layout.height);

      var translateY = _reactNative.Animated.multiply(_reactNative.Animated.add(position, -1), layout.height);

      return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {
        style: [styles.container, (0, _shadow.default)(ELEVATION), style]
      }), React.createElement(_reactNative.View, {
        style: styles.wrapper
      }, React.createElement(_reactNative.Animated.View, {
        style: {
          height: height
        }
      }), React.createElement(_reactNative.Animated.View, {
        onLayout: this._handleLayout,
        style: [layout.measured || !visible ? [styles.absolute, {
          transform: [{
            translateY: translateY
          }]
        }] : null, !layout.measured && !visible ? {
          opacity: 0
        } : null]
      }, React.createElement(_reactNative.View, {
        style: styles.content
      }, image ? React.createElement(_reactNative.View, {
        style: styles.image
      }, image({
        size: 40
      })) : null, React.createElement(_Text.default, {
        style: styles.message
      }, children)), React.createElement(_reactNative.View, {
        style: styles.actions
      }, actions.map(function (_ref2, i) {
        var label = _ref2.label,
            others = (0, _objectWithoutProperties2.default)(_ref2, ["label"]);
        return React.createElement(_Button.default, (0, _extends2.default)({
          key: i,
          compact: true,
          mode: "text",
          style: styles.button
        }, others), label);
      })))));
    }
  }]);
  return Banner;
}(React.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    elevation: ELEVATION
  },
  wrapper: {
    overflow: 'hidden'
  },
  absolute: {
    position: 'absolute',
    top: 0,
    width: '100%'
  },
  content: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    marginHorizontal: 8,
    marginTop: 16,
    marginBottom: 0
  },
  image: {
    margin: 8
  },
  message: {
    flex: 1,
    margin: 8
  },
  actions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    margin: 4
  },
  button: {
    margin: 4
  }
});

var _default = (0, _theming.withTheme)(Banner);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,