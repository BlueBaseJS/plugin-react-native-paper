7744aa5def544b0900af73dc09456987
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PortalContext = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _PortalManager = _interopRequireDefault(require("./PortalManager"));

var _createReactContext = _interopRequireDefault(require("create-react-context"));

var PortalContext = (0, _createReactContext.default)(null);
exports.PortalContext = PortalContext;

var PortalHost = function (_React$Component) {
  (0, _inherits2.default)(PortalHost, _React$Component);

  function PortalHost() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, PortalHost);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PortalHost)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_setManager", function (manager) {
      _this._manager = manager;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_mount", function (children) {
      var key = _this._nextKey++;

      if (_this._manager) {
        _this._manager.mount(key, children);
      } else {
        _this._queue.push({
          type: 'mount',
          key: key,
          children: children
        });
      }

      return key;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_update", function (key, children) {
      if (_this._manager) {
        _this._manager.update(key, children);
      } else {
        var op = {
          type: 'mount',
          key: key,
          children: children
        };

        var index = _this._queue.findIndex(function (o) {
          return o.type === 'mount' || o.type === 'update' && o.key === key;
        });

        if (index > -1) {
          _this._queue[index] = op;
        } else {
          _this._queue.push(op);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_unmount", function (key) {
      if (_this._manager) {
        _this._manager.unmount(key);
      } else {
        _this._queue.push({
          type: 'unmount',
          key: key
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_nextKey", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_queue", []);
    return _this;
  }

  (0, _createClass2.default)(PortalHost, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var manager = this._manager;
      var queue = this._queue;

      while (queue.length && manager) {
        var action = queue.pop();

        switch (action.type) {
          case 'mount':
            manager.mount(action.key, action.children);
            break;

          case 'update':
            manager.update(action.key, action.children);
            break;

          case 'unmount':
            manager.unmount(action.key);
            break;
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(PortalContext.Provider, {
        value: {
          mount: this._mount,
          update: this._update,
          unmount: this._unmount
        }
      }, React.createElement(_reactNative.View, {
        style: styles.container,
        collapsable: false
      }, this.props.children), React.createElement(_PortalManager.default, {
        ref: this._setManager
      }));
    }
  }]);
  return PortalHost;
}(React.Component);

exports.default = PortalHost;
(0, _defineProperty2.default)(PortalHost, "displayName", 'Portal.Host');

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,