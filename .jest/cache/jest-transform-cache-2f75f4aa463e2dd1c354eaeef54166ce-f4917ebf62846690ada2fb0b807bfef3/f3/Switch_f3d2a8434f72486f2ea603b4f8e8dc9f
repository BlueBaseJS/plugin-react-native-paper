8f049d3a4bc2cabfae30a8e35a421658
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var SwitchNativeComponent = require('SwitchNativeComponent');

var Platform = require('Platform');

var React = require('React');

var StyleSheet = require('StyleSheet');

var Switch = function (_React$Component) {
  (0, _inherits2.default)(Switch, _React$Component);

  function Switch() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Switch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Switch)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleChange", function (event) {
      if (_this._nativeSwitchRef == null) {
        return;
      }

      var value = _this.props.value === true;

      if (Platform.OS === 'android') {
        _this._nativeSwitchRef.setNativeProps({
          on: value
        });
      } else {
        _this._nativeSwitchRef.setNativeProps({
          value: value
        });
      }

      if (_this.props.onChange != null) {
        _this.props.onChange(event);
      }

      if (_this.props.onValueChange != null) {
        _this.props.onValueChange(event.nativeEvent.value);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleSwitchNativeComponentRef", function (ref) {
      _this._nativeSwitchRef = ref;
    });
    return _this;
  }

  (0, _createClass2.default)(Switch, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          ios_backgroundColor = _this$props.ios_backgroundColor,
          onChange = _this$props.onChange,
          onValueChange = _this$props.onValueChange,
          style = _this$props.style,
          thumbColor = _this$props.thumbColor,
          trackColor = _this$props.trackColor,
          value = _this$props.value,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "ios_backgroundColor", "onChange", "onValueChange", "style", "thumbColor", "trackColor", "value"]);
      var _thumbColor = thumbColor;

      var _trackColorForFalse = trackColor == null ? void 0 : trackColor.false;

      var _trackColorForTrue = trackColor == null ? void 0 : trackColor.true;

      var _ref = props,
          thumbTintColor = _ref.thumbTintColor,
          tintColor = _ref.tintColor,
          onTintColor = _ref.onTintColor;

      if (thumbTintColor != null) {
        _thumbColor = thumbTintColor;

        if (__DEV__) {
          console.warn('Switch: `thumbTintColor` is deprecated, use `thumbColor` instead.');
        }
      }

      if (tintColor != null) {
        _trackColorForFalse = tintColor;

        if (__DEV__) {
          console.warn('Switch: `tintColor` is deprecated, use `trackColor` instead.');
        }
      }

      if (onTintColor != null) {
        _trackColorForTrue = onTintColor;

        if (__DEV__) {
          console.warn('Switch: `onTintColor` is deprecated, use `trackColor` instead.');
        }
      }

      var platformProps = Platform.OS === 'android' ? {
        enabled: disabled !== true,
        on: value === true,
        style: style,
        thumbTintColor: _thumbColor,
        trackTintColor: value === true ? _trackColorForTrue : _trackColorForFalse
      } : {
        disabled: disabled,
        onTintColor: _trackColorForTrue,
        style: StyleSheet.compose({
          height: 31,
          width: 51
        }, StyleSheet.compose(style, ios_backgroundColor == null ? null : {
          backgroundColor: ios_backgroundColor,
          borderRadius: 16
        })),
        thumbTintColor: _thumbColor,
        tintColor: _trackColorForFalse,
        value: value === true
      };
      return React.createElement(SwitchNativeComponent, (0, _extends2.default)({}, props, platformProps, {
        onChange: this._handleChange,
        onResponderTerminationRequest: returnsFalse,
        onStartShouldSetResponder: returnsTrue,
        ref: this._handleSwitchNativeComponentRef
      }));
    }
  }]);
  return Switch;
}(React.Component);

var returnsFalse = function returnsFalse() {
  return false;
};

var returnsTrue = function returnsTrue() {
  return true;
};

module.exports = Switch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,