e9ce218fe19693ee24558b5cfa6a0c07
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _colors = require("../styles/colors");

var _theming = require("../core/theming");

var Button = function (_React$Component) {
  (0, _inherits2.default)(Button, _React$Component);

  function Button() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Button);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      elevation: new _reactNative.Animated.Value(_this.props.mode === 'contained' ? 2 : 0)
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handlePressIn", function () {
      if (_this.props.mode === 'contained') {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: 8,
          duration: 200
        }).start();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handlePressOut", function () {
      if (_this.props.mode === 'contained') {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: 2,
          duration: 150
        }).start();
      }
    });
    return _this;
  }

  (0, _createClass2.default)(Button, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          compact = _this$props.compact,
          mode = _this$props.mode,
          dark = _this$props.dark,
          loading = _this$props.loading,
          icon = _this$props.icon,
          buttonColor = _this$props.color,
          children = _this$props.children,
          uppercase = _this$props.uppercase,
          accessibilityLabel = _this$props.accessibilityLabel,
          onPress = _this$props.onPress,
          style = _this$props.style,
          theme = _this$props.theme,
          contentStyle = _this$props.contentStyle,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "compact", "mode", "dark", "loading", "icon", "color", "children", "uppercase", "accessibilityLabel", "onPress", "style", "theme", "contentStyle"]);
      var colors = theme.colors,
          roundness = theme.roundness;
      var fontFamily = theme.fonts.medium;
      var backgroundColor, borderColor, textColor, borderWidth;

      if (mode === 'contained') {
        if (disabled) {
          backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
        } else if (buttonColor) {
          backgroundColor = buttonColor;
        } else {
          backgroundColor = colors.primary;
        }
      } else {
        backgroundColor = 'transparent';
      }

      if (mode === 'outlined') {
        borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
        borderWidth = _reactNative.StyleSheet.hairlineWidth;
      } else {
        borderColor = 'transparent';
        borderWidth = 0;
      }

      if (disabled) {
        textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
      } else if (mode === 'contained') {
        var isDark;

        if (typeof dark === 'boolean') {
          isDark = dark;
        } else {
          isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).light();
        }

        textColor = isDark ? _colors.white : _colors.black;
      } else if (buttonColor) {
        textColor = buttonColor;
      } else {
        textColor = colors.primary;
      }

      var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
      var buttonStyle = {
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        borderWidth: borderWidth,
        borderRadius: roundness
      };
      var touchableStyle = {
        borderRadius: roundness
      };
      var textStyle = {
        color: textColor,
        fontFamily: fontFamily
      };
      var elevation = disabled ? 0 : this.state.elevation;
      return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {
        style: [styles.button, compact && styles.compact, {
          elevation: elevation
        }, buttonStyle, style]
      }), React.createElement(_TouchableRipple.default, {
        borderless: true,
        delayPressIn: 0,
        onPress: onPress,
        onPressIn: this._handlePressIn,
        onPressOut: this._handlePressOut,
        accessibilityLabel: accessibilityLabel,
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityStates: disabled ? ['disabled'] : undefined,
        disabled: disabled,
        rippleColor: rippleColor,
        style: touchableStyle
      }, React.createElement(_reactNative.View, {
        style: [styles.content, contentStyle]
      }, icon && loading !== true ? React.createElement(_reactNative.View, {
        style: styles.icon
      }, React.createElement(_Icon.default, {
        source: icon,
        size: 16,
        color: textColor
      })) : null, loading ? React.createElement(_reactNative.ActivityIndicator, {
        size: "small",
        color: textColor,
        style: styles.icon
      }) : null, React.createElement(_Text.default, {
        numberOfLines: 1,
        style: [styles.label, compact && styles.compactLabel, textStyle, {
          fontFamily: fontFamily
        }]
      }, React.Children.map(children, function (child) {
        return typeof child === 'string' && uppercase ? child.toUpperCase() : child;
      })))));
    }
  }]);
  return Button;
}(React.Component);

(0, _defineProperty2.default)(Button, "defaultProps", {
  mode: 'text',
  uppercase: true
});

var styles = _reactNative.StyleSheet.create({
  button: {
    minWidth: 64,
    borderStyle: 'solid'
  },
  compact: {
    minWidth: 'auto'
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    width: 16,
    marginLeft: 12,
    marginRight: -4
  },
  label: {
    textAlign: 'center',
    letterSpacing: 1,
    marginVertical: 9,
    marginHorizontal: 16
  },
  compactLabel: {
    marginHorizontal: 8
  }
});

var _default = (0, _theming.withTheme)(Button);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,