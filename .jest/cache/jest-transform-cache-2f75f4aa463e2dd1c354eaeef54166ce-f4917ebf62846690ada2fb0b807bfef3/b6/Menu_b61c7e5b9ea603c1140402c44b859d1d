715e6dcb2c468bc72489575e629bad5a
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _Portal = _interopRequireDefault(require("../Portal/Portal"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

var SCREEN_INDENT = 8;
var ANIMATION_DURATION = 250;

var EASING = _reactNative.Easing.bezier(0.4, 0, 0.2, 1);

var Menu = function (_React$Component) {
  (0, _inherits2.default)(Menu, _React$Component);

  function Menu() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Menu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Menu)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      top: 0,
      left: 0,
      menuLayout: {
        width: 0,
        height: 0
      },
      anchorLayout: {
        width: 0,
        height: 0
      },
      opacityAnimation: new _reactNative.Animated.Value(0),
      scaleAnimation: new _reactNative.Animated.ValueXY({
        x: 0,
        y: 0
      })
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_measureMenuLayout", function () {
      return new Promise(function (resolve) {
        if (_this._menu) {
          _this._menu.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height
            });
          });
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_measureAnchorLayout", function () {
      return new Promise(function (resolve) {
        if (_this._anchor) {
          _this._anchor.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height
            });
          });
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_updateVisibility", function () {
      if (_this.props.visible) {
        _this._show();
      } else {
        _this._hide();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_show", function _callee() {
      var _ref, _ref2, menuLayout, anchorLayout;

      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _reactNative.BackHandler.addEventListener('hardwareBackPress', _this.props.onDismiss);

              _context.next = 3;
              return _regenerator.default.awrap(Promise.all([_this._measureMenuLayout(), _this._measureAnchorLayout()]));

            case 3:
              _ref = _context.sent;
              _ref2 = (0, _slicedToArray2.default)(_ref, 2);
              menuLayout = _ref2[0];
              anchorLayout = _ref2[1];

              if (!(!menuLayout.width || !menuLayout.height || !anchorLayout.width || !anchorLayout.height)) {
                _context.next = 11;
                break;
              }

              _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this.props.onDismiss);

              setTimeout(function () {
                _this._show();
              }, ANIMATION_DURATION);
              return _context.abrupt("return");

            case 11:
              _this.setState({
                left: anchorLayout.x,
                top: anchorLayout.y,
                anchorLayout: {
                  height: anchorLayout.height,
                  width: anchorLayout.width
                },
                menuLayout: {
                  width: menuLayout.width,
                  height: menuLayout.height
                }
              }, function () {
                _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.scaleAnimation, {
                  toValue: {
                    x: menuLayout.width,
                    y: menuLayout.height
                  },
                  duration: ANIMATION_DURATION,
                  easing: EASING,
                  useNativeDriver: true
                }), _reactNative.Animated.timing(_this.state.opacityAnimation, {
                  toValue: 1,
                  duration: ANIMATION_DURATION,
                  easing: EASING,
                  useNativeDriver: true
                })]).start();
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_hide", function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this.props.onDismiss);

      _reactNative.Animated.timing(_this.state.opacityAnimation, {
        toValue: 0,
        duration: ANIMATION_DURATION,
        easing: EASING,
        useNativeDriver: true
      }).start(function (finished) {
        if (finished) {
          _this.state.scaleAnimation.setValue({
            x: 0,
            y: 0
          });
        }
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Menu, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        this._updateVisibility();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', this.props.onDismiss);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          visible = _this$props.visible,
          anchor = _this$props.anchor,
          style = _this$props.style,
          children = _this$props.children,
          theme = _this$props.theme,
          onDismiss = _this$props.onDismiss;
      var _this$state = this.state,
          menuLayout = _this$state.menuLayout,
          anchorLayout = _this$state.anchorLayout,
          opacityAnimation = _this$state.opacityAnimation,
          scaleAnimation = _this$state.scaleAnimation;

      var additionalVerticalValue = _reactNative.Platform.select({
        android: 24,
        default: 0
      });

      var _this$state2 = this.state,
          left = _this$state2.left,
          top = _this$state2.top;
      var scaleTransforms = [{
        scaleX: scaleAnimation.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [0, 1]
        })
      }, {
        scaleY: scaleAnimation.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [0, 1]
        })
      }];
      var positionTransforms = [];

      var _Dimensions$get = _reactNative.Dimensions.get('screen'),
          screenWidth = _Dimensions$get.width,
          screenHeight = _Dimensions$get.height;

      if (left <= screenWidth - menuLayout.width - SCREEN_INDENT) {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [-(menuLayout.width / 2), 0]
          })
        });

        if (left >= 0 && left < SCREEN_INDENT) {
          left = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [menuLayout.width / 2, 0]
          })
        });
        left += anchorLayout.width - menuLayout.width;
        var right = left + menuLayout.width;

        if (right <= screenWidth && right > screenWidth - SCREEN_INDENT) {
          left = screenWidth - SCREEN_INDENT - menuLayout.width;
        }
      }

      if (top <= screenHeight - menuLayout.height - SCREEN_INDENT) {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [-(menuLayout.height / 2), 0]
          })
        });

        if (top >= 0 && top < SCREEN_INDENT) {
          top = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [menuLayout.height / 2, 0]
          })
        });
        top += anchorLayout.height - menuLayout.height;
        var bottom = top + menuLayout.height + additionalVerticalValue;

        if (bottom <= screenHeight && bottom > screenHeight - SCREEN_INDENT) {
          top = screenHeight - SCREEN_INDENT - menuLayout.height - additionalVerticalValue;
        }
      }

      var shadowMenuContainerStyle = {
        opacity: opacityAnimation,
        transform: scaleTransforms,
        borderRadius: theme.roundness
      };
      var positionStyle = (0, _objectSpread2.default)({
        top: top + additionalVerticalValue
      }, _reactNative.I18nManager.isRTL ? {
        right: left
      } : {
        left: left
      });
      return React.createElement(_reactNative.View, {
        ref: function ref(_ref4) {
          _this2._anchor = _ref4;
        },
        collapsable: false
      }, anchor, React.createElement(_Portal.default, null, visible ? React.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: onDismiss
      }, React.createElement(_reactNative.View, {
        style: _reactNative.StyleSheet.absoluteFill
      })) : null, React.createElement(_reactNative.View, {
        ref: function ref(_ref3) {
          if (!_this2._menu) {
            _this2._menu = _ref3;

            if (visible) {
              _this2._show();
            }
          }
        },
        collapsable: false,
        pointerEvents: visible ? 'auto' : 'none',
        style: [styles.wrapper, positionStyle, style]
      }, React.createElement(_reactNative.Animated.View, {
        style: {
          transform: positionTransforms
        }
      }, React.createElement(_Surface.default, {
        style: [styles.shadowMenuContainer, shadowMenuContainerStyle]
      }, children)))));
    }
  }]);
  return Menu;
}(React.Component);

(0, _defineProperty2.default)(Menu, "Item", _MenuItem.default);

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    position: 'absolute'
  },
  shadowMenuContainer: {
    opacity: 0,
    paddingVertical: 8,
    elevation: 8
  }
});

var _default = (0, _theming.withTheme)(Menu);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,