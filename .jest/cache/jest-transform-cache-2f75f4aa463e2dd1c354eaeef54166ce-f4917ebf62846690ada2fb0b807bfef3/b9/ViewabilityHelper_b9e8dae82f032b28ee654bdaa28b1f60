5d68e960ca01f0e3b40b56794a4e830d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var invariant = require('fbjs/lib/invariant');

var ViewabilityHelper = function () {
  function ViewabilityHelper() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      viewAreaCoveragePercentThreshold: 0
    };
    (0, _classCallCheck2.default)(this, ViewabilityHelper);
    (0, _defineProperty2.default)(this, "_hasInteracted", false);
    (0, _defineProperty2.default)(this, "_timers", new Set());
    (0, _defineProperty2.default)(this, "_viewableIndices", []);
    (0, _defineProperty2.default)(this, "_viewableItems", new Map());
    this._config = config;
  }

  (0, _createClass2.default)(ViewabilityHelper, [{
    key: "dispose",
    value: function dispose() {
      this._timers.forEach(clearTimeout);
    }
  }, {
    key: "computeViewableItems",
    value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
      var _this$_config = this._config,
          itemVisiblePercentThreshold = _this$_config.itemVisiblePercentThreshold,
          viewAreaCoveragePercentThreshold = _this$_config.viewAreaCoveragePercentThreshold;
      var viewAreaMode = viewAreaCoveragePercentThreshold != null;
      var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
      invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
      var viewableIndices = [];

      if (itemCount === 0) {
        return viewableIndices;
      }

      var firstVisible = -1;

      var _ref = renderRange || {
        first: 0,
        last: itemCount - 1
      },
          first = _ref.first,
          last = _ref.last;

      invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({
        renderRange: renderRange,
        itemCount: itemCount
      }));

      for (var idx = first; idx <= last; idx++) {
        var metrics = getFrameMetrics(idx);

        if (!metrics) {
          continue;
        }

        var top = metrics.offset - scrollOffset;
        var bottom = top + metrics.length;

        if (top < viewportHeight && bottom > 0) {
          firstVisible = idx;

          if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
            viewableIndices.push(idx);
          }
        } else if (firstVisible >= 0) {
          break;
        }
      }

      return viewableIndices;
    }
  }, {
    key: "onUpdate",
    value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
      var _this = this;

      if (this._config.waitForInteraction && !this._hasInteracted || itemCount === 0 || !getFrameMetrics(0)) {
        return;
      }

      var viewableIndices = [];

      if (itemCount) {
        viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
      }

      if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
        return v === viewableIndices[ii];
      })) {
        return;
      }

      this._viewableIndices = viewableIndices;

      if (this._config.minimumViewTime) {
        var handle = setTimeout(function () {
          _this._timers.delete(handle);

          _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }, this._config.minimumViewTime);

        this._timers.add(handle);
      } else {
        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
      }
    }
  }, {
    key: "resetViewableIndices",
    value: function resetViewableIndices() {
      this._viewableIndices = [];
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      this._hasInteracted = true;
    }
  }, {
    key: "_onUpdateSync",
    value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
      var _this2 = this;

      viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
        return _this2._viewableIndices.includes(ii);
      });
      var prevItems = this._viewableItems;
      var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
        var viewable = createViewToken(ii, true);
        return [viewable.key, viewable];
      }));
      var changed = [];

      for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref4;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref4 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref4 = _i.value;
        }

        var _ref8 = _ref4;

        var _ref3 = (0, _slicedToArray2.default)(_ref8, 2);

        var _key2 = _ref3[0];
        var _viewable2 = _ref3[1];

        if (!prevItems.has(_key2)) {
          changed.push(_viewable2);
        }
      }

      for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref7;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref7 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref7 = _i2.value;
        }

        var _ref9 = _ref7;

        var _ref6 = (0, _slicedToArray2.default)(_ref9, 2);

        var _key3 = _ref6[0];
        var _viewable3 = _ref6[1];

        if (!nextItems.has(_key3)) {
          changed.push((0, _objectSpread2.default)({}, _viewable3, {
            isViewable: false
          }));
        }
      }

      if (changed.length > 0) {
        this._viewableItems = nextItems;
        onViewableItemsChanged({
          viewableItems: Array.from(nextItems.values()),
          changed: changed,
          viewabilityConfig: this._config
        });
      }
    }
  }]);
  return ViewabilityHelper;
}();

function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
  if (_isEntirelyVisible(top, bottom, viewportHeight)) {
    return true;
  } else {
    var pixels = _getPixelsVisible(top, bottom, viewportHeight);

    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
    return percent >= viewablePercentThreshold;
  }
}

function _getPixelsVisible(top, bottom, viewportHeight) {
  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
  return Math.max(0, visibleHeight);
}

function _isEntirelyVisible(top, bottom, viewportHeight) {
  return top >= 0 && bottom <= viewportHeight && bottom > top;
}

module.exports = ViewabilityHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXdhYmlsaXR5SGVscGVyLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJWaWV3YWJpbGl0eUhlbHBlciIsImNvbmZpZyIsInZpZXdBcmVhQ292ZXJhZ2VQZXJjZW50VGhyZXNob2xkIiwiU2V0IiwiTWFwIiwiX2NvbmZpZyIsIl90aW1lcnMiLCJmb3JFYWNoIiwiY2xlYXJUaW1lb3V0IiwiaXRlbUNvdW50Iiwic2Nyb2xsT2Zmc2V0Iiwidmlld3BvcnRIZWlnaHQiLCJnZXRGcmFtZU1ldHJpY3MiLCJyZW5kZXJSYW5nZSIsIml0ZW1WaXNpYmxlUGVyY2VudFRocmVzaG9sZCIsInZpZXdBcmVhTW9kZSIsInZpZXdhYmxlUGVyY2VudFRocmVzaG9sZCIsInZpZXdhYmxlSW5kaWNlcyIsImZpcnN0VmlzaWJsZSIsImZpcnN0IiwibGFzdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpZHgiLCJtZXRyaWNzIiwidG9wIiwib2Zmc2V0IiwiYm90dG9tIiwibGVuZ3RoIiwiX2lzVmlld2FibGUiLCJwdXNoIiwiY3JlYXRlVmlld1Rva2VuIiwib25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCIsIndhaXRGb3JJbnRlcmFjdGlvbiIsIl9oYXNJbnRlcmFjdGVkIiwiY29tcHV0ZVZpZXdhYmxlSXRlbXMiLCJfdmlld2FibGVJbmRpY2VzIiwiZXZlcnkiLCJ2IiwiaWkiLCJtaW5pbXVtVmlld1RpbWUiLCJoYW5kbGUiLCJzZXRUaW1lb3V0IiwiZGVsZXRlIiwiX29uVXBkYXRlU3luYyIsImFkZCIsInZpZXdhYmxlSW5kaWNlc1RvQ2hlY2siLCJmaWx0ZXIiLCJpbmNsdWRlcyIsInByZXZJdGVtcyIsIl92aWV3YWJsZUl0ZW1zIiwibmV4dEl0ZW1zIiwibWFwIiwidmlld2FibGUiLCJrZXkiLCJjaGFuZ2VkIiwiaGFzIiwiaXNWaWV3YWJsZSIsInZpZXdhYmxlSXRlbXMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJ2aWV3YWJpbGl0eUNvbmZpZyIsIml0ZW1MZW5ndGgiLCJfaXNFbnRpcmVseVZpc2libGUiLCJwaXhlbHMiLCJfZ2V0UGl4ZWxzVmlzaWJsZSIsInBlcmNlbnQiLCJ2aXNpYmxlSGVpZ2h0IiwiTWF0aCIsIm1pbiIsIm1heCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBOzs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQXpCOztJQTJETUMsaUI7QUFVSiwrQkFFRTtBQUFBLFFBREFDLE1BQ0EsdUVBRDRCO0FBQUNDLE1BQUFBLGdDQUFnQyxFQUFFO0FBQW5DLEtBQzVCO0FBQUE7QUFBQSwwREFWd0IsS0FVeEI7QUFBQSxtREFOcUIsSUFBSUMsR0FBSixFQU1yQjtBQUFBLDREQUxnQyxFQUtoQztBQUFBLDBEQUp1QyxJQUFJQyxHQUFKLEVBSXZDO0FBQ0EsU0FBS0MsT0FBTCxHQUFlSixNQUFmO0FBQ0Q7Ozs7OEJBS1M7QUFDUixXQUFLSyxPQUFMLENBQWFDLE9BQWIsQ0FBcUJDLFlBQXJCO0FBQ0Q7Ozt5Q0FNQ0MsUyxFQUNBQyxZLEVBQ0FDLGMsRUFDQUMsZSxFQUNBQyxXLEVBQ2U7QUFBQSwwQkFJWCxLQUFLUixPQUpNO0FBQUEsVUFFYlMsMkJBRmEsaUJBRWJBLDJCQUZhO0FBQUEsVUFHYlosZ0NBSGEsaUJBR2JBLGdDQUhhO0FBS2YsVUFBTWEsWUFBWSxHQUFHYixnQ0FBZ0MsSUFBSSxJQUF6RDtBQUNBLFVBQU1jLHdCQUF3QixHQUFHRCxZQUFZLEdBQ3pDYixnQ0FEeUMsR0FFekNZLDJCQUZKO0FBR0FoQixNQUFBQSxTQUFTLENBQ1BrQix3QkFBd0IsSUFBSSxJQUE1QixJQUNHRiwyQkFBMkIsSUFBSSxJQUFoQyxNQUNHWixnQ0FBZ0MsSUFBSSxJQUR2QyxDQUZLLEVBSVAseUZBSk8sQ0FBVDtBQU1BLFVBQU1lLGVBQWUsR0FBRyxFQUF4Qjs7QUFDQSxVQUFJUixTQUFTLEtBQUssQ0FBbEIsRUFBcUI7QUFDbkIsZUFBT1EsZUFBUDtBQUNEOztBQUNELFVBQUlDLFlBQVksR0FBRyxDQUFDLENBQXBCOztBQW5CZSxpQkFvQk9MLFdBQVcsSUFBSTtBQUFDTSxRQUFBQSxLQUFLLEVBQUUsQ0FBUjtBQUFXQyxRQUFBQSxJQUFJLEVBQUVYLFNBQVMsR0FBRztBQUE3QixPQXBCdEI7QUFBQSxVQW9CUlUsS0FwQlEsUUFvQlJBLEtBcEJRO0FBQUEsVUFvQkRDLElBcEJDLFFBb0JEQSxJQXBCQzs7QUFxQmZ0QixNQUFBQSxTQUFTLENBQ1BzQixJQUFJLEdBQUdYLFNBREEsRUFFUCwwQkFBMEJZLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQUNULFFBQUFBLFdBQVcsRUFBWEEsV0FBRDtBQUFjSixRQUFBQSxTQUFTLEVBQVRBO0FBQWQsT0FBZixDQUZuQixDQUFUOztBQUlBLFdBQUssSUFBSWMsR0FBRyxHQUFHSixLQUFmLEVBQXNCSSxHQUFHLElBQUlILElBQTdCLEVBQW1DRyxHQUFHLEVBQXRDLEVBQTBDO0FBQ3hDLFlBQU1DLE9BQU8sR0FBR1osZUFBZSxDQUFDVyxHQUFELENBQS9COztBQUNBLFlBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQ1o7QUFDRDs7QUFDRCxZQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQ0UsTUFBUixHQUFpQmhCLFlBQTdCO0FBQ0EsWUFBTWlCLE1BQU0sR0FBR0YsR0FBRyxHQUFHRCxPQUFPLENBQUNJLE1BQTdCOztBQUNBLFlBQUlILEdBQUcsR0FBR2QsY0FBTixJQUF3QmdCLE1BQU0sR0FBRyxDQUFyQyxFQUF3QztBQUN0Q1QsVUFBQUEsWUFBWSxHQUFHSyxHQUFmOztBQUNBLGNBQ0VNLFdBQVcsQ0FDVGQsWUFEUyxFQUVUQyx3QkFGUyxFQUdUUyxHQUhTLEVBSVRFLE1BSlMsRUFLVGhCLGNBTFMsRUFNVGEsT0FBTyxDQUFDSSxNQU5DLENBRGIsRUFTRTtBQUNBWCxZQUFBQSxlQUFlLENBQUNhLElBQWhCLENBQXFCUCxHQUFyQjtBQUNEO0FBQ0YsU0FkRCxNQWNPLElBQUlMLFlBQVksSUFBSSxDQUFwQixFQUF1QjtBQUM1QjtBQUNEO0FBQ0Y7O0FBQ0QsYUFBT0QsZUFBUDtBQUNEOzs7NkJBT0NSLFMsRUFDQUMsWSxFQUNBQyxjLEVBQ0FDLGUsRUFDQW1CLGUsRUFDQUMsc0IsRUFJQW5CLFcsRUFDTTtBQUFBOztBQUNOLFVBQ0csS0FBS1IsT0FBTCxDQUFhNEIsa0JBQWIsSUFBbUMsQ0FBQyxLQUFLQyxjQUExQyxJQUNBekIsU0FBUyxLQUFLLENBRGQsSUFFQSxDQUFDRyxlQUFlLENBQUMsQ0FBRCxDQUhsQixFQUlFO0FBQ0E7QUFDRDs7QUFDRCxVQUFJSyxlQUFlLEdBQUcsRUFBdEI7O0FBQ0EsVUFBSVIsU0FBSixFQUFlO0FBQ2JRLFFBQUFBLGVBQWUsR0FBRyxLQUFLa0Isb0JBQUwsQ0FDaEIxQixTQURnQixFQUVoQkMsWUFGZ0IsRUFHaEJDLGNBSGdCLEVBSWhCQyxlQUpnQixFQUtoQkMsV0FMZ0IsQ0FBbEI7QUFPRDs7QUFDRCxVQUNFLEtBQUt1QixnQkFBTCxDQUFzQlIsTUFBdEIsS0FBaUNYLGVBQWUsQ0FBQ1csTUFBakQsSUFDQSxLQUFLUSxnQkFBTCxDQUFzQkMsS0FBdEIsQ0FBNEIsVUFBQ0MsQ0FBRCxFQUFJQyxFQUFKO0FBQUEsZUFBV0QsQ0FBQyxLQUFLckIsZUFBZSxDQUFDc0IsRUFBRCxDQUFoQztBQUFBLE9BQTVCLENBRkYsRUFHRTtBQUdBO0FBQ0Q7O0FBQ0QsV0FBS0gsZ0JBQUwsR0FBd0JuQixlQUF4Qjs7QUFDQSxVQUFJLEtBQUtaLE9BQUwsQ0FBYW1DLGVBQWpCLEVBQWtDO0FBQ2hDLFlBQU1DLE1BQU0sR0FBR0MsVUFBVSxDQUFDLFlBQU07QUFDOUIsVUFBQSxLQUFJLENBQUNwQyxPQUFMLENBQWFxQyxNQUFiLENBQW9CRixNQUFwQjs7QUFDQSxVQUFBLEtBQUksQ0FBQ0csYUFBTCxDQUNFM0IsZUFERixFQUVFZSxzQkFGRixFQUdFRCxlQUhGO0FBS0QsU0FQd0IsRUFPdEIsS0FBSzFCLE9BQUwsQ0FBYW1DLGVBUFMsQ0FBekI7O0FBUUEsYUFBS2xDLE9BQUwsQ0FBYXVDLEdBQWIsQ0FBaUJKLE1BQWpCO0FBQ0QsT0FWRCxNQVVPO0FBQ0wsYUFBS0csYUFBTCxDQUNFM0IsZUFERixFQUVFZSxzQkFGRixFQUdFRCxlQUhGO0FBS0Q7QUFDRjs7OzJDQUtzQjtBQUNyQixXQUFLSyxnQkFBTCxHQUF3QixFQUF4QjtBQUNEOzs7d0NBS21CO0FBQ2xCLFdBQUtGLGNBQUwsR0FBc0IsSUFBdEI7QUFDRDs7O2tDQUdDWSxzQixFQUNBZCxzQixFQUNBRCxlLEVBQ0E7QUFBQTs7QUFFQWUsTUFBQUEsc0JBQXNCLEdBQUdBLHNCQUFzQixDQUFDQyxNQUF2QixDQUE4QixVQUFBUixFQUFFO0FBQUEsZUFDdkQsTUFBSSxDQUFDSCxnQkFBTCxDQUFzQlksUUFBdEIsQ0FBK0JULEVBQS9CLENBRHVEO0FBQUEsT0FBaEMsQ0FBekI7QUFHQSxVQUFNVSxTQUFTLEdBQUcsS0FBS0MsY0FBdkI7QUFDQSxVQUFNQyxTQUFTLEdBQUcsSUFBSS9DLEdBQUosQ0FDaEIwQyxzQkFBc0IsQ0FBQ00sR0FBdkIsQ0FBMkIsVUFBQWIsRUFBRSxFQUFJO0FBQy9CLFlBQU1jLFFBQVEsR0FBR3RCLGVBQWUsQ0FBQ1EsRUFBRCxFQUFLLElBQUwsQ0FBaEM7QUFDQSxlQUFPLENBQUNjLFFBQVEsQ0FBQ0MsR0FBVixFQUFlRCxRQUFmLENBQVA7QUFDRCxPQUhELENBRGdCLENBQWxCO0FBT0EsVUFBTUUsT0FBTyxHQUFHLEVBQWhCOztBQUNBLDJCQUE4QkosU0FBOUIsZ0tBQXlDO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7QUFBQTs7QUFBQSxZQUE3QkcsS0FBNkI7QUFBQSxZQUF4QkQsVUFBd0I7O0FBQ3ZDLFlBQUksQ0FBQ0osU0FBUyxDQUFDTyxHQUFWLENBQWNGLEtBQWQsQ0FBTCxFQUF5QjtBQUN2QkMsVUFBQUEsT0FBTyxDQUFDekIsSUFBUixDQUFhdUIsVUFBYjtBQUNEO0FBQ0Y7O0FBQ0QsNEJBQThCSixTQUE5Qix1S0FBeUM7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBOztBQUFBOztBQUFBLFlBQTdCSyxLQUE2QjtBQUFBLFlBQXhCRCxVQUF3Qjs7QUFDdkMsWUFBSSxDQUFDRixTQUFTLENBQUNLLEdBQVYsQ0FBY0YsS0FBZCxDQUFMLEVBQXlCO0FBQ3ZCQyxVQUFBQSxPQUFPLENBQUN6QixJQUFSLGlDQUFpQnVCLFVBQWpCO0FBQTJCSSxZQUFBQSxVQUFVLEVBQUU7QUFBdkM7QUFDRDtBQUNGOztBQUNELFVBQUlGLE9BQU8sQ0FBQzNCLE1BQVIsR0FBaUIsQ0FBckIsRUFBd0I7QUFDdEIsYUFBS3NCLGNBQUwsR0FBc0JDLFNBQXRCO0FBQ0FuQixRQUFBQSxzQkFBc0IsQ0FBQztBQUNyQjBCLFVBQUFBLGFBQWEsRUFBRUMsS0FBSyxDQUFDQyxJQUFOLENBQVdULFNBQVMsQ0FBQ1UsTUFBVixFQUFYLENBRE07QUFFckJOLFVBQUFBLE9BQU8sRUFBUEEsT0FGcUI7QUFHckJPLFVBQUFBLGlCQUFpQixFQUFFLEtBQUt6RDtBQUhILFNBQUQsQ0FBdEI7QUFLRDtBQUNGOzs7OztBQUdILFNBQVN3QixXQUFULENBQ0VkLFlBREYsRUFFRUMsd0JBRkYsRUFHRVMsR0FIRixFQUlFRSxNQUpGLEVBS0VoQixjQUxGLEVBTUVvRCxVQU5GLEVBT1c7QUFDVCxNQUFJQyxrQkFBa0IsQ0FBQ3ZDLEdBQUQsRUFBTUUsTUFBTixFQUFjaEIsY0FBZCxDQUF0QixFQUFxRDtBQUNuRCxXQUFPLElBQVA7QUFDRCxHQUZELE1BRU87QUFDTCxRQUFNc0QsTUFBTSxHQUFHQyxpQkFBaUIsQ0FBQ3pDLEdBQUQsRUFBTUUsTUFBTixFQUFjaEIsY0FBZCxDQUFoQzs7QUFDQSxRQUFNd0QsT0FBTyxHQUNYLE9BQU9wRCxZQUFZLEdBQUdrRCxNQUFNLEdBQUd0RCxjQUFaLEdBQTZCc0QsTUFBTSxHQUFHRixVQUF6RCxDQURGO0FBRUEsV0FBT0ksT0FBTyxJQUFJbkQsd0JBQWxCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTa0QsaUJBQVQsQ0FDRXpDLEdBREYsRUFFRUUsTUFGRixFQUdFaEIsY0FIRixFQUlVO0FBQ1IsTUFBTXlELGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMzQyxNQUFULEVBQWlCaEIsY0FBakIsSUFBbUMwRCxJQUFJLENBQUNFLEdBQUwsQ0FBUzlDLEdBQVQsRUFBYyxDQUFkLENBQXpEO0FBQ0EsU0FBTzRDLElBQUksQ0FBQ0UsR0FBTCxDQUFTLENBQVQsRUFBWUgsYUFBWixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osa0JBQVQsQ0FDRXZDLEdBREYsRUFFRUUsTUFGRixFQUdFaEIsY0FIRixFQUlXO0FBQ1QsU0FBT2MsR0FBRyxJQUFJLENBQVAsSUFBWUUsTUFBTSxJQUFJaEIsY0FBdEIsSUFBd0NnQixNQUFNLEdBQUdGLEdBQXhEO0FBQ0Q7O0FBRUQrQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ6RSxpQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbmV4cG9ydCB0eXBlIFZpZXdUb2tlbiA9IHtcbiAgaXRlbTogYW55LFxuICBrZXk6IHN0cmluZyxcbiAgaW5kZXg6ID9udW1iZXIsXG4gIGlzVmlld2FibGU6IGJvb2xlYW4sXG4gIHNlY3Rpb24/OiBhbnksXG59O1xuXG5leHBvcnQgdHlwZSBWaWV3YWJpbGl0eUNvbmZpZ0NhbGxiYWNrUGFpciA9IHtcbiAgdmlld2FiaWxpdHlDb25maWc6IFZpZXdhYmlsaXR5Q29uZmlnLFxuICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkOiAoaW5mbzoge1xuICAgIHZpZXdhYmxlSXRlbXM6IEFycmF5PFZpZXdUb2tlbj4sXG4gICAgY2hhbmdlZDogQXJyYXk8Vmlld1Rva2VuPixcbiAgfSkgPT4gdm9pZCxcbn07XG5cbmV4cG9ydCB0eXBlIFZpZXdhYmlsaXR5Q29uZmlnID0ge3xcbiAgLyoqXG4gICAqIE1pbmltdW0gYW1vdW50IG9mIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBhbiBpdGVtIG11c3QgYmUgcGh5c2ljYWxseSB2aWV3YWJsZSBiZWZvcmUgdGhlXG4gICAqIHZpZXdhYmlsaXR5IGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQuIEEgaGlnaCBudW1iZXIgbWVhbnMgdGhhdCBzY3JvbGxpbmcgdGhyb3VnaCBjb250ZW50IHdpdGhvdXRcbiAgICogc3RvcHBpbmcgd2lsbCBub3QgbWFyayB0aGUgY29udGVudCBhcyB2aWV3YWJsZS5cbiAgICovXG4gIG1pbmltdW1WaWV3VGltZT86IG51bWJlcixcblxuICAvKipcbiAgICogUGVyY2VudCBvZiB2aWV3cG9ydCB0aGF0IG11c3QgYmUgY292ZXJlZCBmb3IgYSBwYXJ0aWFsbHkgb2NjbHVkZWQgaXRlbSB0byBjb3VudCBhc1xuICAgKiBcInZpZXdhYmxlXCIsIDAtMTAwLiBGdWxseSB2aXNpYmxlIGl0ZW1zIGFyZSBhbHdheXMgY29uc2lkZXJlZCB2aWV3YWJsZS4gQSB2YWx1ZSBvZiAwIG1lYW5zXG4gICAqIHRoYXQgYSBzaW5nbGUgcGl4ZWwgaW4gdGhlIHZpZXdwb3J0IG1ha2VzIHRoZSBpdGVtIHZpZXdhYmxlLCBhbmQgYSB2YWx1ZSBvZiAxMDAgbWVhbnMgdGhhdFxuICAgKiBhbiBpdGVtIG11c3QgYmUgZWl0aGVyIGVudGlyZWx5IHZpc2libGUgb3IgY292ZXIgdGhlIGVudGlyZSB2aWV3cG9ydCB0byBjb3VudCBhcyB2aWV3YWJsZS5cbiAgICovXG4gIHZpZXdBcmVhQ292ZXJhZ2VQZXJjZW50VGhyZXNob2xkPzogbnVtYmVyLFxuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIGB2aWV3QXJlYVBlcmNlbnRUaHJlc2hvbGRgLCBidXQgY29uc2lkZXJzIHRoZSBwZXJjZW50IG9mIHRoZSBpdGVtIHRoYXQgaXMgdmlzaWJsZSxcbiAgICogcmF0aGVyIHRoYW4gdGhlIGZyYWN0aW9uIG9mIHRoZSB2aWV3YWJsZSBhcmVhIGl0IGNvdmVycy5cbiAgICovXG4gIGl0ZW1WaXNpYmxlUGVyY2VudFRocmVzaG9sZD86IG51bWJlcixcblxuICAvKipcbiAgICogTm90aGluZyBpcyBjb25zaWRlcmVkIHZpZXdhYmxlIHVudGlsIHRoZSB1c2VyIHNjcm9sbHMgb3IgYHJlY29yZEludGVyYWN0aW9uYCBpcyBjYWxsZWQgYWZ0ZXJcbiAgICogcmVuZGVyLlxuICAgKi9cbiAgd2FpdEZvckludGVyYWN0aW9uPzogYm9vbGVhbixcbnx9O1xuXG4vKipcbiAqIEEgVXRpbGl0eSBjbGFzcyBmb3IgY2FsY3VsYXRpbmcgdmlld2FibGUgaXRlbXMgYmFzZWQgb24gY3VycmVudCBtZXRyaWNzIGxpa2Ugc2Nyb2xsIHBvc2l0aW9uIGFuZFxuICogbGF5b3V0LlxuICpcbiAqIEFuIGl0ZW0gaXMgc2FpZCB0byBiZSBpbiBhIFwidmlld2FibGVcIiBzdGF0ZSB3aGVuIGFueSBvZiB0aGUgZm9sbG93aW5nXG4gKiBpcyB0cnVlIGZvciBsb25nZXIgdGhhbiBgbWluaW11bVZpZXdUaW1lYCBtaWxsaXNlY29uZHMgKGFmdGVyIGFuIGludGVyYWN0aW9uIGlmIGB3YWl0Rm9ySW50ZXJhY3Rpb25gXG4gKiBpcyB0cnVlKTpcbiAqXG4gKiAtIE9jY3VweWluZyA+PSBgdmlld0FyZWFDb3ZlcmFnZVBlcmNlbnRUaHJlc2hvbGRgIG9mIHRoZSB2aWV3IGFyZWEgWE9SIGZyYWN0aW9uIG9mIHRoZSBpdGVtXG4gKiAgIHZpc2libGUgaW4gdGhlIHZpZXcgYXJlYSA+PSBgaXRlbVZpc2libGVQZXJjZW50VGhyZXNob2xkYC5cbiAqIC0gRW50aXJlbHkgdmlzaWJsZSBvbiBzY3JlZW5cbiAqL1xuY2xhc3MgVmlld2FiaWxpdHlIZWxwZXIge1xuICBfY29uZmlnOiBWaWV3YWJpbGl0eUNvbmZpZztcbiAgX2hhc0ludGVyYWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLyogJEZsb3dGaXhNZSg+PTAuNjMuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3JcbiAgICogZm91bmQgd2hlbiBGbG93IHYwLjYzIHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciBkZWxldGUgdGhpcyBjb21tZW50XG4gICAqIGFuZCBydW4gRmxvdy4gKi9cbiAgX3RpbWVyczogU2V0PG51bWJlcj4gPSBuZXcgU2V0KCk7XG4gIF92aWV3YWJsZUluZGljZXM6IEFycmF5PG51bWJlcj4gPSBbXTtcbiAgX3ZpZXdhYmxlSXRlbXM6IE1hcDxzdHJpbmcsIFZpZXdUb2tlbj4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY29uZmlnOiBWaWV3YWJpbGl0eUNvbmZpZyA9IHt2aWV3QXJlYUNvdmVyYWdlUGVyY2VudFRocmVzaG9sZDogMH0sXG4gICkge1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnVwLCBlLmcuIG9uIHVubW91bnQuIENsZWFycyBhbnkgcGVuZGluZyB0aW1lcnMuXG4gICAqL1xuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX3RpbWVycy5mb3JFYWNoKGNsZWFyVGltZW91dCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGljaCBpdGVtcyBhcmUgdmlld2FibGUgYmFzZWQgb24gdGhlIGN1cnJlbnQgbWV0cmljcyBhbmQgY29uZmlnLlxuICAgKi9cbiAgY29tcHV0ZVZpZXdhYmxlSXRlbXMoXG4gICAgaXRlbUNvdW50OiBudW1iZXIsXG4gICAgc2Nyb2xsT2Zmc2V0OiBudW1iZXIsXG4gICAgdmlld3BvcnRIZWlnaHQ6IG51bWJlcixcbiAgICBnZXRGcmFtZU1ldHJpY3M6IChpbmRleDogbnVtYmVyKSA9PiA/e2xlbmd0aDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcn0sXG4gICAgcmVuZGVyUmFuZ2U/OiB7Zmlyc3Q6IG51bWJlciwgbGFzdDogbnVtYmVyfSwgLy8gT3B0aW9uYWwgb3B0aW1pemF0aW9uIHRvIHJlZHVjZSB0aGUgc2NhbiBzaXplXG4gICk6IEFycmF5PG51bWJlcj4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGl0ZW1WaXNpYmxlUGVyY2VudFRocmVzaG9sZCxcbiAgICAgIHZpZXdBcmVhQ292ZXJhZ2VQZXJjZW50VGhyZXNob2xkLFxuICAgIH0gPSB0aGlzLl9jb25maWc7XG4gICAgY29uc3Qgdmlld0FyZWFNb2RlID0gdmlld0FyZWFDb3ZlcmFnZVBlcmNlbnRUaHJlc2hvbGQgIT0gbnVsbDtcbiAgICBjb25zdCB2aWV3YWJsZVBlcmNlbnRUaHJlc2hvbGQgPSB2aWV3QXJlYU1vZGVcbiAgICAgID8gdmlld0FyZWFDb3ZlcmFnZVBlcmNlbnRUaHJlc2hvbGRcbiAgICAgIDogaXRlbVZpc2libGVQZXJjZW50VGhyZXNob2xkO1xuICAgIGludmFyaWFudChcbiAgICAgIHZpZXdhYmxlUGVyY2VudFRocmVzaG9sZCAhPSBudWxsICYmXG4gICAgICAgIChpdGVtVmlzaWJsZVBlcmNlbnRUaHJlc2hvbGQgIT0gbnVsbCkgIT09XG4gICAgICAgICAgKHZpZXdBcmVhQ292ZXJhZ2VQZXJjZW50VGhyZXNob2xkICE9IG51bGwpLFxuICAgICAgJ011c3Qgc2V0IGV4YWN0bHkgb25lIG9mIGl0ZW1WaXNpYmxlUGVyY2VudFRocmVzaG9sZCBvciB2aWV3QXJlYUNvdmVyYWdlUGVyY2VudFRocmVzaG9sZCcsXG4gICAgKTtcbiAgICBjb25zdCB2aWV3YWJsZUluZGljZXMgPSBbXTtcbiAgICBpZiAoaXRlbUNvdW50ID09PSAwKSB7XG4gICAgICByZXR1cm4gdmlld2FibGVJbmRpY2VzO1xuICAgIH1cbiAgICBsZXQgZmlyc3RWaXNpYmxlID0gLTE7XG4gICAgY29uc3Qge2ZpcnN0LCBsYXN0fSA9IHJlbmRlclJhbmdlIHx8IHtmaXJzdDogMCwgbGFzdDogaXRlbUNvdW50IC0gMX07XG4gICAgaW52YXJpYW50KFxuICAgICAgbGFzdCA8IGl0ZW1Db3VudCxcbiAgICAgICdJbnZhbGlkIHJlbmRlciByYW5nZSAnICsgSlNPTi5zdHJpbmdpZnkoe3JlbmRlclJhbmdlLCBpdGVtQ291bnR9KSxcbiAgICApO1xuICAgIGZvciAobGV0IGlkeCA9IGZpcnN0OyBpZHggPD0gbGFzdDsgaWR4KyspIHtcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBnZXRGcmFtZU1ldHJpY3MoaWR4KTtcbiAgICAgIGlmICghbWV0cmljcykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRvcCA9IG1ldHJpY3Mub2Zmc2V0IC0gc2Nyb2xsT2Zmc2V0O1xuICAgICAgY29uc3QgYm90dG9tID0gdG9wICsgbWV0cmljcy5sZW5ndGg7XG4gICAgICBpZiAodG9wIDwgdmlld3BvcnRIZWlnaHQgJiYgYm90dG9tID4gMCkge1xuICAgICAgICBmaXJzdFZpc2libGUgPSBpZHg7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBfaXNWaWV3YWJsZShcbiAgICAgICAgICAgIHZpZXdBcmVhTW9kZSxcbiAgICAgICAgICAgIHZpZXdhYmxlUGVyY2VudFRocmVzaG9sZCxcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIGJvdHRvbSxcbiAgICAgICAgICAgIHZpZXdwb3J0SGVpZ2h0LFxuICAgICAgICAgICAgbWV0cmljcy5sZW5ndGgsXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICB2aWV3YWJsZUluZGljZXMucHVzaChpZHgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpcnN0VmlzaWJsZSA+PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmlld2FibGVJbmRpY2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpZ3VyZXMgb3V0IHdoaWNoIGl0ZW1zIGFyZSB2aWV3YWJsZSBhbmQgaG93IHRoYXQgaGFzIGNoYW5nZWQgZnJvbSBiZWZvcmUgYW5kIGNhbGxzXG4gICAqIGBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkYCBhcyBhcHByb3ByaWF0ZS5cbiAgICovXG4gIG9uVXBkYXRlKFxuICAgIGl0ZW1Db3VudDogbnVtYmVyLFxuICAgIHNjcm9sbE9mZnNldDogbnVtYmVyLFxuICAgIHZpZXdwb3J0SGVpZ2h0OiBudW1iZXIsXG4gICAgZ2V0RnJhbWVNZXRyaWNzOiAoaW5kZXg6IG51bWJlcikgPT4gP3tsZW5ndGg6IG51bWJlciwgb2Zmc2V0OiBudW1iZXJ9LFxuICAgIGNyZWF0ZVZpZXdUb2tlbjogKGluZGV4OiBudW1iZXIsIGlzVmlld2FibGU6IGJvb2xlYW4pID0+IFZpZXdUb2tlbixcbiAgICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkOiAoe1xuICAgICAgdmlld2FibGVJdGVtczogQXJyYXk8Vmlld1Rva2VuPixcbiAgICAgIGNoYW5nZWQ6IEFycmF5PFZpZXdUb2tlbj4sXG4gICAgfSkgPT4gdm9pZCxcbiAgICByZW5kZXJSYW5nZT86IHtmaXJzdDogbnVtYmVyLCBsYXN0OiBudW1iZXJ9LCAvLyBPcHRpb25hbCBvcHRpbWl6YXRpb24gdG8gcmVkdWNlIHRoZSBzY2FuIHNpemVcbiAgKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgKHRoaXMuX2NvbmZpZy53YWl0Rm9ySW50ZXJhY3Rpb24gJiYgIXRoaXMuX2hhc0ludGVyYWN0ZWQpIHx8XG4gICAgICBpdGVtQ291bnQgPT09IDAgfHxcbiAgICAgICFnZXRGcmFtZU1ldHJpY3MoMClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHZpZXdhYmxlSW5kaWNlcyA9IFtdO1xuICAgIGlmIChpdGVtQ291bnQpIHtcbiAgICAgIHZpZXdhYmxlSW5kaWNlcyA9IHRoaXMuY29tcHV0ZVZpZXdhYmxlSXRlbXMoXG4gICAgICAgIGl0ZW1Db3VudCxcbiAgICAgICAgc2Nyb2xsT2Zmc2V0LFxuICAgICAgICB2aWV3cG9ydEhlaWdodCxcbiAgICAgICAgZ2V0RnJhbWVNZXRyaWNzLFxuICAgICAgICByZW5kZXJSYW5nZSxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMuX3ZpZXdhYmxlSW5kaWNlcy5sZW5ndGggPT09IHZpZXdhYmxlSW5kaWNlcy5sZW5ndGggJiZcbiAgICAgIHRoaXMuX3ZpZXdhYmxlSW5kaWNlcy5ldmVyeSgodiwgaWkpID0+IHYgPT09IHZpZXdhYmxlSW5kaWNlc1tpaV0pXG4gICAgKSB7XG4gICAgICAvLyBXZSBtaWdodCBnZXQgYSBsb3Qgb2Ygc2Nyb2xsIGV2ZW50cyB3aGVyZSB2aXNpYmlsaXR5IGRvZXNuJ3QgY2hhbmdlIGFuZCB3ZSBkb24ndCB3YW50IHRvIGRvXG4gICAgICAvLyBleHRyYSB3b3JrIGluIHRob3NlIGNhc2VzLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl92aWV3YWJsZUluZGljZXMgPSB2aWV3YWJsZUluZGljZXM7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5taW5pbXVtVmlld1RpbWUpIHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLl90aW1lcnMuZGVsZXRlKGhhbmRsZSk7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlU3luYyhcbiAgICAgICAgICB2aWV3YWJsZUluZGljZXMsXG4gICAgICAgICAgb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZCxcbiAgICAgICAgICBjcmVhdGVWaWV3VG9rZW4sXG4gICAgICAgICk7XG4gICAgICB9LCB0aGlzLl9jb25maWcubWluaW11bVZpZXdUaW1lKTtcbiAgICAgIHRoaXMuX3RpbWVycy5hZGQoaGFuZGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb25VcGRhdGVTeW5jKFxuICAgICAgICB2aWV3YWJsZUluZGljZXMsXG4gICAgICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQsXG4gICAgICAgIGNyZWF0ZVZpZXdUb2tlbixcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGNsZWFuLXVwIGNhY2hlZCBfdmlld2FibGVJbmRpY2VzIHRvIGV2YWx1YXRlIGNoYW5nZWQgaXRlbXMgb24gbmV4dCB1cGRhdGVcbiAgICovXG4gIHJlc2V0Vmlld2FibGVJbmRpY2VzKCkge1xuICAgIHRoaXMuX3ZpZXdhYmxlSW5kaWNlcyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY29yZHMgdGhhdCBhbiBpbnRlcmFjdGlvbiBoYXMgaGFwcGVuZWQgZXZlbiBpZiB0aGVyZSBoYXMgYmVlbiBubyBzY3JvbGwuXG4gICAqL1xuICByZWNvcmRJbnRlcmFjdGlvbigpIHtcbiAgICB0aGlzLl9oYXNJbnRlcmFjdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIF9vblVwZGF0ZVN5bmMoXG4gICAgdmlld2FibGVJbmRpY2VzVG9DaGVjayxcbiAgICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkLFxuICAgIGNyZWF0ZVZpZXdUb2tlbixcbiAgKSB7XG4gICAgLy8gRmlsdGVyIG91dCBpbmRpY2VzIHRoYXQgaGF2ZSBnb25lIG91dCBvZiB2aWV3IHNpbmNlIHRoaXMgY2FsbCB3YXMgc2NoZWR1bGVkLlxuICAgIHZpZXdhYmxlSW5kaWNlc1RvQ2hlY2sgPSB2aWV3YWJsZUluZGljZXNUb0NoZWNrLmZpbHRlcihpaSA9PlxuICAgICAgdGhpcy5fdmlld2FibGVJbmRpY2VzLmluY2x1ZGVzKGlpKSxcbiAgICApO1xuICAgIGNvbnN0IHByZXZJdGVtcyA9IHRoaXMuX3ZpZXdhYmxlSXRlbXM7XG4gICAgY29uc3QgbmV4dEl0ZW1zID0gbmV3IE1hcChcbiAgICAgIHZpZXdhYmxlSW5kaWNlc1RvQ2hlY2subWFwKGlpID0+IHtcbiAgICAgICAgY29uc3Qgdmlld2FibGUgPSBjcmVhdGVWaWV3VG9rZW4oaWksIHRydWUpO1xuICAgICAgICByZXR1cm4gW3ZpZXdhYmxlLmtleSwgdmlld2FibGVdO1xuICAgICAgfSksXG4gICAgKTtcblxuICAgIGNvbnN0IGNoYW5nZWQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZpZXdhYmxlXSBvZiBuZXh0SXRlbXMpIHtcbiAgICAgIGlmICghcHJldkl0ZW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGNoYW5nZWQucHVzaCh2aWV3YWJsZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmlld2FibGVdIG9mIHByZXZJdGVtcykge1xuICAgICAgaWYgKCFuZXh0SXRlbXMuaGFzKGtleSkpIHtcbiAgICAgICAgY2hhbmdlZC5wdXNoKHsuLi52aWV3YWJsZSwgaXNWaWV3YWJsZTogZmFsc2V9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoYW5nZWQubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fdmlld2FibGVJdGVtcyA9IG5leHRJdGVtcztcbiAgICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQoe1xuICAgICAgICB2aWV3YWJsZUl0ZW1zOiBBcnJheS5mcm9tKG5leHRJdGVtcy52YWx1ZXMoKSksXG4gICAgICAgIGNoYW5nZWQsXG4gICAgICAgIHZpZXdhYmlsaXR5Q29uZmlnOiB0aGlzLl9jb25maWcsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2lzVmlld2FibGUoXG4gIHZpZXdBcmVhTW9kZTogYm9vbGVhbixcbiAgdmlld2FibGVQZXJjZW50VGhyZXNob2xkOiBudW1iZXIsXG4gIHRvcDogbnVtYmVyLFxuICBib3R0b206IG51bWJlcixcbiAgdmlld3BvcnRIZWlnaHQ6IG51bWJlcixcbiAgaXRlbUxlbmd0aDogbnVtYmVyLFxuKTogYm9vbGVhbiB7XG4gIGlmIChfaXNFbnRpcmVseVZpc2libGUodG9wLCBib3R0b20sIHZpZXdwb3J0SGVpZ2h0KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBpeGVscyA9IF9nZXRQaXhlbHNWaXNpYmxlKHRvcCwgYm90dG9tLCB2aWV3cG9ydEhlaWdodCk7XG4gICAgY29uc3QgcGVyY2VudCA9XG4gICAgICAxMDAgKiAodmlld0FyZWFNb2RlID8gcGl4ZWxzIC8gdmlld3BvcnRIZWlnaHQgOiBwaXhlbHMgLyBpdGVtTGVuZ3RoKTtcbiAgICByZXR1cm4gcGVyY2VudCA+PSB2aWV3YWJsZVBlcmNlbnRUaHJlc2hvbGQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldFBpeGVsc1Zpc2libGUoXG4gIHRvcDogbnVtYmVyLFxuICBib3R0b206IG51bWJlcixcbiAgdmlld3BvcnRIZWlnaHQ6IG51bWJlcixcbik6IG51bWJlciB7XG4gIGNvbnN0IHZpc2libGVIZWlnaHQgPSBNYXRoLm1pbihib3R0b20sIHZpZXdwb3J0SGVpZ2h0KSAtIE1hdGgubWF4KHRvcCwgMCk7XG4gIHJldHVybiBNYXRoLm1heCgwLCB2aXNpYmxlSGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gX2lzRW50aXJlbHlWaXNpYmxlKFxuICB0b3A6IG51bWJlcixcbiAgYm90dG9tOiBudW1iZXIsXG4gIHZpZXdwb3J0SGVpZ2h0OiBudW1iZXIsXG4pOiBib29sZWFuIHtcbiAgcmV0dXJuIHRvcCA+PSAwICYmIGJvdHRvbSA8PSB2aWV3cG9ydEhlaWdodCAmJiBib3R0b20gPiB0b3A7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmlld2FiaWxpdHlIZWxwZXI7XG4iXX0=