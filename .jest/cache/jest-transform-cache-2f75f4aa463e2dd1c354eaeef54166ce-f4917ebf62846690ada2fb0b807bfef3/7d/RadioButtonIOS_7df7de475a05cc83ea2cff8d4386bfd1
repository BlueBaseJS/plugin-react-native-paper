963cff4bd85caf40b7a5713b246fe0e7
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _RadioButtonGroup = require("./RadioButtonGroup");

var _Icon = _interopRequireDefault(require("./Icon"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _theming = require("../core/theming");

var RadioButtonIOS = function (_React$Component) {
  (0, _inherits2.default)(RadioButtonIOS, _React$Component);

  function RadioButtonIOS() {
    (0, _classCallCheck2.default)(this, RadioButtonIOS);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RadioButtonIOS).apply(this, arguments));
  }

  (0, _createClass2.default)(RadioButtonIOS, [{
    key: "render",
    value: function render() {
      var _this = this;

      return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
        var _this$props = _this.props,
            disabled = _this$props.disabled,
            onPress = _this$props.onPress,
            theme = _this$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this$props, ["disabled", "onPress", "theme"]);
        var checkedColor = disabled ? theme.colors.disabled : _this.props.color || theme.colors.accent;
        var rippleColor;
        var checked = context ? context.value === _this.props.value : _this.props.status === 'checked';

        if (disabled) {
          rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
        } else {
          rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
        }

        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
          borderless: true,
          rippleColor: rippleColor,
          onPress: disabled ? undefined : function () {
            context && context.onValueChange(_this.props.value);
            onPress && onPress();
          },
          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',
          accessibilityRole: "button",
          accessibilityStates: disabled ? ['disabled'] : undefined,
          accessibilityLiveRegion: "polite",
          style: styles.container
        }), React.createElement(_reactNative.View, {
          style: {
            opacity: checked ? 1 : 0
          }
        }, React.createElement(_Icon.default, {
          allowFontScaling: false,
          source: "done",
          size: 24,
          color: checkedColor
        })));
      });
    }
  }]);
  return RadioButtonIOS;
}(React.Component);

(0, _defineProperty2.default)(RadioButtonIOS, "displayName", 'RadioButton.IOS');

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18,
    padding: 6
  }
});

var _default = (0, _theming.withTheme)(RadioButtonIOS);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJhZGlvQnV0dG9uSU9TLmpzIl0sIm5hbWVzIjpbIlJhZGlvQnV0dG9uSU9TIiwiY29udGV4dCIsInByb3BzIiwiZGlzYWJsZWQiLCJvblByZXNzIiwidGhlbWUiLCJyZXN0IiwiY2hlY2tlZENvbG9yIiwiY29sb3JzIiwiY29sb3IiLCJhY2NlbnQiLCJyaXBwbGVDb2xvciIsImNoZWNrZWQiLCJ2YWx1ZSIsInN0YXR1cyIsInRleHQiLCJhbHBoYSIsInJnYiIsInN0cmluZyIsImZhZGUiLCJ1bmRlZmluZWQiLCJvblZhbHVlQ2hhbmdlIiwic3R5bGVzIiwiY29udGFpbmVyIiwib3BhY2l0eSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImJvcmRlclJhZGl1cyIsInBhZGRpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7SUE2Q01BLGM7Ozs7Ozs7Ozs7NkJBR0s7QUFBQTs7QUFDUCxhQUNFLG9CQUFDLG9DQUFELENBQW9CLFFBQXBCLFFBQ0csVUFBQUMsT0FBTyxFQUFJO0FBQUEsMEJBQ29DLEtBQUksQ0FBQ0MsS0FEekM7QUFBQSxZQUNGQyxRQURFLGVBQ0ZBLFFBREU7QUFBQSxZQUNRQyxPQURSLGVBQ1FBLE9BRFI7QUFBQSxZQUNpQkMsS0FEakIsZUFDaUJBLEtBRGpCO0FBQUEsWUFDMkJDLElBRDNCO0FBR1YsWUFBTUMsWUFBWSxHQUFHSixRQUFRLEdBQ3pCRSxLQUFLLENBQUNHLE1BQU4sQ0FBYUwsUUFEWSxHQUV6QixLQUFJLENBQUNELEtBQUwsQ0FBV08sS0FBWCxJQUFvQkosS0FBSyxDQUFDRyxNQUFOLENBQWFFLE1BRnJDO0FBSUEsWUFBSUMsV0FBSjtBQUVBLFlBQU1DLE9BQU8sR0FBR1gsT0FBTyxHQUNuQkEsT0FBTyxDQUFDWSxLQUFSLEtBQWtCLEtBQUksQ0FBQ1gsS0FBTCxDQUFXVyxLQURWLEdBRW5CLEtBQUksQ0FBQ1gsS0FBTCxDQUFXWSxNQUFYLEtBQXNCLFNBRjFCOztBQUlBLFlBQUlYLFFBQUosRUFBYztBQUNaUSxVQUFBQSxXQUFXLEdBQUcsb0JBQU1OLEtBQUssQ0FBQ0csTUFBTixDQUFhTyxJQUFuQixFQUNYQyxLQURXLENBQ0wsSUFESyxFQUVYQyxHQUZXLEdBR1hDLE1BSFcsRUFBZDtBQUlELFNBTEQsTUFLTztBQUNMUCxVQUFBQSxXQUFXLEdBQUcsb0JBQU1KLFlBQU4sRUFDWFksSUFEVyxDQUNOLElBRE0sRUFFWEYsR0FGVyxHQUdYQyxNQUhXLEVBQWQ7QUFJRDs7QUFDRCxlQUNFLG9CQUFDLHdCQUFELDZCQUNNWixJQUROO0FBRUUsVUFBQSxVQUFVLE1BRlo7QUFHRSxVQUFBLFdBQVcsRUFBRUssV0FIZjtBQUlFLFVBQUEsT0FBTyxFQUNMUixRQUFRLEdBQ0ppQixTQURJLEdBRUosWUFBTTtBQUNKbkIsWUFBQUEsT0FBTyxJQUFJQSxPQUFPLENBQUNvQixhQUFSLENBQXNCLEtBQUksQ0FBQ25CLEtBQUwsQ0FBV1csS0FBakMsQ0FBWDtBQUNBVCxZQUFBQSxPQUFPLElBQUlBLE9BQU8sRUFBbEI7QUFDRCxXQVZUO0FBWUUsVUFBQSxtQkFBbUIsRUFBRUQsUUFBUSxHQUFHLENBQUMsUUFBRCxFQUFXLFVBQVgsQ0FBSCxHQUE0QixRQVozRDtBQWFFLFVBQUEsMEJBQTBCLEVBQ3hCUyxPQUFPLEdBQUcscUJBQUgsR0FBMkIsdUJBZHRDO0FBZ0JFLFVBQUEsaUJBQWlCLEVBQUMsUUFoQnBCO0FBaUJFLFVBQUEsbUJBQW1CLEVBQUVULFFBQVEsR0FBRyxDQUFDLFVBQUQsQ0FBSCxHQUFrQmlCLFNBakJqRDtBQWtCRSxVQUFBLHVCQUF1QixFQUFDLFFBbEIxQjtBQW1CRSxVQUFBLEtBQUssRUFBRUUsTUFBTSxDQUFDQztBQW5CaEIsWUFxQkUsb0JBQUMsaUJBQUQ7QUFBTSxVQUFBLEtBQUssRUFBRTtBQUFFQyxZQUFBQSxPQUFPLEVBQUVaLE9BQU8sR0FBRyxDQUFILEdBQU87QUFBekI7QUFBYixXQUNFLG9CQUFDLGFBQUQ7QUFDRSxVQUFBLGdCQUFnQixFQUFFLEtBRHBCO0FBRUUsVUFBQSxNQUFNLEVBQUMsTUFGVDtBQUdFLFVBQUEsSUFBSSxFQUFFLEVBSFI7QUFJRSxVQUFBLEtBQUssRUFBRUw7QUFKVCxVQURGLENBckJGLENBREY7QUFnQ0QsT0F6REgsQ0FERjtBQTZERDs7O0VBakUwQmtCLEtBQUssQ0FBQ0MsUzs7OEJBQTdCMUIsYyxpQkFDaUIsaUI7O0FBbUV2QixJQUFNc0IsTUFBTSxHQUFHSyx3QkFBV0MsTUFBWCxDQUFrQjtBQUMvQkwsRUFBQUEsU0FBUyxFQUFFO0FBQ1RNLElBQUFBLFlBQVksRUFBRSxFQURMO0FBRVRDLElBQUFBLE9BQU8sRUFBRTtBQUZBO0FBRG9CLENBQWxCLENBQWY7O2VBT2Usd0JBQVU5QixjQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBWaWV3IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBjb2xvciBmcm9tICdjb2xvcic7XG5pbXBvcnQgeyBSYWRpb0J1dHRvbkNvbnRleHQgfSBmcm9tICcuL1JhZGlvQnV0dG9uR3JvdXAnO1xuaW1wb3J0IEljb24gZnJvbSAnLi9JY29uJztcbmltcG9ydCBUb3VjaGFibGVSaXBwbGUgZnJvbSAnLi9Ub3VjaGFibGVSaXBwbGUnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCB0eXBlIHsgVGhlbWUsICRSZW1vdmVDaGlsZHJlbiB9IGZyb20gJy4uL3R5cGVzJztcblxudHlwZSBQcm9wcyA9ICRSZW1vdmVDaGlsZHJlbjx0eXBlb2YgVG91Y2hhYmxlUmlwcGxlPiAmIHt8XG4gIC8qKlxuICAgKiBWYWx1ZSBvZiB0aGUgcmFkaW8gYnV0dG9uXG4gICAqL1xuICB2YWx1ZTogc3RyaW5nLFxuICAvKipcbiAgICogU3RhdHVzIG9mIHJhZGlvIGJ1dHRvbi5cbiAgICovXG4gIHN0YXR1cz86ICdjaGVja2VkJyB8ICd1bmNoZWNrZWQnLFxuICAvKipcbiAgICogV2hldGhlciByYWRpbyBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbixcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gcHJlc3MuXG4gICAqL1xuICBvblByZXNzPzogKCkgPT4gbWl4ZWQsXG4gIC8qKlxuICAgKiBDdXN0b20gY29sb3IgZm9yIHJhZGlvLlxuICAgKi9cbiAgY29sb3I/OiBzdHJpbmcsXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHRoZW1lOiBUaGVtZSxcbnx9O1xuXG4vKipcbiAqIFJhZGlvIGJ1dHRvbnMgYWxsb3cgdGhlIHNlbGVjdGlvbiBhIHNpbmdsZSBvcHRpb24gZnJvbSBhIHNldC5cbiAqIFRoaXMgY29tcG9uZW50IGZvbGxvd3MgcGxhdGZvcm0gZ3VpZGVsaW5lcyBmb3IgaU9TLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvcmFkaW8tZW5hYmxlZC5pb3MucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5FbmFibGVkPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL3JhZGlvLWRpc2FibGVkLmlvcy5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkRpc2FibGVkPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqIDwvZGl2PlxuICovXG5jbGFzcyBSYWRpb0J1dHRvbklPUyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnUmFkaW9CdXR0b24uSU9TJztcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSYWRpb0J1dHRvbkNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRpc2FibGVkLCBvblByZXNzLCB0aGVtZSwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICAgIGNvbnN0IGNoZWNrZWRDb2xvciA9IGRpc2FibGVkXG4gICAgICAgICAgICA/IHRoZW1lLmNvbG9ycy5kaXNhYmxlZFxuICAgICAgICAgICAgOiB0aGlzLnByb3BzLmNvbG9yIHx8IHRoZW1lLmNvbG9ycy5hY2NlbnQ7XG5cbiAgICAgICAgICBsZXQgcmlwcGxlQ29sb3I7XG5cbiAgICAgICAgICBjb25zdCBjaGVja2VkID0gY29udGV4dFxuICAgICAgICAgICAgPyBjb250ZXh0LnZhbHVlID09PSB0aGlzLnByb3BzLnZhbHVlXG4gICAgICAgICAgICA6IHRoaXMucHJvcHMuc3RhdHVzID09PSAnY2hlY2tlZCc7XG5cbiAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJpcHBsZUNvbG9yID0gY29sb3IodGhlbWUuY29sb3JzLnRleHQpXG4gICAgICAgICAgICAgIC5hbHBoYSgwLjE2KVxuICAgICAgICAgICAgICAucmdiKClcbiAgICAgICAgICAgICAgLnN0cmluZygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByaXBwbGVDb2xvciA9IGNvbG9yKGNoZWNrZWRDb2xvcilcbiAgICAgICAgICAgICAgLmZhZGUoMC4zMilcbiAgICAgICAgICAgICAgLnJnYigpXG4gICAgICAgICAgICAgIC5zdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUb3VjaGFibGVSaXBwbGVcbiAgICAgICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgICAgICAgIGJvcmRlcmxlc3NcbiAgICAgICAgICAgICAgcmlwcGxlQ29sb3I9e3JpcHBsZUNvbG9yfVxuICAgICAgICAgICAgICBvblByZXNzPXtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZFxuICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgIDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgJiYgY29udGV4dC5vblZhbHVlQ2hhbmdlKHRoaXMucHJvcHMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgIG9uUHJlc3MgJiYgb25QcmVzcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eVRyYWl0cz17ZGlzYWJsZWQgPyBbJ2J1dHRvbicsICdkaXNhYmxlZCddIDogJ2J1dHRvbid9XG4gICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlPXtcbiAgICAgICAgICAgICAgICBjaGVja2VkID8gJ3JhZGlvYnV0dG9uX2NoZWNrZWQnIDogJ3JhZGlvYnV0dG9uX3VuY2hlY2tlZCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZXM9e2Rpc2FibGVkID8gWydkaXNhYmxlZCddIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbj1cInBvbGl0ZVwiXG4gICAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17eyBvcGFjaXR5OiBjaGVja2VkID8gMSA6IDAgfX0+XG4gICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgIGFsbG93Rm9udFNjYWxpbmc9e2ZhbHNlfVxuICAgICAgICAgICAgICAgICAgc291cmNlPVwiZG9uZVwiXG4gICAgICAgICAgICAgICAgICBzaXplPXsyNH1cbiAgICAgICAgICAgICAgICAgIGNvbG9yPXtjaGVja2VkQ29sb3J9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgPC9Ub3VjaGFibGVSaXBwbGU+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvUmFkaW9CdXR0b25Db250ZXh0LkNvbnN1bWVyPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBib3JkZXJSYWRpdXM6IDE4LFxuICAgIHBhZGRpbmc6IDYsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFJhZGlvQnV0dG9uSU9TKTtcbiJdfQ==