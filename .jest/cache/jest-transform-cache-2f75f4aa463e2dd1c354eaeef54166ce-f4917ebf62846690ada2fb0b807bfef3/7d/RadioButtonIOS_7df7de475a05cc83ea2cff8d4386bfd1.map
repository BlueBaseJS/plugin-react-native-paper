{"version":3,"sources":["RadioButtonIOS.js"],"names":["RadioButtonIOS","context","props","disabled","onPress","theme","rest","checkedColor","colors","color","accent","rippleColor","checked","value","status","text","alpha","rgb","string","fade","undefined","onValueChange","styles","container","opacity","React","Component","StyleSheet","create","borderRadius","padding"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;IA6CMA,c;;;;;;;;;;6BAGK;AAAA;;AACP,aACE,oBAAC,oCAAD,CAAoB,QAApB,QACG,UAAAC,OAAO,EAAI;AAAA,0BACoC,KAAI,CAACC,KADzC;AAAA,YACFC,QADE,eACFA,QADE;AAAA,YACQC,OADR,eACQA,OADR;AAAA,YACiBC,KADjB,eACiBA,KADjB;AAAA,YAC2BC,IAD3B;AAGV,YAAMC,YAAY,GAAGJ,QAAQ,GACzBE,KAAK,CAACG,MAAN,CAAaL,QADY,GAEzB,KAAI,CAACD,KAAL,CAAWO,KAAX,IAAoBJ,KAAK,CAACG,MAAN,CAAaE,MAFrC;AAIA,YAAIC,WAAJ;AAEA,YAAMC,OAAO,GAAGX,OAAO,GACnBA,OAAO,CAACY,KAAR,KAAkB,KAAI,CAACX,KAAL,CAAWW,KADV,GAEnB,KAAI,CAACX,KAAL,CAAWY,MAAX,KAAsB,SAF1B;;AAIA,YAAIX,QAAJ,EAAc;AACZQ,UAAAA,WAAW,GAAG,oBAAMN,KAAK,CAACG,MAAN,CAAaO,IAAnB,EACXC,KADW,CACL,IADK,EAEXC,GAFW,GAGXC,MAHW,EAAd;AAID,SALD,MAKO;AACLP,UAAAA,WAAW,GAAG,oBAAMJ,YAAN,EACXY,IADW,CACN,IADM,EAEXF,GAFW,GAGXC,MAHW,EAAd;AAID;;AACD,eACE,oBAAC,wBAAD,6BACMZ,IADN;AAEE,UAAA,UAAU,MAFZ;AAGE,UAAA,WAAW,EAAEK,WAHf;AAIE,UAAA,OAAO,EACLR,QAAQ,GACJiB,SADI,GAEJ,YAAM;AACJnB,YAAAA,OAAO,IAAIA,OAAO,CAACoB,aAAR,CAAsB,KAAI,CAACnB,KAAL,CAAWW,KAAjC,CAAX;AACAT,YAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD,WAVT;AAYE,UAAA,mBAAmB,EAAED,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAZ3D;AAaE,UAAA,0BAA0B,EACxBS,OAAO,GAAG,qBAAH,GAA2B,uBAdtC;AAgBE,UAAA,iBAAiB,EAAC,QAhBpB;AAiBE,UAAA,mBAAmB,EAAET,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkBiB,SAjBjD;AAkBE,UAAA,uBAAuB,EAAC,QAlB1B;AAmBE,UAAA,KAAK,EAAEE,MAAM,CAACC;AAnBhB,YAqBE,oBAAC,iBAAD;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,OAAO,EAAEZ,OAAO,GAAG,CAAH,GAAO;AAAzB;AAAb,WACE,oBAAC,aAAD;AACE,UAAA,gBAAgB,EAAE,KADpB;AAEE,UAAA,MAAM,EAAC,MAFT;AAGE,UAAA,IAAI,EAAE,EAHR;AAIE,UAAA,KAAK,EAAEL;AAJT,UADF,CArBF,CADF;AAgCD,OAzDH,CADF;AA6DD;;;EAjE0BkB,KAAK,CAACC,S;;8BAA7B1B,c,iBACiB,iB;;AAmEvB,IAAMsB,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;;eAOe,wBAAU9B,cAAV,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonIOS extends React.Component<Props> {\n  static displayName = 'RadioButton.IOS';\n\n  render() {\n    return (\n      <RadioButtonContext.Consumer>\n        {context => {\n          const { disabled, onPress, theme, ...rest } = this.props;\n\n          const checkedColor = disabled\n            ? theme.colors.disabled\n            : this.props.color || theme.colors.accent;\n\n          let rippleColor;\n\n          const checked = context\n            ? context.value === this.props.value\n            : this.props.status === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n          }\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      context && context.onValueChange(this.props.value);\n                      onPress && onPress();\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : undefined}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <View style={{ opacity: checked ? 1 : 0 }}>\n                <Icon\n                  allowFontScaling={false}\n                  source=\"done\"\n                  size={24}\n                  color={checkedColor}\n                />\n              </View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n"]}