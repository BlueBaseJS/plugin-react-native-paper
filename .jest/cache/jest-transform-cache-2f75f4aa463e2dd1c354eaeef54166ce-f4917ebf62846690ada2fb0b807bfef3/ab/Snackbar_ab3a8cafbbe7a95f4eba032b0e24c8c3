3a07fe73d305bed3d61a387cca4091b4
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Button = _interopRequireDefault(require("./Button"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _theming = require("../core/theming");

var _colors = require("../styles/colors");

var DURATION_SHORT = 4000;
var DURATION_MEDIUM = 7000;
var DURATION_LONG = 10000;

var Snackbar = function (_React$Component) {
  (0, _inherits2.default)(Snackbar, _React$Component);

  function Snackbar() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Snackbar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Snackbar)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      opacity: new _reactNative.Animated.Value(0.0),
      hidden: !_this.props.visible
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_toggle", function () {
      if (_this.props.visible) {
        _this._show();
      } else {
        _this._hide();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_show", function () {
      clearTimeout(_this._hideTimeout);

      _this.setState({
        hidden: false
      });

      _reactNative.Animated.timing(_this.state.opacity, {
        toValue: 1,
        duration: 200,
        useNativeDriver: true
      }).start(function (_ref) {
        var finished = _ref.finished;

        if (finished) {
          var duration = _this.props.duration;
          var isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;

          if (finished && !isInfinity) {
            _this._hideTimeout = setTimeout(_this.props.onDismiss, duration);
          }
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_hide", function () {
      clearTimeout(_this._hideTimeout);

      _reactNative.Animated.timing(_this.state.opacity, {
        toValue: 0,
        duration: 100,
        useNativeDriver: true
      }).start(function (_ref2) {
        var finished = _ref2.finished;

        if (finished) {
          _this.setState({
            hidden: true
          });
        }
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Snackbar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.visible) {
        this._show();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        this._toggle();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this._hideTimeout);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          visible = _this$props.visible,
          action = _this$props.action,
          onDismiss = _this$props.onDismiss,
          theme = _this$props.theme,
          style = _this$props.style;
      var colors = theme.colors,
          roundness = theme.roundness;

      if (this.state.hidden) {
        return null;
      }

      return React.createElement(_reactNative.SafeAreaView, {
        pointerEvents: "box-none",
        style: styles.wrapper
      }, React.createElement(_Surface.default, {
        pointerEvents: "box-none",
        accessibilityLiveRegion: "polite",
        style: [styles.container, {
          borderRadius: roundness,
          opacity: this.state.opacity,
          transform: [{
            scale: visible ? this.state.opacity.interpolate({
              inputRange: [0, 1],
              outputRange: [0.9, 1]
            }) : 1
          }]
        }, style]
      }, React.createElement(_Text.default, {
        style: [styles.content, {
          marginRight: action ? 0 : 16
        }]
      }, children), action ? React.createElement(_Button.default, {
        accessibilityLabel: action.accessibilityLabel,
        onPress: function onPress() {
          action.onPress();
          onDismiss();
        },
        style: styles.button,
        color: colors.accent,
        compact: true,
        mode: "text"
      }, action.label.toUpperCase()) : null));
    }
  }]);
  return Snackbar;
}(React.Component);

(0, _defineProperty2.default)(Snackbar, "DURATION_SHORT", DURATION_SHORT);
(0, _defineProperty2.default)(Snackbar, "DURATION_MEDIUM", DURATION_MEDIUM);
(0, _defineProperty2.default)(Snackbar, "DURATION_LONG", DURATION_LONG);
(0, _defineProperty2.default)(Snackbar, "defaultProps", {
  duration: DURATION_MEDIUM
});

var styles = _reactNative.StyleSheet.create({
  wrapper: {
    position: 'absolute',
    bottom: 0,
    width: '100%'
  },
  container: {
    elevation: 6,
    backgroundColor: '#323232',
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    margin: 8,
    borderRadius: 4
  },
  content: {
    color: _colors.white,
    marginLeft: 16,
    marginVertical: 14,
    flexWrap: 'wrap',
    flex: 1
  },
  button: {
    marginHorizontal: 8,
    marginVertical: 6
  }
});

var _default = (0, _theming.withTheme)(Snackbar);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,