d438efcf988e7f8ddec3d958337c21f5
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

var Modal = function (_React$Component) {
  (0, _inherits2.default)(Modal, _React$Component);

  function Modal() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Modal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Modal)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      opacity: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
      rendered: _this.props.visible
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleBack", function () {
      if (_this.props.dismissable) {
        _this._hideModal();
      }

      return true;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_showModal", function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);

      _reactNative.BackHandler.addEventListener('hardwareBackPress', _this._handleBack);

      _reactNative.Animated.timing(_this.state.opacity, {
        toValue: 1,
        duration: 280,
        easing: _reactNative.Easing.ease,
        useNativeDriver: true
      }).start();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_hideModal", function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this._handleBack);

      _reactNative.Animated.timing(_this.state.opacity, {
        toValue: 0,
        duration: 280,
        easing: _reactNative.Easing.ease,
        useNativeDriver: true
      }).start(function (_ref) {
        var finished = _ref.finished;

        if (!finished) {
          return;
        }

        if (_this.props.visible && _this.props.onDismiss) {
          _this.props.onDismiss();
        }

        if (_this.props.visible) {
          _this._showModal();
        } else {
          _this.setState({
            rendered: false
          });
        }
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        if (this.props.visible) {
          this._showModal();
        } else {
          this._hideModal();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', this._handleBack);
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.state.rendered) return null;
      var _this$props = this.props,
          children = _this$props.children,
          dismissable = _this$props.dismissable,
          theme = _this$props.theme,
          contentContainerStyle = _this$props.contentContainerStyle;
      var colors = theme.colors;
      return React.createElement(_reactNative.Animated.View, {
        accessibilityViewIsModal: true,
        accessibilityLiveRegion: "polite",
        style: _reactNative.StyleSheet.absoluteFill
      }, React.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: dismissable ? this._hideModal : undefined
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.backdrop, {
          backgroundColor: colors.backdrop,
          opacity: this.state.opacity
        }]
      })), React.createElement(_reactNative.View, {
        pointerEvents: "box-none",
        style: styles.wrapper
      }, React.createElement(_Surface.default, {
        style: [{
          opacity: this.state.opacity
        }, styles.content, contentContainerStyle]
      }, children)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.visible && !prevState.rendered) {
        return {
          rendered: true
        };
      }

      return null;
    }
  }]);
  return Modal;
}(React.Component);

(0, _defineProperty2.default)(Modal, "defaultProps", {
  dismissable: true,
  visible: false
});
(0, _reactLifecyclesCompat.polyfill)(Modal);

var _default = (0, _theming.withTheme)(Modal);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  backdrop: {
    flex: 1
  },
  wrapper: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    justifyContent: 'center'
  }),
  content: {
    backgroundColor: 'transparent',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1vZGFsLmpzIl0sIm5hbWVzIjpbIk1vZGFsIiwib3BhY2l0eSIsIkFuaW1hdGVkIiwiVmFsdWUiLCJwcm9wcyIsInZpc2libGUiLCJyZW5kZXJlZCIsImRpc21pc3NhYmxlIiwiX2hpZGVNb2RhbCIsIkJhY2tIYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9oYW5kbGVCYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRpbWluZyIsInN0YXRlIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwiZWFzaW5nIiwiRWFzaW5nIiwiZWFzZSIsInVzZU5hdGl2ZURyaXZlciIsInN0YXJ0IiwiZmluaXNoZWQiLCJvbkRpc21pc3MiLCJfc2hvd01vZGFsIiwic2V0U3RhdGUiLCJwcmV2UHJvcHMiLCJjaGlsZHJlbiIsInRoZW1lIiwiY29udGVudENvbnRhaW5lclN0eWxlIiwiY29sb3JzIiwiU3R5bGVTaGVldCIsImFic29sdXRlRmlsbCIsInVuZGVmaW5lZCIsInN0eWxlcyIsImJhY2tkcm9wIiwiYmFja2dyb3VuZENvbG9yIiwid3JhcHBlciIsImNvbnRlbnQiLCJuZXh0UHJvcHMiLCJwcmV2U3RhdGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNyZWF0ZSIsImZsZXgiLCJhYnNvbHV0ZUZpbGxPYmplY3QiLCJqdXN0aWZ5Q29udGVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQVFBOztBQUNBOztBQUNBOztJQXdFTUEsSzs7Ozs7Ozs7Ozs7Ozs7O3dGQWdCSTtBQUNOQyxNQUFBQSxPQUFPLEVBQUUsSUFBSUMsc0JBQVNDLEtBQWIsQ0FBbUIsTUFBS0MsS0FBTCxDQUFXQyxPQUFYLEdBQXFCLENBQXJCLEdBQXlCLENBQTVDLENBREg7QUFFTkMsTUFBQUEsUUFBUSxFQUFFLE1BQUtGLEtBQUwsQ0FBV0M7QUFGZixLOzhGQWVNLFlBQU07QUFDbEIsVUFBSSxNQUFLRCxLQUFMLENBQVdHLFdBQWYsRUFBNEI7QUFDMUIsY0FBS0MsVUFBTDtBQUNEOztBQUNELGFBQU8sSUFBUDtBQUNELEs7NkZBRVksWUFBTTtBQUNqQkMsK0JBQVlDLG1CQUFaLENBQWdDLG1CQUFoQyxFQUFxRCxNQUFLQyxXQUExRDs7QUFDQUYsK0JBQVlHLGdCQUFaLENBQTZCLG1CQUE3QixFQUFrRCxNQUFLRCxXQUF2RDs7QUFDQVQsNEJBQVNXLE1BQVQsQ0FBZ0IsTUFBS0MsS0FBTCxDQUFXYixPQUEzQixFQUFvQztBQUNsQ2MsUUFBQUEsT0FBTyxFQUFFLENBRHlCO0FBRWxDQyxRQUFBQSxRQUFRLEVBQUUsR0FGd0I7QUFHbENDLFFBQUFBLE1BQU0sRUFBRUMsb0JBQU9DLElBSG1CO0FBSWxDQyxRQUFBQSxlQUFlLEVBQUU7QUFKaUIsT0FBcEMsRUFLR0MsS0FMSDtBQU1ELEs7NkZBRVksWUFBTTtBQUNqQlosK0JBQVlDLG1CQUFaLENBQWdDLG1CQUFoQyxFQUFxRCxNQUFLQyxXQUExRDs7QUFDQVQsNEJBQVNXLE1BQVQsQ0FBZ0IsTUFBS0MsS0FBTCxDQUFXYixPQUEzQixFQUFvQztBQUNsQ2MsUUFBQUEsT0FBTyxFQUFFLENBRHlCO0FBRWxDQyxRQUFBQSxRQUFRLEVBQUUsR0FGd0I7QUFHbENDLFFBQUFBLE1BQU0sRUFBRUMsb0JBQU9DLElBSG1CO0FBSWxDQyxRQUFBQSxlQUFlLEVBQUU7QUFKaUIsT0FBcEMsRUFLR0MsS0FMSCxDQUtTLGdCQUFrQjtBQUFBLFlBQWZDLFFBQWUsUUFBZkEsUUFBZTs7QUFDekIsWUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDYjtBQUNEOztBQUNELFlBQUksTUFBS2xCLEtBQUwsQ0FBV0MsT0FBWCxJQUFzQixNQUFLRCxLQUFMLENBQVdtQixTQUFyQyxFQUFnRDtBQUM5QyxnQkFBS25CLEtBQUwsQ0FBV21CLFNBQVg7QUFDRDs7QUFDRCxZQUFJLE1BQUtuQixLQUFMLENBQVdDLE9BQWYsRUFBd0I7QUFDdEIsZ0JBQUttQixVQUFMO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZ0JBQUtDLFFBQUwsQ0FBYztBQUNabkIsWUFBQUEsUUFBUSxFQUFFO0FBREUsV0FBZDtBQUdEO0FBQ0YsT0FuQkQ7QUFvQkQsSzs7Ozs7O3VDQWxEa0JvQixTLEVBQWtCO0FBQ25DLFVBQUlBLFNBQVMsQ0FBQ3JCLE9BQVYsS0FBc0IsS0FBS0QsS0FBTCxDQUFXQyxPQUFyQyxFQUE4QztBQUM1QyxZQUFJLEtBQUtELEtBQUwsQ0FBV0MsT0FBZixFQUF3QjtBQUN0QixlQUFLbUIsVUFBTDtBQUNELFNBRkQsTUFFTztBQUNMLGVBQUtoQixVQUFMO0FBQ0Q7QUFDRjtBQUNGOzs7MkNBNENzQjtBQUNyQkMsK0JBQVlDLG1CQUFaLENBQWdDLG1CQUFoQyxFQUFxRCxLQUFLQyxXQUExRDtBQUNEOzs7NkJBRVE7QUFDUCxVQUFJLENBQUMsS0FBS0csS0FBTCxDQUFXUixRQUFoQixFQUEwQixPQUFPLElBQVA7QUFEbkIsd0JBR3lELEtBQUtGLEtBSDlEO0FBQUEsVUFHQ3VCLFFBSEQsZUFHQ0EsUUFIRDtBQUFBLFVBR1dwQixXQUhYLGVBR1dBLFdBSFg7QUFBQSxVQUd3QnFCLEtBSHhCLGVBR3dCQSxLQUh4QjtBQUFBLFVBRytCQyxxQkFIL0IsZUFHK0JBLHFCQUgvQjtBQUFBLFVBSUNDLE1BSkQsR0FJWUYsS0FKWixDQUlDRSxNQUpEO0FBS1AsYUFDRSxvQkFBQyxxQkFBRCxDQUFVLElBQVY7QUFDRSxRQUFBLHdCQUF3QixNQUQxQjtBQUVFLFFBQUEsdUJBQXVCLEVBQUMsUUFGMUI7QUFHRSxRQUFBLEtBQUssRUFBRUMsd0JBQVdDO0FBSHBCLFNBS0Usb0JBQUMscUNBQUQ7QUFDRSxRQUFBLE9BQU8sRUFBRXpCLFdBQVcsR0FBRyxLQUFLQyxVQUFSLEdBQXFCeUI7QUFEM0MsU0FHRSxvQkFBQyxxQkFBRCxDQUFVLElBQVY7QUFDRSxRQUFBLEtBQUssRUFBRSxDQUNMQyxNQUFNLENBQUNDLFFBREYsRUFFTDtBQUFFQyxVQUFBQSxlQUFlLEVBQUVOLE1BQU0sQ0FBQ0ssUUFBMUI7QUFBb0NsQyxVQUFBQSxPQUFPLEVBQUUsS0FBS2EsS0FBTCxDQUFXYjtBQUF4RCxTQUZLO0FBRFQsUUFIRixDQUxGLEVBZUUsb0JBQUMsaUJBQUQ7QUFBTSxRQUFBLGFBQWEsRUFBQyxVQUFwQjtBQUErQixRQUFBLEtBQUssRUFBRWlDLE1BQU0sQ0FBQ0c7QUFBN0MsU0FDRSxvQkFBQyxnQkFBRDtBQUNFLFFBQUEsS0FBSyxFQUFFLENBQ0w7QUFBRXBDLFVBQUFBLE9BQU8sRUFBRSxLQUFLYSxLQUFMLENBQVdiO0FBQXRCLFNBREssRUFFTGlDLE1BQU0sQ0FBQ0ksT0FGRixFQUdMVCxxQkFISztBQURULFNBT0dGLFFBUEgsQ0FERixDQWZGLENBREY7QUE2QkQ7Ozs2Q0F6RytCWSxTLEVBQWtCQyxTLEVBQWtCO0FBQ2xFLFVBQUlELFNBQVMsQ0FBQ2xDLE9BQVYsSUFBcUIsQ0FBQ21DLFNBQVMsQ0FBQ2xDLFFBQXBDLEVBQThDO0FBQzVDLGVBQU87QUFDTEEsVUFBQUEsUUFBUSxFQUFFO0FBREwsU0FBUDtBQUdEOztBQUVELGFBQU8sSUFBUDtBQUNEOzs7RUFkaUJtQyxLQUFLLENBQUNDLFM7OzhCQUFwQjFDLEssa0JBQ2tCO0FBQ3BCTyxFQUFBQSxXQUFXLEVBQUUsSUFETztBQUVwQkYsRUFBQUEsT0FBTyxFQUFFO0FBRlcsQztBQWlIeEIscUNBQVNMLEtBQVQ7O2VBRWUsd0JBQVVBLEtBQVYsQzs7OztBQUVmLElBQU1rQyxNQUFNLEdBQUdILHdCQUFXWSxNQUFYLENBQWtCO0FBQy9CUixFQUFBQSxRQUFRLEVBQUU7QUFDUlMsSUFBQUEsSUFBSSxFQUFFO0FBREUsR0FEcUI7QUFJL0JQLEVBQUFBLE9BQU8sa0NBQ0ZOLHdCQUFXYyxrQkFEVDtBQUVMQyxJQUFBQSxjQUFjLEVBQUU7QUFGWCxJQUp3QjtBQVEvQlIsRUFBQUEsT0FBTyxFQUFFO0FBQ1BGLElBQUFBLGVBQWUsRUFBRSxhQURWO0FBRVBVLElBQUFBLGNBQWMsRUFBRTtBQUZUO0FBUnNCLENBQWxCLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBBbmltYXRlZCxcbiAgVmlldyxcbiAgRWFzaW5nLFxuICBTdHlsZVNoZWV0LFxuICBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2ssXG4gIEJhY2tIYW5kbGVyLFxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgcG9seWZpbGwgfSBmcm9tICdyZWFjdC1saWZlY3ljbGVzLWNvbXBhdCc7XG5pbXBvcnQgU3VyZmFjZSBmcm9tICcuL1N1cmZhY2UnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCB0eXBlIHsgVGhlbWUgfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgUHJvcHMgPSB7fFxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGNsaWNraW5nIG91dHNpZGUgdGhlIG1vZGFsIGRpc21pc3MgaXQuXG4gICAqL1xuICBkaXNtaXNzYWJsZT86IGJvb2xlYW4sXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGRpc21pc3NlcyB0aGUgbW9kYWwuXG4gICAqL1xuICBvbkRpc21pc3M/OiAoKSA9PiBtaXhlZCxcbiAgLyoqXG4gICAqIERldGVybWluZXMgV2hldGhlciB0aGUgbW9kYWwgaXMgdmlzaWJsZS5cbiAgICovXG4gIHZpc2libGU6IGJvb2xlYW4sXG4gIC8qKlxuICAgKiBDb250ZW50IG9mIHRoZSBgTW9kYWxgLlxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG4gIC8qKlxuICAgKiBTdHlsZSBmb3IgdGhlIGNvbnRlbnQgb2YgdGhlIG1vZGFsXG4gICAqL1xuICBjb250ZW50Q29udGFpbmVyU3R5bGU/OiBhbnksXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHRoZW1lOiBUaGVtZSxcbnx9O1xuXG50eXBlIFN0YXRlID0ge1xuICBvcGFjaXR5OiBBbmltYXRlZC5WYWx1ZSxcbiAgcmVuZGVyZWQ6IGJvb2xlYW4sXG59O1xuXG4vKipcbiAqIFRoZSBNb2RhbCBjb21wb25lbnQgaXMgYSBzaW1wbGUgd2F5IHRvIHByZXNlbnQgY29udGVudCBhYm92ZSBhbiBlbmNsb3Npbmcgdmlldy5cbiAqIFRvIHJlbmRlciB0aGUgYE1vZGFsYCBhYm92ZSBvdGhlciBjb21wb25lbnRzLCB5b3UnbGwgbmVlZCB0byB3cmFwIGl0IHdpdGggdGhlIFtgUG9ydGFsYF0ocG9ydGFsLmh0bWwpIGNvbXBvbmVudC5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IE1vZGFsLCBQb3J0YWwsIFRleHQsIEJ1dHRvbiwgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAqICAgc3RhdGUgPSB7XG4gKiAgICAgdmlzaWJsZTogZmFsc2UsXG4gKiAgIH07XG4gKlxuICogICBfc2hvd01vZGFsID0gKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IHRydWUgfSk7XG4gKiAgIF9oaWRlTW9kYWwgPSAoKSA9PiB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogZmFsc2UgfSk7XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgY29uc3QgeyB2aXNpYmxlIH0gPSB0aGlzLnN0YXRlO1xuICogICAgIHJldHVybiAoXG4gKiAgICAgICA8UG9ydGFsPlxuICogICAgICAgICA8TW9kYWwgdmlzaWJsZT17dmlzaWJsZX0gb25EaXNtaXNzPXt0aGlzLl9oaWRlTW9kYWx9PlxuICogICAgICAgICAgIDxUZXh0PkV4YW1wbGUgTW9kYWw8L1RleHQ+XG4gKiAgICAgICAgIDwvTW9kYWw+XG4gKiAgICAgICAgIDxCdXR0b25cbiAqICAgICAgICAgICBzdHlsZT17eyBtYXJnaW5Ub3A6IDMwIH19XG4gKiAgICAgICAgICAgb25QcmVzcz17dGhpcy5fc2hvd01vZGFsfVxuICogICAgICAgICA+XG4gKiAgICAgICAgICAgU2hvd1xuICogICAgICAgICA8L0J1dHRvbj5cbiAqICAgICAgIDwvUG9ydGFsPlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5cbmNsYXNzIE1vZGFsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgIHZpc2libGU6IGZhbHNlLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzOiBQcm9wcywgcHJldlN0YXRlOiBTdGF0ZSkge1xuICAgIGlmIChuZXh0UHJvcHMudmlzaWJsZSAmJiAhcHJldlN0YXRlLnJlbmRlcmVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXJlZDogdHJ1ZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0ZSA9IHtcbiAgICBvcGFjaXR5OiBuZXcgQW5pbWF0ZWQuVmFsdWUodGhpcy5wcm9wcy52aXNpYmxlID8gMSA6IDApLFxuICAgIHJlbmRlcmVkOiB0aGlzLnByb3BzLnZpc2libGUsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHMpIHtcbiAgICBpZiAocHJldlByb3BzLnZpc2libGUgIT09IHRoaXMucHJvcHMudmlzaWJsZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmlzaWJsZSkge1xuICAgICAgICB0aGlzLl9zaG93TW9kYWwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVCYWNrID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc21pc3NhYmxlKSB7XG4gICAgICB0aGlzLl9oaWRlTW9kYWwoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Nob3dNb2RhbCA9ICgpID0+IHtcbiAgICBCYWNrSGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXJkd2FyZUJhY2tQcmVzcycsIHRoaXMuX2hhbmRsZUJhY2spO1xuICAgIEJhY2tIYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2hhcmR3YXJlQmFja1ByZXNzJywgdGhpcy5faGFuZGxlQmFjayk7XG4gICAgQW5pbWF0ZWQudGltaW5nKHRoaXMuc3RhdGUub3BhY2l0eSwge1xuICAgICAgdG9WYWx1ZTogMSxcbiAgICAgIGR1cmF0aW9uOiAyODAsXG4gICAgICBlYXNpbmc6IEVhc2luZy5lYXNlLFxuICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxuICAgIH0pLnN0YXJ0KCk7XG4gIH07XG5cbiAgX2hpZGVNb2RhbCA9ICgpID0+IHtcbiAgICBCYWNrSGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXJkd2FyZUJhY2tQcmVzcycsIHRoaXMuX2hhbmRsZUJhY2spO1xuICAgIEFuaW1hdGVkLnRpbWluZyh0aGlzLnN0YXRlLm9wYWNpdHksIHtcbiAgICAgIHRvVmFsdWU6IDAsXG4gICAgICBkdXJhdGlvbjogMjgwLFxuICAgICAgZWFzaW5nOiBFYXNpbmcuZWFzZSxcbiAgICAgIHVzZU5hdGl2ZURyaXZlcjogdHJ1ZSxcbiAgICB9KS5zdGFydCgoeyBmaW5pc2hlZCB9KSA9PiB7XG4gICAgICBpZiAoIWZpbmlzaGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLnZpc2libGUgJiYgdGhpcy5wcm9wcy5vbkRpc21pc3MpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkRpc21pc3MoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLnZpc2libGUpIHtcbiAgICAgICAgdGhpcy5fc2hvd01vZGFsKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICByZW5kZXJlZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIEJhY2tIYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhcmR3YXJlQmFja1ByZXNzJywgdGhpcy5faGFuZGxlQmFjayk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnJlbmRlcmVkKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGRpc21pc3NhYmxlLCB0aGVtZSwgY29udGVudENvbnRhaW5lclN0eWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY29sb3JzIH0gPSB0aGVtZTtcbiAgICByZXR1cm4gKFxuICAgICAgPEFuaW1hdGVkLlZpZXdcbiAgICAgICAgYWNjZXNzaWJpbGl0eVZpZXdJc01vZGFsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uPVwicG9saXRlXCJcbiAgICAgICAgc3R5bGU9e1N0eWxlU2hlZXQuYWJzb2x1dGVGaWxsfVxuICAgICAgPlxuICAgICAgICA8VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrXG4gICAgICAgICAgb25QcmVzcz17ZGlzbWlzc2FibGUgPyB0aGlzLl9oaWRlTW9kYWwgOiB1bmRlZmluZWR9XG4gICAgICAgID5cbiAgICAgICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgICAgc3R5bGVzLmJhY2tkcm9wLFxuICAgICAgICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogY29sb3JzLmJhY2tkcm9wLCBvcGFjaXR5OiB0aGlzLnN0YXRlLm9wYWNpdHkgfSxcbiAgICAgICAgICAgIF19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2s+XG4gICAgICAgIDxWaWV3IHBvaW50ZXJFdmVudHM9XCJib3gtbm9uZVwiIHN0eWxlPXtzdHlsZXMud3JhcHBlcn0+XG4gICAgICAgICAgPFN1cmZhY2VcbiAgICAgICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgICAgIHsgb3BhY2l0eTogdGhpcy5zdGF0ZS5vcGFjaXR5IH0sXG4gICAgICAgICAgICAgIHN0eWxlcy5jb250ZW50LFxuICAgICAgICAgICAgICBjb250ZW50Q29udGFpbmVyU3R5bGUsXG4gICAgICAgICAgICBdfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L1N1cmZhY2U+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvQW5pbWF0ZWQuVmlldz5cbiAgICApO1xuICB9XG59XG5cbnBvbHlmaWxsKE1vZGFsKTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKE1vZGFsKTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBiYWNrZHJvcDoge1xuICAgIGZsZXg6IDEsXG4gIH0sXG4gIHdyYXBwZXI6IHtcbiAgICAuLi5TdHlsZVNoZWV0LmFic29sdXRlRmlsbE9iamVjdCxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIH0sXG4gIGNvbnRlbnQ6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB9LFxufSk7XG4iXX0=