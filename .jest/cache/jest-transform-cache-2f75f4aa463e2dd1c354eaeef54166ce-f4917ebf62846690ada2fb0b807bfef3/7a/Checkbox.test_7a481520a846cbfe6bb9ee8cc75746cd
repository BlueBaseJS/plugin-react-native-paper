d0ecb0cf4d47ab4c97948b18ee7032ea
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var Checkbox_1 = require("../Checkbox");

var react_1 = tslib_1.__importDefault(require("react"));

var components_1 = require("@bluebase/components");

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

describe.only('Checkbox', function () {
  it('should set the status to checked when checked is true', function () {
    var component = enzyme_1.mount(react_1.default.createElement(Checkbox_1.Checkbox, {
      checked: true
    }));
    expect(component.childAt(0).prop('status')).toEqual('checked');
  });
  it('should set the status to unchecked when checked is false', function () {
    var component = enzyme_1.mount(react_1.default.createElement(Checkbox_1.Checkbox, {
      checked: false
    }));
    expect(component.childAt(0).prop('status')).toEqual('unchecked');
  });
  it('should set the status to indeterminate when indeterminate flag is true', function () {
    var component = enzyme_1.mount(react_1.default.createElement(Checkbox_1.Checkbox, {
      checked: false,
      indeterminate: true
    }));
    expect(component.childAt(0).prop('status')).toEqual('indeterminate');
  });
  it('should pass the color as is when set to "primary"', function _callee() {
    var BBCheckbox, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            BBCheckbox = components_1.getComponent('Checkbox');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Checkbox: Checkbox_1.Checkbox
              }
            }, react_1.default.createElement(BBCheckbox, {
              color: "primary"
            })));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBCheckbox));

          case 4:
            expect(component.find('TouchableHighlight').last().prop('color')).toEqual('#3f51b5');

          case 5:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should pass the color as is when set to "secondary"', function _callee2() {
    var BBCheckbox, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            BBCheckbox = components_1.getComponent('Checkbox');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Checkbox: Checkbox_1.Checkbox
              }
            }, react_1.default.createElement(BBCheckbox, {
              color: "secondary"
            })));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBCheckbox));

          case 4:
            expect(component.find('TouchableHighlight').last().prop('color')).toEqual('#f50057');

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should pass the color as is when set to "default"', function _callee3() {
    var BBCheckbox, component;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            BBCheckbox = components_1.getComponent('Checkbox');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Checkbox: Checkbox_1.Checkbox
              }
            }, react_1.default.createElement(BBCheckbox, {
              color: "default"
            })));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBCheckbox));

          case 4:
            expect(component.find('TouchableHighlight').last().prop('color')).toEqual('');

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should set the color prop to undefined and create classes for custom colors', function _callee4() {
    var BBCheckbox, component;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            BBCheckbox = components_1.getComponent('Checkbox');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Checkbox: Checkbox_1.Checkbox
              }
            }, react_1.default.createElement(BBCheckbox, {
              color: "red"
            })));
            _context4.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBCheckbox));

          case 4:
            expect(component.find('TouchableHighlight').last().prop('color')).toEqual('red');

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('should set the label component', function _callee5() {
    var BBCheckbox, component;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            BBCheckbox = components_1.getComponent('Checkbox');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Checkbox: Checkbox_1.Checkbox
              }
            }, react_1.default.createElement(BBCheckbox, {
              label: "Foo"
            })));
            _context5.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBCheckbox));

          case 4:
            expect(component.find('Checkbox Text').last().text()).toEqual('Foo');

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,