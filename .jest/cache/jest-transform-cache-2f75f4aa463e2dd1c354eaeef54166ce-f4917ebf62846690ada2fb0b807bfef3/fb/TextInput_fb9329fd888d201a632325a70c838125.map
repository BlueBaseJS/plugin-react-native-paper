{"version":3,"sources":["TextInput.js"],"names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","labeled","Animated","Value","props","value","error","focused","placeholder","labelLayout","measured","width","clearTimeout","_timer","setTimeout","setState","timing","state","toValue","duration","useNativeDriver","Platform","select","ios","default","start","_showPlaceholder","disabled","onFocus","onBlur","editable","onChangeText","e","nativeEvent","layout","prevProps","prevState","_minmizeLabel","_restoreLabel","label","_hidePlaceholder","_showError","_hideError","_root","setNativeProps","isFocused","clear","focus","blur","mode","rest","ref","_handleFocus","_handleBlur","_handleChangeText","_onLayoutAnimatedText","nextProps","React","Component","multiline","render"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, TextInput as NativeTextInput, Platform } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, State } from './types';\nimport type { Theme } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = {|\n  ...React.ElementConfig<typeof NativeTextInput>,\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined',\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean,\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string,\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string,\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean,\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function,\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string,\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string,\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean,\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number,\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => mixed,\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => mixed,\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render: (props: RenderProps) => React.Node,\n  /**\n   * Value of the text input.\n   */\n  value?: string,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <TextInput\n *         label='Email'\n *         value={this.state.text}\n *         onChangeText={text => this.setState({ text })}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  static defaultProps = {\n    mode: 'flat',\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n\n  state = {\n    labeled: new Animated.Value(this.props.value || this.props.error ? 0 : 1),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: this.props.error ? this.props.placeholder : '',\n    value: this.props.value,\n    labelLayout: {\n      measured: false,\n      width: 0,\n    },\n  };\n\n  ref: ?NativeTextInput;\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.focused !== this.state.focused ||\n      prevState.value !== this.state.value ||\n      prevProps.error !== this.props.error\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused || this.props.error) {\n        this._minmizeLabel();\n      } else {\n        this._restoreLabel();\n      }\n    }\n\n    if (\n      prevState.focused !== this.state.focused ||\n      prevProps.label !== this.props.label ||\n      prevProps.error !== this.props.error\n    ) {\n      // Show placeholder text only if the input is focused, or has error, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || this.props.error || !this.props.label) {\n        this._showPlaceholder();\n      } else {\n        this._hidePlaceholder();\n      }\n    }\n\n    if (prevProps.error !== this.props.error) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this._showError();\n      } else {\n        this._hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._timer);\n  }\n\n  _showPlaceholder = () => {\n    clearTimeout(this._timer);\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    this._timer = setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    );\n  };\n\n  _hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  _timer: TimeoutID;\n  _root: ?NativeTextInput;\n\n  _showError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start(this._showPlaceholder);\n  };\n\n  _hideError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  _restoreLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  _minmizeLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  _handleFocus = (...args) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(...args);\n    }\n  };\n\n  _handleBlur = (...args) => {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(...args);\n    }\n  };\n\n  _handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  _onLayoutAnimatedText = e => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        measured: true,\n      },\n    });\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(...args) {\n    return this._root && this._root.setNativeProps(...args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this._root && this._root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this._root && this._root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this._root && this._root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this._root && this._root.blur();\n  }\n\n  render() {\n    const { mode, ...rest } = this.props;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        parentState={this.state}\n        innerRef={ref => {\n          this._root = ref;\n        }}\n        onFocus={this._handleFocus}\n        onBlur={this._handleBlur}\n        onChangeText={this._handleChangeText}\n        onLayoutAnimatedText={this._onLayoutAnimatedText}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        parentState={this.state}\n        innerRef={ref => {\n          this._root = ref;\n        }}\n        onFocus={this._handleFocus}\n        onBlur={this._handleBlur}\n        onChangeText={this._handleChangeText}\n        onLayoutAnimatedText={this._onLayoutAnimatedText}\n      />\n    );\n  }\n}\n\npolyfill(TextInput);\n\nexport default withTheme(TextInput);\n"]}