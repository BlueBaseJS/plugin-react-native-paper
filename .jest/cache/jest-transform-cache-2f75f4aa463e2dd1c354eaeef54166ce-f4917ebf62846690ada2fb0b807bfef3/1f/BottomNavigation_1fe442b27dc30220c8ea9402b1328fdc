f192bc6954fc0e75196e3ebe89c85a39
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactLifecyclesCompat = require("react-lifecycles-compat");

var _reactNativeSafeAreaView = _interopRequireDefault(require("react-native-safe-area-view"));

var _color = _interopRequireDefault(require("color"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Badge = _interopRequireDefault(require("./Badge"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _colors = require("../styles/colors");

var _theming = require("../core/theming");

var AnimatedText = _reactNative.Animated.createAnimatedComponent(_Text.default);

var MIN_RIPPLE_SCALE = 0.001;
var MIN_TAB_WIDTH = 96;
var MAX_TAB_WIDTH = 168;
var BAR_HEIGHT = 56;
var FAR_FAR_AWAY = 9999;
var Touchable = _TouchableRipple.default.supported ? _TouchableRipple.default : function (_ref) {
  var style = _ref.style,
      children = _ref.children,
      borderless = _ref.borderless,
      centered = _ref.centered,
      rippleColor = _ref.rippleColor,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["style", "children", "borderless", "centered", "rippleColor"]);
  return React.createElement(_reactNative.TouchableWithoutFeedback, rest, React.createElement(_reactNative.View, {
    style: style
  }, children));
};

var SceneComponent = function (_React$PureComponent) {
  (0, _inherits2.default)(SceneComponent, _React$PureComponent);

  function SceneComponent() {
    (0, _classCallCheck2.default)(this, SceneComponent);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SceneComponent).apply(this, arguments));
  }

  (0, _createClass2.default)(SceneComponent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          component = _this$props.component,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["component"]);
      return React.createElement(component, rest);
    }
  }]);
  return SceneComponent;
}(React.PureComponent);

var BottomNavigation = function (_React$Component) {
  (0, _inherits2.default)(BottomNavigation, _React$Component);
  (0, _createClass2.default)(BottomNavigation, null, [{
    key: "SceneMap",
    value: function SceneMap(scenes) {
      return function (_ref2) {
        var route = _ref2.route,
            jumpTo = _ref2.jumpTo;
        return React.createElement(SceneComponent, {
          key: route.key,
          component: scenes[route.key],
          route: route,
          jumpTo: jumpTo
        });
      };
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var _nextProps$navigation = nextProps.navigationState,
          index = _nextProps$navigation.index,
          routes = _nextProps$navigation.routes;
      var tabs = routes.map(function (_, i) {
        return prevState.tabs[i] || new _reactNative.Animated.Value(i === index ? 1 : 0);
      });
      var offsets = routes.map(function (_, i) {
        return prevState.offsets[i] || new _reactNative.Animated.Value(i === index ? 0 : 1);
      });
      var nextState = {
        tabs: tabs,
        offsets: offsets
      };

      if (index !== prevState.current) {
        (0, _extends2.default)(nextState, {
          current: index,
          previous: prevState.current,
          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index])
        });
      }

      return nextState;
    }
  }]);

  function BottomNavigation(props) {
    var _this;

    (0, _classCallCheck2.default)(this, BottomNavigation);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BottomNavigation).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleKeyboardShow", function () {
      return _this.setState({
        keyboard: true
      }, function () {
        return _reactNative.Animated.timing(_this.state.visible, {
          toValue: 0,
          duration: 150,
          useNativeDriver: true
        }).start();
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleKeyboardHide", function () {
      return _reactNative.Animated.timing(_this.state.visible, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true
      }).start(function () {
        _this.setState({
          keyboard: false
        });
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_animateToCurrentIndex", function () {
      var shifting = _this._isShifting();

      var _this$props$navigatio = _this.props.navigationState,
          routes = _this$props$navigatio.routes,
          index = _this$props$navigatio.index;

      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);

      _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.ripple, {
        toValue: 1,
        duration: shifting ? 400 : 0,
        useNativeDriver: true
      })].concat((0, _toConsumableArray2.default)(routes.map(function (_, i) {
        return _reactNative.Animated.timing(_this.state.tabs[i], {
          toValue: i === index ? 1 : 0,
          duration: shifting ? 150 : 75,
          useNativeDriver: true
        });
      })))).start(function (_ref3) {
        var finished = _ref3.finished;

        _this.state.tabs.map(function (tab, i) {
          return tab.setValue(i === index ? 1 : 0);
        });

        _this.state.index.setValue(index);

        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);

        if (finished) {
          _this.state.offsets.forEach(function (offset, i) {
            if (i === index) {
              offset.setValue(0);
            } else {
              offset.setValue(1);
            }
          });
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleLayout", function (e) {
      var layout = _this.state.layout;
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          height = _e$nativeEvent$layout.height,
          width = _e$nativeEvent$layout.width;

      if (height === layout.height && width === layout.width) {
        return;
      }

      _this.setState({
        layout: {
          height: height,
          width: width,
          measured: true
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleTabPress", function (index) {
      var _this$props2 = _this.props,
          navigationState = _this$props2.navigationState,
          onTabPress = _this$props2.onTabPress,
          onIndexChange = _this$props2.onIndexChange;

      if (onTabPress) {
        onTabPress({
          route: navigationState.routes[index]
        });
      }

      if (index !== navigationState.index) {
        onIndexChange(index);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_jumpTo", function (key) {
      var index = _this.props.navigationState.routes.findIndex(function (route) {
        return route.key === key;
      });

      _this.props.onIndexChange(index);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_isShifting", function () {
      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;
    });
    var _index = _this.props.navigationState.index;
    _this.state = {
      visible: new _reactNative.Animated.Value(1),
      tabs: [],
      offsets: [],
      index: new _reactNative.Animated.Value(_index),
      ripple: new _reactNative.Animated.Value(MIN_RIPPLE_SCALE),
      touch: new _reactNative.Animated.Value(MIN_RIPPLE_SCALE),
      layout: {
        height: 0,
        width: 0,
        measured: false
      },
      current: _index,
      previous: 0,
      loaded: [_index],
      keyboard: false
    };
    return _this;
  }

  (0, _createClass2.default)(BottomNavigation, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._animateToCurrentIndex();

      if (_reactNative.Platform.OS === 'ios') {
        _reactNative.Keyboard.addListener('keyboardWillShow', this._handleKeyboardShow);

        _reactNative.Keyboard.addListener('keyboardWillHide', this._handleKeyboardHide);
      } else {
        _reactNative.Keyboard.addListener('keyboardDidShow', this._handleKeyboardShow);

        _reactNative.Keyboard.addListener('keyboardDidHide', this._handleKeyboardHide);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      if (prevProps.navigationState.index === this.props.navigationState.index) {
        return;
      }

      this.state.offsets.forEach(function (offset, i) {
        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {
          offset.setValue(0);
        }
      });

      this._animateToCurrentIndex();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (_reactNative.Platform.OS === 'ios') {
        _reactNative.Keyboard.removeListener('keyboardWillShow', this._handleKeyboardShow);

        _reactNative.Keyboard.removeListener('keyboardWillHide', this._handleKeyboardHide);
      } else {
        _reactNative.Keyboard.removeListener('keyboardDidShow', this._handleKeyboardShow);

        _reactNative.Keyboard.removeListener('keyboardDidHide', this._handleKeyboardHide);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props3 = this.props,
          navigationState = _this$props3.navigationState,
          renderScene = _this$props3.renderScene,
          renderIcon = _this$props3.renderIcon,
          renderLabel = _this$props3.renderLabel,
          _this$props3$getLabel = _this$props3.getLabelText,
          getLabelText = _this$props3$getLabel === void 0 ? function (_ref4) {
        var route = _ref4.route;
        return route.title;
      } : _this$props3$getLabel,
          _this$props3$getBadge = _this$props3.getBadge,
          getBadge = _this$props3$getBadge === void 0 ? function (_ref5) {
        var route = _ref5.route;
        return route.badge;
      } : _this$props3$getBadge,
          _this$props3$getColor = _this$props3.getColor,
          getColor = _this$props3$getColor === void 0 ? function (_ref6) {
        var route = _ref6.route;
        return route.color;
      } : _this$props3$getColor,
          _this$props3$getAcces = _this$props3.getAccessibilityLabel,
          getAccessibilityLabel = _this$props3$getAcces === void 0 ? function (_ref7) {
        var route = _ref7.route;
        return route.accessibilityLabel;
      } : _this$props3$getAcces,
          _this$props3$getTestI = _this$props3.getTestID,
          getTestID = _this$props3$getTestI === void 0 ? function (_ref8) {
        var route = _ref8.route;
        return route.testID;
      } : _this$props3$getTestI,
          activeColor = _this$props3.activeColor,
          inactiveColor = _this$props3.inactiveColor,
          keyboardHidesNavigationBar = _this$props3.keyboardHidesNavigationBar,
          barStyle = _this$props3.barStyle,
          labeled = _this$props3.labeled,
          style = _this$props3.style,
          theme = _this$props3.theme;
      var _this$state = this.state,
          layout = _this$state.layout,
          loaded = _this$state.loaded;
      var routes = navigationState.routes;
      var colors = theme.colors;

      var shifting = this._isShifting();

      var _ref9 = _reactNative.StyleSheet.flatten(barStyle) || {},
          _ref9$backgroundColor = _ref9.backgroundColor,
          approxBackgroundColor = _ref9$backgroundColor === void 0 ? colors.primary : _ref9$backgroundColor;

      var backgroundColor = shifting ? this.state.index.interpolate({
        inputRange: routes.map(function (_, i) {
          return i;
        }),
        outputRange: routes.map(function (route) {
          return getColor({
            route: route
          }) || approxBackgroundColor;
        })
      }) : approxBackgroundColor;
      var isDark = !(0, _color.default)(approxBackgroundColor).light();
      var textColor = isDark ? _colors.white : _colors.black;
      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;
      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : (0, _color.default)(textColor).alpha(0.5).rgb().string();
      var touchColor = (0, _color.default)(textColor).alpha(0.12).rgb().string();
      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;
      var tabWidth = Math.min(layout.width * 4 / routes.length, maxTabWidth);
      return React.createElement(_reactNative.View, {
        style: [styles.container, style],
        pointerEvents: layout.measured ? 'auto' : 'none'
      }, React.createElement(_reactNative.View, {
        style: [styles.content, {
          backgroundColor: colors.background
        }]
      }, routes.map(function (route, index) {
        if (!loaded.includes(index)) {
          return null;
        }

        var opacity = _this3.state.tabs[index];

        var top = _this3.state.offsets[index].interpolate({
          inputRange: [0, 1],
          outputRange: [0, FAR_FAR_AWAY]
        });

        var focused = navigationState.index === index;
        return React.createElement(_reactNative.Animated.View, {
          key: route.key,
          pointerEvents: focused ? 'auto' : 'none',
          accessibilityElementsHidden: !focused,
          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
          style: [_reactNative.StyleSheet.absoluteFill, {
            opacity: opacity
          }],
          collapsable: false,
          removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? navigationState.index !== index : true
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.content, {
            top: top
          }]
        }, renderScene({
          route: route,
          jumpTo: _this3._jumpTo
        })));
      })), React.createElement(_Surface.default, {
        style: [styles.bar, keyboardHidesNavigationBar ? {
          transform: [{
            translateY: this.state.visible.interpolate({
              inputRange: [0, 1],
              outputRange: [this.state.layout.height, 0]
            })
          }],
          position: this.state.keyboard ? 'absolute' : null
        } : null, barStyle],
        pointerEvents: keyboardHidesNavigationBar && this.state.keyboard ? 'none' : 'auto',
        onLayout: this._handleLayout
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.barContent, {
          backgroundColor: backgroundColor
        }]
      }, React.createElement(_reactNativeSafeAreaView.default, {
        forceInset: {
          top: 'never',
          bottom: 'always'
        },
        style: [styles.items, {
          maxWidth: maxTabWidth * routes.length
        }]
      }, shifting ? React.createElement(_reactNative.Animated.View, {
        pointerEvents: "none",
        style: [styles.ripple, {
          top: BAR_HEIGHT / 2 - layout.width / 8,
          left: navigationState.index * tabWidth + tabWidth / 2 - layout.width / 8,
          height: layout.width / 4,
          width: layout.width / 4,
          borderRadius: layout.width / 2,
          backgroundColor: getColor({
            route: routes[navigationState.index]
          }),
          transform: [{
            scale: this.state.ripple.interpolate({
              inputRange: [0, 1],
              outputRange: [0, 8]
            })
          }],
          opacity: this.state.ripple.interpolate({
            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],
            outputRange: [0, 0, 1, 1]
          })
        }]
      }) : null, routes.map(function (route, index) {
        var focused = navigationState.index === index;
        var active = _this3.state.tabs[index];
        var scale = labeled && shifting ? active.interpolate({
          inputRange: [0, 1],
          outputRange: [0.5, 1]
        }) : 1;
        var translateY = labeled ? shifting ? active.interpolate({
          inputRange: [0, 1],
          outputRange: [7, 0]
        }) : 0 : 7;
        var activeOpacity = active;
        var inactiveOpacity = active.interpolate({
          inputRange: [0, 1],
          outputRange: [1, 0]
        });
        var badge = getBadge({
          route: route
        });
        return React.createElement(Touchable, {
          key: route.key,
          borderless: true,
          centered: true,
          rippleColor: touchColor,
          onPress: function onPress() {
            return _this3._handleTabPress(index);
          },
          testID: getTestID({
            route: route
          }),
          accessibilityLabel: getAccessibilityLabel({
            route: route
          }),
          accessibilityTraits: focused ? ['button', 'selected'] : 'button',
          accessibilityComponentType: "button",
          accessibilityRole: "button",
          accessibilityStates: ['selected'],
          style: styles.item
        }, React.createElement(_reactNative.View, {
          pointerEvents: "none"
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.iconContainer, {
            transform: [{
              translateY: translateY
            }]
          }]
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.iconWrapper, {
            opacity: activeOpacity
          }]
        }, renderIcon ? renderIcon({
          route: route,
          focused: true,
          color: activeTintColor
        }) : React.createElement(_Icon.default, {
          source: route.icon,
          color: activeTintColor,
          size: 24
        })), React.createElement(_reactNative.Animated.View, {
          style: [styles.iconWrapper, {
            opacity: inactiveOpacity
          }]
        }, renderIcon ? renderIcon({
          route: route,
          focused: false,
          color: inactiveTintColor
        }) : React.createElement(_Icon.default, {
          source: route.icon,
          color: inactiveTintColor,
          size: 24
        })), React.createElement(_reactNative.View, {
          style: [styles.badgeContainer, {
            right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2
          }]
        }, typeof badge === 'boolean' ? React.createElement(_Badge.default, {
          visible: badge,
          size: 8
        }) : React.createElement(_Badge.default, {
          visible: badge != null,
          size: 16
        }, badge))), labeled ? React.createElement(_reactNative.Animated.View, {
          style: [styles.labelContainer, {
            transform: [{
              scale: scale
            }]
          }]
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.labelWrapper, {
            opacity: activeOpacity
          }]
        }, renderLabel ? renderLabel({
          route: route,
          focused: true,
          color: activeTintColor
        }) : React.createElement(AnimatedText, {
          style: [styles.label, {
            color: activeTintColor
          }]
        }, getLabelText({
          route: route
        }))), shifting ? null : React.createElement(_reactNative.Animated.View, {
          style: [styles.labelWrapper, {
            opacity: inactiveOpacity
          }]
        }, renderLabel ? renderLabel({
          route: route,
          focused: false,
          color: inactiveTintColor
        }) : React.createElement(AnimatedText, {
          style: [styles.label, {
            color: inactiveTintColor
          }]
        }, getLabelText({
          route: route
        })))) : React.createElement(_reactNative.View, {
          style: styles.labelContainer
        })));
      })))));
    }
  }]);
  return BottomNavigation;
}(React.Component);

(0, _defineProperty2.default)(BottomNavigation, "defaultProps", {
  labeled: true,
  keyboardHidesNavigationBar: true
});
(0, _reactLifecyclesCompat.polyfill)(BottomNavigation);

var _default = (0, _theming.withTheme)(BottomNavigation);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  content: {
    flex: 1
  },
  bar: {
    left: 0,
    right: 0,
    bottom: 0,
    elevation: 8
  },
  barContent: {
    alignItems: 'center',
    overflow: 'hidden'
  },
  items: {
    flexDirection: 'row',
    width: '100%'
  },
  item: {
    flex: 1,
    paddingVertical: 6
  },
  ripple: {
    position: 'absolute'
  },
  iconContainer: {
    height: 24,
    width: 24,
    marginTop: 2,
    marginHorizontal: 12,
    alignSelf: 'center'
  },
  iconWrapper: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject, {
    alignItems: 'center'
  }),
  labelContainer: {
    height: 16,
    paddingBottom: 2
  },
  labelWrapper: (0, _objectSpread2.default)({}, _reactNative.StyleSheet.absoluteFillObject),
  label: (0, _objectSpread2.default)({
    fontSize: 12,
    textAlign: 'center',
    backgroundColor: 'transparent'
  }, _reactNative.Platform.OS === 'web' ? {
    whiteSpace: 'nowrap'
  } : null),
  badgeContainer: {
    position: 'absolute',
    left: 0,
    top: -2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,