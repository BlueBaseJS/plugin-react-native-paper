ce2274d8dce0b759626ab6e98a785d63
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Icon = _interopRequireDefault(require("../Icon"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var _colors = require("../../styles/colors");

var MenuItem = function (_React$Component) {
  (0, _inherits2.default)(MenuItem, _React$Component);

  function MenuItem() {
    (0, _classCallCheck2.default)(this, MenuItem);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MenuItem).apply(this, arguments));
  }

  (0, _createClass2.default)(MenuItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          title = _this$props.title,
          disabled = _this$props.disabled,
          onPress = _this$props.onPress,
          theme = _this$props.theme,
          style = _this$props.style;
      var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
      var titleColor = disabled ? disabledColor : (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
      var iconColor = disabled ? disabledColor : (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
      return React.createElement(_TouchableRipple.default, {
        style: [styles.container, style],
        onPress: onPress,
        disabled: disabled
      }, React.createElement(_reactNative.View, {
        style: styles.row
      }, icon ? React.createElement(_reactNative.View, {
        style: [styles.item, styles.icon],
        pointerEvents: "box-none"
      }, React.createElement(_Icon.default, {
        source: icon,
        size: 24,
        color: iconColor
      })) : null, React.createElement(_reactNative.View, {
        style: [styles.item, styles.content, icon && styles.widthWithIcon],
        pointerEvents: "none"
      }, React.createElement(_Text.default, {
        numberOfLines: 1,
        style: [styles.title, {
          color: titleColor
        }]
      }, title))));
    }
  }]);
  return MenuItem;
}(React.Component);

(0, _defineProperty2.default)(MenuItem, "displayName", 'Menu.Item');
var minWidth = 112;
var maxWidth = 280;
var iconWidth = 40;

var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 8,
    minWidth: minWidth,
    maxWidth: maxWidth
  },
  row: {
    flexDirection: 'row'
  },
  icon: {
    width: iconWidth
  },
  title: {
    fontSize: 16
  },
  item: {
    margin: 8
  },
  content: {
    justifyContent: 'center',
    minWidth: minWidth - 16,
    maxWidth: maxWidth - 16
  },
  widthWithIcon: {
    maxWidth: maxWidth - (iconWidth + 48)
  }
});

var _default = (0, _theming.withTheme)(MenuItem);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1lbnVJdGVtLmpzIl0sIm5hbWVzIjpbIk1lbnVJdGVtIiwicHJvcHMiLCJpY29uIiwidGl0bGUiLCJkaXNhYmxlZCIsIm9uUHJlc3MiLCJ0aGVtZSIsInN0eWxlIiwiZGlzYWJsZWRDb2xvciIsImRhcmsiLCJ3aGl0ZSIsImJsYWNrIiwiYWxwaGEiLCJyZ2IiLCJzdHJpbmciLCJ0aXRsZUNvbG9yIiwiY29sb3JzIiwidGV4dCIsImljb25Db2xvciIsInN0eWxlcyIsImNvbnRhaW5lciIsInJvdyIsIml0ZW0iLCJjb250ZW50Iiwid2lkdGhXaXRoSWNvbiIsImNvbG9yIiwiUmVhY3QiLCJDb21wb25lbnQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiaWNvbldpZHRoIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsInBhZGRpbmciLCJmbGV4RGlyZWN0aW9uIiwid2lkdGgiLCJmb250U2l6ZSIsIm1hcmdpbiIsImp1c3RpZnlDb250ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7SUFpQ01BLFE7Ozs7Ozs7Ozs7NkJBR0s7QUFBQSx3QkFDa0QsS0FBS0MsS0FEdkQ7QUFBQSxVQUNDQyxJQURELGVBQ0NBLElBREQ7QUFBQSxVQUNPQyxLQURQLGVBQ09BLEtBRFA7QUFBQSxVQUNjQyxRQURkLGVBQ2NBLFFBRGQ7QUFBQSxVQUN3QkMsT0FEeEIsZUFDd0JBLE9BRHhCO0FBQUEsVUFDaUNDLEtBRGpDLGVBQ2lDQSxLQURqQztBQUFBLFVBQ3dDQyxLQUR4QyxlQUN3Q0EsS0FEeEM7QUFHUCxVQUFNQyxhQUFhLEdBQUcsb0JBQU1GLEtBQUssQ0FBQ0csSUFBTixHQUFhQyxhQUFiLEdBQXFCQyxhQUEzQixFQUNuQkMsS0FEbUIsQ0FDYixJQURhLEVBRW5CQyxHQUZtQixHQUduQkMsTUFIbUIsRUFBdEI7QUFLQSxVQUFNQyxVQUFVLEdBQUdYLFFBQVEsR0FDdkJJLGFB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aW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgSWNvbiBmcm9tICcuLi9JY29uJztcbmltcG9ydCBUb3VjaGFibGVSaXBwbGUgZnJvbSAnLi4vVG91Y2hhYmxlUmlwcGxlJztcbmltcG9ydCBUZXh0IGZyb20gJy4uL1R5cG9ncmFwaHkvVGV4dCc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IHsgYmxhY2ssIHdoaXRlIH0gZnJvbSAnLi4vLi4vc3R5bGVzL2NvbG9ycyc7XG5pbXBvcnQgdHlwZSB7IFRoZW1lIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJY29uU291cmNlIH0gZnJvbSAnLi4vSWNvbic7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBUaXRsZSB0ZXh0IGZvciB0aGUgYE1lbnVJdGVtYC5cbiAgICovXG4gIHRpdGxlOiBSZWFjdC5Ob2RlLFxuICAvKipcbiAgICogSWNvbiB0byBkaXNwbGF5IGZvciB0aGUgYE1lbnVJdGVtYC5cbiAgICovXG4gIGljb24/OiBJY29uU291cmNlLFxuICAvKipcbiAgICogV2hldGhlciB0aGUgJ2l0ZW0nIGlzIGRpc2FibGVkLiBBIGRpc2FibGVkICdpdGVtJyBpcyBncmV5ZWQgb3V0IGFuZCBgb25QcmVzc2AgaXMgbm90IGNhbGxlZCBvbiB0b3VjaC5cbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbixcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gcHJlc3MuXG4gICAqL1xuICBvblByZXNzPzogKCkgPT4gbWl4ZWQsXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHRoZW1lOiBUaGVtZSxcbiAgc3R5bGU/OiBhbnksXG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIHNob3cgYSBzaW5nbGUgbGlzdCBpdGVtIGluc2lkZSBhIE1lbnUuXG4gKlxuICovXG5cbmNsYXNzIE1lbnVJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdNZW51Lkl0ZW0nO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGljb24sIHRpdGxlLCBkaXNhYmxlZCwgb25QcmVzcywgdGhlbWUsIHN0eWxlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgZGlzYWJsZWRDb2xvciA9IGNvbG9yKHRoZW1lLmRhcmsgPyB3aGl0ZSA6IGJsYWNrKVxuICAgICAgLmFscGhhKDAuMzIpXG4gICAgICAucmdiKClcbiAgICAgIC5zdHJpbmcoKTtcblxuICAgIGNvbnN0IHRpdGxlQ29sb3IgPSBkaXNhYmxlZFxuICAgICAgPyBkaXNhYmxlZENvbG9yXG4gICAgICA6IGNvbG9yKHRoZW1lLmNvbG9ycy50ZXh0KVxuICAgICAgICAgIC5hbHBoYSgwLjg3KVxuICAgICAgICAgIC5yZ2IoKVxuICAgICAgICAgIC5zdHJpbmcoKTtcblxuICAgIGNvbnN0IGljb25Db2xvciA9IGRpc2FibGVkXG4gICAgICA/IGRpc2FibGVkQ29sb3JcbiAgICAgIDogY29sb3IodGhlbWUuY29sb3JzLnRleHQpXG4gICAgICAgICAgLmFscGhhKDAuNTQpXG4gICAgICAgICAgLnJnYigpXG4gICAgICAgICAgLnN0cmluZygpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb3VjaGFibGVSaXBwbGVcbiAgICAgICAgc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCBzdHlsZV19XG4gICAgICAgIG9uUHJlc3M9e29uUHJlc3N9XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgID5cbiAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5yb3d9PlxuICAgICAgICAgIHtpY29uID8gKFxuICAgICAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuaXRlbSwgc3R5bGVzLmljb25dfSBwb2ludGVyRXZlbnRzPVwiYm94LW5vbmVcIj5cbiAgICAgICAgICAgICAgPEljb24gc291cmNlPXtpY29ufSBzaXplPXsyNH0gY29sb3I9e2ljb25Db2xvcn0gLz5cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8Vmlld1xuICAgICAgICAgICAgc3R5bGU9e1tzdHlsZXMuaXRlbSwgc3R5bGVzLmNvbnRlbnQsIGljb24gJiYgc3R5bGVzLndpZHRoV2l0aEljb25dfVxuICAgICAgICAgICAgcG9pbnRlckV2ZW50cz1cIm5vbmVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIG51bWJlck9mTGluZXM9ezF9XG4gICAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLnRpdGxlLCB7IGNvbG9yOiB0aXRsZUNvbG9yIH1dfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPC9WaWV3PlxuICAgICAgICA8L1ZpZXc+XG4gICAgICA8L1RvdWNoYWJsZVJpcHBsZT5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IG1pbldpZHRoID0gMTEyO1xuY29uc3QgbWF4V2lkdGggPSAyODA7XG5jb25zdCBpY29uV2lkdGggPSA0MDtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBwYWRkaW5nOiA4LFxuICAgIG1pbldpZHRoLFxuICAgIG1heFdpZHRoLFxuICB9LFxuICByb3c6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgfSxcbiAgaWNvbjoge1xuICAgIHdpZHRoOiBpY29uV2lkdGgsXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6IDE2LFxuICB9LFxuICBpdGVtOiB7XG4gICAgbWFyZ2luOiA4LFxuICB9LFxuICBjb250ZW50OiB7XG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIG1pbldpZHRoOiBtaW5XaWR0aCAtIDE2LFxuICAgIG1heFdpZHRoOiBtYXhXaWR0aCAtIDE2LFxuICB9LFxuICB3aWR0aFdpdGhJY29uOiB7XG4gICAgbWF4V2lkdGg6IG1heFdpZHRoIC0gKGljb25XaWR0aCArIDQ4KSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTWVudUl0ZW0pO1xuIl19