1ba5c62538820ced3463ed4ecaa0f561
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _CardContent = _interopRequireDefault(require("./CardContent"));

var _CardActions = _interopRequireDefault(require("./CardActions"));

var _CardCover = _interopRequireDefault(require("./CardCover"));

var _CardTitle = _interopRequireDefault(require("./CardTitle"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _theming = require("../../core/theming");

var Card = function (_React$Component) {
  (0, _inherits2.default)(Card, _React$Component);

  function Card() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Card);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      elevation: new _reactNative.Animated.Value(_this.props.elevation)
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handlePressIn", function () {
      _reactNative.Animated.timing(_this.state.elevation, {
        toValue: 8,
        duration: 150
      }).start();
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handlePressOut", function () {
      _reactNative.Animated.timing(_this.state.elevation, {
        toValue: _this.props.elevation,
        duration: 150
      }).start();
    });
    return _this;
  }

  (0, _createClass2.default)(Card, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          cardElevation = _this$props.elevation,
          onLongPress = _this$props.onLongPress,
          onPress = _this$props.onPress,
          style = _this$props.style,
          theme = _this$props.theme,
          testID = _this$props.testID,
          accessible = _this$props.accessible,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["children", "elevation", "onLongPress", "onPress", "style", "theme", "testID", "accessible"]);
      var elevation = this.state.elevation;
      var roundness = theme.roundness;
      var total = React.Children.count(children);
      var siblings = React.Children.map(children, function (child) {
        return React.isValidElement(child) && child.type ? child.type.displayName : null;
      });
      return React.createElement(_Surface.default, (0, _extends2.default)({
        style: [{
          borderRadius: roundness,
          elevation: elevation
        }, style]
      }, rest), React.createElement(_reactNative.TouchableWithoutFeedback, {
        delayPressIn: 0,
        disabled: !(onPress || onLongPress),
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: onPress ? this._handlePressIn : undefined,
        onPressOut: onPress ? this._handlePressOut : undefined,
        testID: testID,
        accessible: accessible
      }, React.createElement(_reactNative.View, {
        style: styles.innerContainer
      }, React.Children.map(children, function (child, index) {
        return React.isValidElement(child) ? React.cloneElement(child, {
          index: index,
          total: total,
          siblings: siblings
        }) : child;
      }))));
    }
  }]);
  return Card;
}(React.Component);

(0, _defineProperty2.default)(Card, "Content", _CardContent.default);
(0, _defineProperty2.default)(Card, "Actions", _CardActions.default);
(0, _defineProperty2.default)(Card, "Cover", _CardCover.default);
(0, _defineProperty2.default)(Card, "Title", _CardTitle.default);
(0, _defineProperty2.default)(Card, "defaultProps", {
  elevation: 1
});

var styles = _reactNative.StyleSheet.create({
  innerContainer: {
    flexGrow: 1
  }
});

var _default = (0, _theming.withTheme)(Card);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmQuanMiXSwibmFtZXMiOlsiQ2FyZCIsImVsZXZhdGlvbiIsIkFuaW1hdGVkIiwiVmFsdWUiLCJwcm9wcyIsInRpbWluZyIsInN0YXRlIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwic3RhcnQiLCJjaGlsZHJlbiIsImNhcmRFbGV2YXRpb24iLCJvbkxvbmdQcmVzcyIsIm9uUHJlc3MiLCJzdHlsZSIsInRoZW1lIiwidGVzdElEIiwiYWNjZXNzaWJsZSIsInJlc3QiLCJyb3VuZG5lc3MiLCJ0b3RhbCIsIlJlYWN0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInNpYmxpbmdzIiwibWFwIiwiY2hpbGQiLCJpc1ZhbGlkRWxlbWVudCIsInR5cGUiLCJkaXNwbGF5TmFtZSIsImJvcmRlclJhZGl1cyIsIl9oYW5kbGVQcmVzc0luIiwidW5kZWZpbmVkIiwiX2hhbmRsZVByZXNzT3V0Iiwic3R5bGVzIiwiaW5uZXJDb250YWluZXIiLCJpbmRleCIsImNsb25lRWxlbWVudCIsIkNvbXBvbmVudCIsIkNhcmRDb250ZW50IiwiQ2FyZEFjdGlvbnMiLCJDYXJkQ292ZXIiLCJDYXJkVGl0bGUiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleEdyb3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQU1BOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztJQXNFTUEsSTs7Ozs7Ozs7Ozs7Ozs7O3dGQWNJO0FBRU5DLE1BQUFBLFNBQVMsRUFBRSxJQUFJQyxzQkFBU0MsS0FBYixDQUFtQixNQUFLQyxLQUFMLENBQVdILFNBQTlCO0FBRkwsSztpR0FLUyxZQUFNO0FBQ3JCQyw0QkFBU0csTUFBVCxDQUFnQixNQUFLQyxLQUFMLENBQVdMLFNBQTNCLEVBQXNDO0FBQ3BDTSxRQUFBQSxPQUFPLEVBQUUsQ0FEMkI7QUFFcENDLFFBQUFBLFFBQVEsRUFBRTtBQUYwQixPQUF0QyxFQUdHQyxLQUhIO0FBSUQsSztrR0FFaUIsWUFB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QUNkVSxJQUFBQSxRQUFRLEVBQUU7QUFESTtBQURlLENBQWxCLENBQWY7O2VBTWUsd0JBQVU3QyxJQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBBbmltYXRlZCxcbiAgVmlldyxcbiAgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLFxuICBTdHlsZVNoZWV0LFxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENhcmRDb250ZW50IGZyb20gJy4vQ2FyZENvbnRlbnQnO1xuaW1wb3J0IENhcmRBY3Rpb25zIGZyb20gJy4vQ2FyZEFjdGlvbnMnO1xuaW1wb3J0IENhcmRDb3ZlciBmcm9tICcuL0NhcmRDb3Zlcic7XG5pbXBvcnQgQ2FyZFRpdGxlIGZyb20gJy4vQ2FyZFRpdGxlJztcbmltcG9ydCBTdXJmYWNlIGZyb20gJy4uL1N1cmZhY2UnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCB0eXBlIHsgVGhlbWUgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbnR5cGUgUHJvcHMgPSBSZWFjdC5FbGVtZW50Q29uZmlnPHR5cGVvZiBTdXJmYWNlPiAmIHt8XG4gIC8qKlxuICAgKiBSZXN0aW5nIGVsZXZhdGlvbiBvZiB0aGUgY2FyZCB3aGljaCBjb250cm9scyB0aGUgZHJvcCBzaGFkb3cuXG4gICAqL1xuICBlbGV2YXRpb24/OiBudW1iZXIsXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIGxvbmcgcHJlc3MuXG4gICAqL1xuICBvbkxvbmdQcmVzcz86ICgpID0+IG1peGVkLFxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbiBwcmVzcy5cbiAgICovXG4gIG9uUHJlc3M/OiAoKSA9PiBtaXhlZCxcbiAgLyoqXG4gICAqIENvbnRlbnQgb2YgdGhlIGBDYXJkYC5cbiAgICovXG4gIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxuICBzdHlsZT86IGFueSxcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFRoZW1lLFxuICAvKipcbiAgICogUGFzcyBkb3duIHRlc3RJRCBmcm9tIGNhcmQgcHJvcHMgdG8gdG91Y2hhYmxlXG4gICAqL1xuICB0ZXN0SUQ/OiBzdHJpbmcsXG4gIC8qKlxuICAgKiBQYXNzIGRvd24gYWNjZXNzaWJsZSBmcm9tIGNhcmQgcHJvcHMgdG8gdG91Y2hhYmxlXG4gICAqL1xuICBhY2Nlc3NpYmxlPzogYm9vbGVhbixcbnx9O1xuXG50eXBlIFN0YXRlID0ge1xuICBlbGV2YXRpb246IEFuaW1hdGVkLlZhbHVlLFxufTtcblxuLyoqXG4gKiBBIGNhcmQgaXMgYSBzaGVldCBvZiBtYXRlcmlhbCB0aGF0IHNlcnZlcyBhcyBhbiBlbnRyeSBwb2ludCB0byBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8aW1nIGNsYXNzPVwibWVkaXVtXCIgc3JjPVwic2NyZWVuc2hvdHMvY2FyZC0xLnBuZ1wiIC8+XG4gKiAgIDxpbWcgY2xhc3M9XCJtZWRpdW1cIiBzcmM9XCJzY3JlZW5zaG90cy9jYXJkLTIucG5nXCIgLz5cbiAqIDwvZGl2PlxuICpcbiAqICMjIFVzYWdlXG4gKiBgYGBqc1xuICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuICogaW1wb3J0IHsgQXZhdGFyLCBCdXR0b24sIENhcmQsIFRpdGxlLCBQYXJhZ3JhcGggfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gKFxuICogICA8Q2FyZD5cbiAqICAgICA8Q2FyZC5UaXRsZSB0aXRsZT1cIkNhcmQgVGl0bGVcIiBzdWJ0aXRsZT1cIkNhcmQgU3VidGl0bGVcIiBsZWZ0PXsocHJvcHMpID0+IDxBdmF0YXIuSWNvbiB7Li4ucHJvcHN9IGljb249XCJmb2xkZXJcIiAvPn0gLz5cbiAqICAgICA8Q2FyZC5Db250ZW50PlxuICogICAgICAgPFRpdGxlPkNhcmQgdGl0bGU8L1RpdGxlPlxuICogICAgICAgPFBhcmFncmFwaD5DYXJkIGNvbnRlbnQ8L1BhcmFncmFwaD5cbiAqICAgICA8L0NhcmQuQ29udGVudD5cbiAqICAgICA8Q2FyZC5Db3ZlciBzb3VyY2U9e3sgdXJpOiAnaHR0cHM6Ly9waWNzdW0ucGhvdG9zLzcwMCcgfX0gLz5cbiAqICAgICA8Q2FyZC5BY3Rpb25zPlxuICogICAgICAgPEJ1dHRvbj5DYW5jZWw8L0J1dHRvbj5cbiAqICAgICAgIDxCdXR0b24+T2s8L0J1dHRvbj5cbiAqICAgICA8L0NhcmQuQWN0aW9ucz5cbiAqICAgPC9DYXJkPlxuICogKTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqIGBgYFxuICovXG5jbGFzcyBDYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICAvLyBAY29tcG9uZW50IC4vQ2FyZENvbnRlbnQuanNcbiAgc3RhdGljIENvbnRlbnQgPSBDYXJkQ29udGVudDtcbiAgLy8gQGNvbXBvbmVudCAuL0NhcmRBY3Rpb25zLmpzXG4gIHN0YXRpYyBBY3Rpb25zID0gQ2FyZEFjdGlvbnM7XG4gIC8vIEBjb21wb25lbnQgLi9DYXJkQ292ZXIuanNcbiAgc3RhdGljIENvdmVyID0gQ2FyZENvdmVyO1xuICAvLyBAY29tcG9uZW50IC4vQ2FyZFRpdGxlLmpzXG4gIHN0YXRpYyBUaXRsZSA9IENhcmRUaXRsZTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGVsZXZhdGlvbjogMSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICAvKiAkRmxvd0ZpeE1lOiBzb21laG93IGRlZmF1bHQgcHJvcHMgYXJlIG5vdCByZXNwZWN0ZWQgKi9cbiAgICBlbGV2YXRpb246IG5ldyBBbmltYXRlZC5WYWx1ZSh0aGlzLnByb3BzLmVsZXZhdGlvbiksXG4gIH07XG5cbiAgX2hhbmRsZVByZXNzSW4gPSAoKSA9PiB7XG4gICAgQW5pbWF0ZWQudGltaW5nKHRoaXMuc3RhdGUuZWxldmF0aW9uLCB7XG4gICAgICB0b1ZhbHVlOiA4LFxuICAgICAgZHVyYXRpb246IDE1MCxcbiAgICB9KS5zdGFydCgpO1xuICB9O1xuXG4gIF9oYW5kbGVQcmVzc091dCA9ICgpID0+IHtcbiAgICBBbmltYXRlZC50aW1pbmcodGhpcy5zdGF0ZS5lbGV2YXRpb24sIHtcbiAgICAgIC8qICRGbG93Rml4TWU6IHNvbWVob3cgZGVmYXVsdCBwcm9wcyBhcmUgbm90IHJlc3BlY3RlZCAqL1xuICAgICAgdG9WYWx1ZTogdGhpcy5wcm9wcy5lbGV2YXRpb24sXG4gICAgICBkdXJhdGlvbjogMTUwLFxuICAgIH0pLnN0YXJ0KCk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZWxldmF0aW9uOiBjYXJkRWxldmF0aW9uLFxuICAgICAgb25Mb25nUHJlc3MsXG4gICAgICBvblByZXNzLFxuICAgICAgc3R5bGUsXG4gICAgICB0aGVtZSxcbiAgICAgIHRlc3RJRCxcbiAgICAgIGFjY2Vzc2libGUsXG4gICAgICAuLi5yZXN0XG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBlbGV2YXRpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyByb3VuZG5lc3MgfSA9IHRoZW1lO1xuICAgIGNvbnN0IHRvdGFsID0gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pO1xuICAgIGNvbnN0IHNpYmxpbmdzID0gUmVhY3QuQ2hpbGRyZW4ubWFwKFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjaGlsZCA9PlxuICAgICAgICBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQudHlwZVxuICAgICAgICAgID8gY2hpbGQudHlwZS5kaXNwbGF5TmFtZVxuICAgICAgICAgIDogbnVsbFxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTdXJmYWNlXG4gICAgICAgIHN0eWxlPXtbeyBib3JkZXJSYWRpdXM6IHJvdW5kbmVzcywgZWxldmF0aW9uIH0sIHN0eWxlXX1cbiAgICAgICAgey4uLnJlc3R9XG4gICAgICA+XG4gICAgICAgIDxUb3VjaGFibGVXaXRob3V0RmVlZGJhY2tcbiAgICAgICAgICBkZWxheVByZXNzSW49ezB9XG4gICAgICAgICAgZGlzYWJsZWQ9eyEob25QcmVzcyB8fCBvbkxvbmdQcmVzcyl9XG4gICAgICAgICAgb25Mb25nUHJlc3M9e29uTG9uZ1ByZXNzfVxuICAgICAgICAgIG9uUHJlc3M9e29uUHJlc3N9XG4gICAgICAgICAgb25QcmVzc0luPXtvblByZXNzID8gdGhpcy5faGFuZGxlUHJlc3NJbiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICBvblByZXNzT3V0PXtvblByZXNzID8gdGhpcy5faGFuZGxlUHJlc3NPdXQgOiB1bmRlZmluZWR9XG4gICAgICAgICAgdGVzdElEPXt0ZXN0SUR9XG4gICAgICAgICAgYWNjZXNzaWJsZT17YWNjZXNzaWJsZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuaW5uZXJDb250YWluZXJ9PlxuICAgICAgICAgICAge1JlYWN0LkNoaWxkcmVuLm1hcChcbiAgICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICAgIChjaGlsZCwgaW5kZXgpID0+XG4gICAgICAgICAgICAgICAgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpXG4gICAgICAgICAgICAgICAgICA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIHRvdGFsLFxuICAgICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgOiBjaGlsZFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgIDwvVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrPlxuICAgICAgPC9TdXJmYWNlPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBpbm5lckNvbnRhaW5lcjoge1xuICAgIGZsZXhHcm93OiAxLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShDYXJkKTtcbiJdfQ==