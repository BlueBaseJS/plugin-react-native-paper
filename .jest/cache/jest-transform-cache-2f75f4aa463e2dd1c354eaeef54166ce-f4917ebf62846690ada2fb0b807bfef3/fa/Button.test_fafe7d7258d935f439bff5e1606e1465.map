{"version":3,"sources":["/Users/adnan/Desktop/plugin-react-native-paper/src/components/Button/__tests__/Button.test.tsx"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,IAAI,CAAC,gDAAD,EAAmD,UAAC,IAAD,EAAS;AAE/D,MAAM,QAAQ,GAAG,qBAAA,CAAA,OAAA,CAAa,MAAb,CACd,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAA,WAAD,EAAY;AAAC,IAAA,UAAU,EAAE;AAAE,MAAA,MAAM,EAAN,GAAA,CAAA;AAAF;AAAb,GAAZ,EACD,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAA,MAAD,EAAU;AAAC,IAAA,OAAO,EAAC,WAAT;AAAqB,IAAA,KAAK,EAAC;AAA3B,GAAV,CADC,CADc,CAAjB;AAMA,EAAA,UAAU,CAAC,YAAK;AAGf,QAAM,KAAK,GAAW,QAAgB,CAAC,MAAjB,GAA0B,KAA1B,CAAgC,KAAtD;AAGA,IAAA,MAAM,CAAE,KAAa,CAAC,eAAhB,CAAN,CAAuC,IAAvC,CAA4C,SAA5C;AACA,IAAA,IAAI;AACJ,GARS,CAAV;AAUA,CAlBG,CAAJ;AAoBA,IAAI,CAAC,gDAAD,EAAmD,UAAC,IAAD,EAAS;AAE/D,MAAM,QAAQ,GAAG,qBAAA,CAAA,OAAA,CAAa,MAAb,CACd,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAA,WAAD,EAAY;AAAC,IAAA,UAAU,EAAE;AAAE,MAAA,MAAM,EAAN,GAAA,CAAA;AAAF;AAAb,GAAZ,EACD,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAA,MAAD,EAAU;AAAC,IAAA,OAAO,EAAC,UAAT;AAAoB,IAAA,KAAK,EAAC;AAA1B,GAAV,CADC,CADc,CAAjB;AAMA,EAAA,UAAU,CAAC,YAAK;AACf,QAAM,KAAK,GAAW,QAAgB,CAAC,MAAjB,GAA0B,KAA1B,CAAgC,KAAtD;AACA,IAAA,MAAM,CAAE,KAAa,CAAC,eAAhB,CAAN,CAAuC,IAAvC,CAA4C,aAA5C;AAGA,QAAM,SAAS,GAAG,QAAQ,CAAC,IAAT,CAAc,UAAd,CAAyB,cAAA,CAAA,IAAzB,EAA+B,KAAjD;AAEA,QAAM,SAAS,GAAQ,WAAA,CAAA,OAAA,CACtB,SAAS,CAAC,KAAV,CAAgB,CAAhB,CADsB,EAEtB,WAAA,CAAA,OAAA,CAAU,GAAV,CACC,SAAS,CAAC,KAAV,CAAgB,CAAhB,EAAmB,MAAnB,CAA0B,UAAC,CAAD;AAAA,aAAY,CAAC,KAAK,SAAlB;AAAA,KAA1B,CADD,CAFsB,CAAvB;AAOA,IAAA,MAAM,CAAE,SAAiB,CAAC,KAApB,CAAN,CAAiC,IAAjC,CAAsC,SAAtC;AACA,IAAA,IAAI;AACJ,GAhBS,CAAV;AAkBA,CA1BG,CAAJ","sourcesContent":["import { BlueBaseApp } from '@bluebase/core';\nimport { Button } from '../';\nimport { Button as BB_Button } from '@bluebase/components';\nimport React from 'react';\nimport TestRenderer from 'react-test-renderer';\nimport { Text } from 'react-native';\nimport deepmerge from 'deepmerge';\n\ntest('render and contained button with primary color', (done) => {\n\n\tconst rendered = TestRenderer.create(\n    <BlueBaseApp components={{ Button }}>\n\t\t\t<BB_Button variant=\"contained\" color=\"primary\" />\n\t\t</BlueBaseApp>\n\t);\n\n\tsetTimeout(() => {\n\t\t// expect(rendered).toMatchSnapshot();\n\n\t\tconst style: any[] = (rendered as any).toJSON().props.style;\n\t\t// const style = deepmerge.all(styleProp.filter(x => x !== undefined));\n\n\t\texpect((style as any).backgroundColor).toBe('#3f51b5');\n\t\tdone();\n\t});\n\n});\n\ntest('render and outline button with secondary color', (done) => {\n\n\tconst rendered = TestRenderer.create(\n    <BlueBaseApp components={{ Button }}>\n\t\t\t<BB_Button variant=\"outlined\" color=\"secondary\" />\n\t\t</BlueBaseApp>\n\t);\n\n\tsetTimeout(() => {\n\t\tconst style: any[] = (rendered as any).toJSON().props.style;\n\t\texpect((style as any).backgroundColor).toBe('transparent');\n\n\t\t// Text\n\t\tconst textProps = rendered.root.findByType(Text).props;\n\n\t\tconst textStyle: any = deepmerge(\n\t\t\ttextProps.style[0],\n\t\t\tdeepmerge.all(\n\t\t\t\ttextProps.style[1].filter((x: any) => x !== undefined)\n\t\t\t)\n\t\t);\n\n\t\texpect((textStyle as any).color).toBe('#f50057');\n\t\tdone();\n\t});\n\n});\n"]}