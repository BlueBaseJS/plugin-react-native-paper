5378d4a09488a0ab3182aa2b14c06e72
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _RadioButtonGroup = require("./RadioButtonGroup");

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _theming = require("../core/theming");

var BORDER_WIDTH = 2;

var RadioButtonAndroid = function (_React$Component) {
  (0, _inherits2.default)(RadioButtonAndroid, _React$Component);

  function RadioButtonAndroid() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, RadioButtonAndroid);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RadioButtonAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      borderAnim: new _reactNative.Animated.Value(BORDER_WIDTH),
      radioAnim: new _reactNative.Animated.Value(1)
    });
    return _this;
  }

  (0, _createClass2.default)(RadioButtonAndroid, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.status === this.props.status) {
        return;
      }

      if (this.props.status === 'checked') {
        this.state.radioAnim.setValue(1.2);

        _reactNative.Animated.timing(this.state.radioAnim, {
          toValue: 1,
          duration: 150
        }).start();
      } else {
        this.state.borderAnim.setValue(10);

        _reactNative.Animated.timing(this.state.borderAnim, {
          toValue: BORDER_WIDTH,
          duration: 150
        }).start();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
        var _this2$props = _this2.props,
            disabled = _this2$props.disabled,
            onPress = _this2$props.onPress,
            theme = _this2$props.theme,
            rest = (0, _objectWithoutProperties2.default)(_this2$props, ["disabled", "onPress", "theme"]);
        var checkedColor = _this2.props.color || theme.colors.accent;
        var uncheckedColor = _this2.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
        var rippleColor, radioColor;
        var checked = context ? context.value === _this2.props.value : _this2.props.status === 'checked';

        if (disabled) {
          rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
          radioColor = theme.colors.disabled;
        } else {
          rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
          radioColor = checked ? checkedColor : uncheckedColor;
        }

        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
          borderless: true,
          rippleColor: rippleColor,
          onPress: disabled ? undefined : function () {
            context && context.onValueChange(_this2.props.value);
            onPress && onPress();
          },
          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',
          accessibilityRole: "button",
          accessibilityStates: disabled ? ['disabled'] : undefined,
          accessibilityLiveRegion: "polite",
          style: styles.container
        }), React.createElement(_reactNative.Animated.View, {
          style: [styles.radio, {
            borderColor: radioColor,
            borderWidth: _this2.state.borderAnim
          }]
        }, checked ? React.createElement(_reactNative.View, {
          style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer]
        }, React.createElement(_reactNative.Animated.View, {
          style: [styles.dot, {
            backgroundColor: radioColor,
            transform: [{
              scale: _this2.state.radioAnim
            }]
          }]
        })) : null));
      });
    }
  }]);
  return RadioButtonAndroid;
}(React.Component);

(0, _defineProperty2.default)(RadioButtonAndroid, "displayName", 'RadioButton.Android');

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18
  },
  radioContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  radio: {
    height: 20,
    width: 20,
    borderRadius: 10,
    margin: 8
  },
  dot: {
    height: 10,
    width: 10,
    borderRadius: 5
  }
});

var _default = (0, _theming.withTheme)(RadioButtonAndroid);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,