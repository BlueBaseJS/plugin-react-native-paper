{"version":3,"sources":["RadioButtonAndroid.js"],"names":["BORDER_WIDTH","RadioButtonAndroid","borderAnim","Animated","Value","radioAnim","prevProps","status","props","state","setValue","timing","toValue","duration","start","context","disabled","onPress","theme","rest","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","checked","value","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","scale","React","Component","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  borderAnim: Animated.Value,\n  radioAnim: Animated.Value,\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150,\n      }).start();\n    }\n  }\n\n  render() {\n    return (\n      <RadioButtonContext.Consumer>\n        {context => {\n          const { disabled, onPress, theme, ...rest } = this.props;\n          const checkedColor = this.props.color || theme.colors.accent;\n          const uncheckedColor =\n            this.props.uncheckedColor ||\n            color(theme.colors.text)\n              .alpha(theme.dark ? 0.7 : 0.54)\n              .rgb()\n              .string();\n\n          let rippleColor, radioColor;\n\n          const checked = context\n            ? context.value === this.props.value\n            : this.props.status === 'checked';\n\n          if (disabled) {\n            rippleColor = color(theme.colors.text)\n              .alpha(0.16)\n              .rgb()\n              .string();\n            radioColor = theme.colors.disabled;\n          } else {\n            rippleColor = color(checkedColor)\n              .fade(0.32)\n              .rgb()\n              .string();\n            radioColor = checked ? checkedColor : uncheckedColor;\n          }\n\n          return (\n            <TouchableRipple\n              {...rest}\n              borderless\n              rippleColor={rippleColor}\n              onPress={\n                disabled\n                  ? undefined\n                  : () => {\n                      context && context.onValueChange(this.props.value);\n                      onPress && onPress();\n                    }\n              }\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType={\n                checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n              }\n              accessibilityRole=\"button\"\n              accessibilityStates={disabled ? ['disabled'] : undefined}\n              accessibilityLiveRegion=\"polite\"\n              style={styles.container}\n            >\n              <Animated.View\n                style={[\n                  styles.radio,\n                  {\n                    borderColor: radioColor,\n                    borderWidth: this.state.borderAnim,\n                  },\n                ]}\n              >\n                {checked ? (\n                  <View\n                    style={[StyleSheet.absoluteFill, styles.radioContainer]}\n                  >\n                    <Animated.View\n                      style={[\n                        styles.dot,\n                        {\n                          backgroundColor: radioColor,\n                          transform: [{ scale: this.state.radioAnim }],\n                        },\n                      ]}\n                    />\n                  </View>\n                ) : null}\n              </Animated.View>\n            </TouchableRipple>\n          );\n        }}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n"]}