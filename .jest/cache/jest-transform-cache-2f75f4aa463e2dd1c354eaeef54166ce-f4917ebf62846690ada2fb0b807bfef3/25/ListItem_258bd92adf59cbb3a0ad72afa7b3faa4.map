{"version":3,"sources":["ListItem.js"],"names":["ListItem","props","left","right","title","description","onPress","theme","style","titleStyle","descriptionStyle","titleEllipsizeMode","descriptionEllipsizeMode","rest","titleColor","colors","text","alpha","rgb","string","descriptionColor","styles","container","row","color","item","content","React","Component","StyleSheet","create","padding","flexDirection","fontSize","margin","flex","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Title text for the list item.\n   */\n  title: React.Node,\n  /**\n   * Description text for the list item.\n   */\n  description?: React.Node,\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.Node,\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string }) => React.Node,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: ViewStyleProp,\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: TextStyleProp,\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: TextStyleProp,\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: 'head' | 'middle' | 'tail' | 'clip',\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: 'head' | 'middle' | 'tail' | 'clip',\n|};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      descriptionStyle,\n      titleEllipsizeMode,\n      descriptionEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left ? left({ color: descriptionColor }) : null}\n          <View style={[styles.item, styles.content]} pointerEvents=\"none\">\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description ? (\n              <Text\n                ellipsizeMode={descriptionEllipsizeMode}\n                numberOfLines={2}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            ) : null}\n          </View>\n          {right ? right({ color: descriptionColor }) : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]}