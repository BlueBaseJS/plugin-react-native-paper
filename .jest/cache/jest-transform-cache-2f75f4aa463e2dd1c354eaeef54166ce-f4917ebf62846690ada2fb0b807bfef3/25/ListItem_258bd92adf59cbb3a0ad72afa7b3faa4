e147950a69f2cd9dd83c8ec104a45290
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var ListItem = function (_React$Component) {
  (0, _inherits2.default)(ListItem, _React$Component);

  function ListItem() {
    (0, _classCallCheck2.default)(this, ListItem);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListItem).apply(this, arguments));
  }

  (0, _createClass2.default)(ListItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          left = _this$props.left,
          right = _this$props.right,
          title = _this$props.title,
          description = _this$props.description,
          onPress = _this$props.onPress,
          theme = _this$props.theme,
          style = _this$props.style,
          titleStyle = _this$props.titleStyle,
          descriptionStyle = _this$props.descriptionStyle,
          titleEllipsizeMode = _this$props.titleEllipsizeMode,
          descriptionEllipsizeMode = _this$props.descriptionEllipsizeMode,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["left", "right", "title", "description", "onPress", "theme", "style", "titleStyle", "descriptionStyle", "titleEllipsizeMode", "descriptionEllipsizeMode"]);
      var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();
      var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
        style: [styles.container, style],
        onPress: onPress
      }), React.createElement(_reactNative.View, {
        style: styles.row
      }, left ? left({
        color: descriptionColor
      }) : null, React.createElement(_reactNative.View, {
        style: [styles.item, styles.content],
        pointerEvents: "none"
      }, React.createElement(_Text.default, {
        ellipsizeMode: titleEllipsizeMode,
        numberOfLines: 1,
        style: [styles.title, {
          color: titleColor
        }, titleStyle]
      }, title), description ? React.createElement(_Text.default, {
        ellipsizeMode: descriptionEllipsizeMode,
        numberOfLines: 2,
        style: [styles.description, {
          color: descriptionColor
        }, descriptionStyle]
      }, description) : null), right ? right({
        color: descriptionColor
      }) : null));
    }
  }]);
  return ListItem;
}(React.Component);

(0, _defineProperty2.default)(ListItem, "displayName", 'List.Item');

var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 8
  },
  row: {
    flexDirection: 'row'
  },
  title: {
    fontSize: 16
  },
  description: {
    fontSize: 14
  },
  item: {
    margin: 8
  },
  content: {
    flex: 1,
    justifyContent: 'center'
  }
});

var _default = (0, _theming.withTheme)(ListItem);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,