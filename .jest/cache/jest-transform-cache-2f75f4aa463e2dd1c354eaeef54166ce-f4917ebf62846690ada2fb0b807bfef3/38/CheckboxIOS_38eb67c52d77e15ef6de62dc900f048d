c713bdbfe13ca1ad9b0bf98dcd024dc1
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple"));

var _theming = require("../core/theming");

var CheckboxIOS = function (_React$Component) {
  (0, _inherits2.default)(CheckboxIOS, _React$Component);

  function CheckboxIOS() {
    (0, _classCallCheck2.default)(this, CheckboxIOS);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CheckboxIOS).apply(this, arguments));
  }

  (0, _createClass2.default)(CheckboxIOS, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          status = _this$props.status,
          disabled = _this$props.disabled,
          onPress = _this$props.onPress,
          theme = _this$props.theme,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["status", "disabled", "onPress", "theme"]);
      var checked = status === 'checked';
      var indeterminate = status === 'indeterminate';
      var checkedColor = disabled ? theme.colors.disabled : this.props.color || theme.colors.accent;
      var rippleColor;

      if (disabled) {
        rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
      } else {
        rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
      }

      var icon = indeterminate ? 'remove' : 'done';
      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: onPress,
        disabled: disabled,
        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
        accessibilityComponentType: "button",
        accessibilityRole: "button",
        accessibilityStates: disabled ? ['disabled'] : undefined,
        accessibilityLiveRegion: "polite",
        style: styles.container
      }), React.createElement(_reactNative.View, {
        style: {
          opacity: indeterminate || checked ? 1 : 0
        }
      }, React.createElement(_Icon.default, {
        allowFontScaling: false,
        source: icon,
        size: 24,
        color: checkedColor
      })));
    }
  }]);
  return CheckboxIOS;
}(React.Component);

(0, _defineProperty2.default)(CheckboxIOS, "displayName", 'Checkbox.IOS');

var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18,
    padding: 6
  }
});

var _default = (0, _theming.withTheme)(CheckboxIOS);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrYm94SU9TLmpzIl0sIm5hbWVzIjpbIkNoZWNrYm94SU9TIiwicHJvcHMiLCJzdGF0dXMiLCJkaXNhYmxlZCIsIm9uUHJlc3MiLCJ0aGVtZSIsInJlc3QiLCJjaGVja2VkIiwiaW5kZXRlcm1pbmF0ZSIsImNoZWNrZWRDb2xvciIsImNvbG9ycyIsImNvbG9yIiwiYWNjZW50IiwicmlwcGxlQ29sb3IiLCJ0ZXh0IiwiYWxwaGEiLCJyZ2IiLCJzdHJpbmciLCJmYWRlIiwiaWNvbiIsInVuZGVmaW5lZCIsInN0eWxlcyIsImNvbnRhaW5lciIsIm9wYWNpdHkiLCJSZWFjdCIsIkNvbXBvbmVudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0lBeUNNQSxXOzs7Ozs7Ozs7OzZCQUdLO0FBQUEsd0JBQytDLEtBQUtDLEtBRHBEO0FBQUEsVUFDQ0MsTUFERCxlQUNDQSxNQUREO0FBQUEsVUFDU0MsUUFEVCxlQUNTQSxRQURUO0FBQUEsVUFDbUJDLE9BRG5CLGVBQ21CQSxPQURuQjtBQUFBLFVBQzRCQyxLQUQ1QixlQUM0QkEsS0FENUI7QUFBQSxVQUNzQ0MsSUFEdEM7QUFFUCxVQUFNQyxPQUFPLEdBQUdMLE1BQU0sS0FBSyxTQUEzQjtBQUNBLFVBQU1NLGFBQWEsR0FBR04sTUFBTSxLQUFLLGVBQWpDO0FBRUEsVUFBTU8sWUFBWSxHQUFHTixRQUFRLEdBQ3pCRSxLQUFLLENBQUNLLE1BQU4sQ0FBYVAsUUFEWSxHQUV6QixLQUFLRixLQUFMLENBQVdVLEtBQVgsSUFBb0JOLEtBQUssQ0FBQ0ssTUFBTixDQUFhRSxNQUZyQztBQUlBLFVBQUlDLFdBQUo7O0FBRUEsVUFBSVYsUUFBSixFQUFjO0FBQ1pVLFFBQUFBLFdBQVcsR0FBRyxvQkFBTVIsS0FBSyxDQUFDSyxNQUFOLENBQWFJLElBQW5CLEVBQ1hDLEtBRFcsQ0FDTCxJQURLLEVBRVhDLEdBRlcsR0FHWEMsTUFIVyxFQUFkO0FBSUQsT0FMRCxNQUtPO0FBQ0xKLFFBQUFBLFdBQVcsR0FBRyxvQkFBTUosWUFBTixFQUNYUyxJQURXLENBQ04sSUFETSxFQUVYRixHQUZXLEdBR1hDLE1BSFcsRUFBZDtBQUlEOztBQUVELFVBQU1FLElBQUksR0FBR1gsYUFBYSxHQUFHLFFBQUgsR0FBYyxNQUF4QztBQUVBLGFBQ0Usb0JBQUMsd0JBQUQsNkJBQ01GLElBRE47QUFFRSxRQUFBLFVBQVUsTUFGWjtBQUdFLFFBQUEsV0FBVyxFQUFFTyxXQUhmO0FBSUUsUUFBQSxPQUFPLEVBQUVULE9BSlg7QUFLRSxRQUFBLFFBQVEsRUFBRUQsUUFMWjtBQU1FLFFBQUEsbUJBQW1CLEVBQUVBLFFBQVEsR0FBRyxDQUFDLFFBQUQsRUFBVyxVQUFYLENBQUgsR0FBNEIsUUFOM0Q7QUFPRSxRQUFBLDBCQUEwQixFQUFDLFFBUDdCO0FBUUUsUUFBQSxpQkFBaUIsRUFBQyxRQVJwQjtBQVNFLFFBQUEsbUJBQW1CLEVBQUVBLFFBQVEsR0FBRyxDQUFDLFVBQUQsQ0FBSCxHQUFrQmlCLFNBVGpEO0FBVUUsUUFBQSx1QkFBdUIsRUFBQyxRQVYxQjtBQVdFLFFBQUEsS0FBSyxFQUFFQyxNQUFNLENBQUNDO0FBWGhCLFVBYUUsb0JBQUMsaUJBQUQ7QUFBTSxRQUFBLEtBQUssRUFBRTtBQUFFQyxVQUFBQSxPQUFPLEVBQUVmLGFBQWEsSUFBSUQsT0FBakIsR0FBMkIsQ0FBM0IsR0FBK0I7QUFBMUM7QUFBYixTQUNFLG9CQUFDLGFBQUQ7QUFDRSxRQUFBLGdCQUFnQixFQUFFLEtBRHBCO0FBRUUsUUFBQSxNQUFNLEVBQUVZLElBRlY7QUFHRSxRQUFBLElBQUksRUFBRSxFQUhSO0FBSUUsUUFBQSxLQUFLLEVBQUVWO0FBSlQsUUFERixDQWJGLENBREY7QUF3QkQ7OztFQXBEdUJlLEtBQUssQ0FBQ0MsUzs7OEJBQTFCekIsVyxpQkFDaUIsYzs7QUFzRHZCLElBQU1xQixNQUFNLEdBQUdLLHdCQUFXQyxNQUFYLENBQWtCO0FBQy9CTCxFQUFBQSxTQUFTLEVBQUU7QUFDVE0sSUFBQUEsWUFBWSxFQUFFLEVBREw7QUFFVEMsSUFBQUEsT0FBTyxFQUFFO0FBRkE7QUFEb0IsQ0FBbEIsQ0FBZjs7ZUFPZSx3QkFBVTdCLFdBQVYsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IGNvbG9yIGZyb20gJ2NvbG9yJztcbmltcG9ydCBJY29uIGZyb20gJy4vSWNvbic7XG5pbXBvcnQgVG91Y2hhYmxlUmlwcGxlIGZyb20gJy4vVG91Y2hhYmxlUmlwcGxlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvcmUvdGhlbWluZyc7XG5pbXBvcnQgdHlwZSB7IFRoZW1lLCAkUmVtb3ZlQ2hpbGRyZW4gfSBmcm9tICcuLi90eXBlcyc7XG5cbnR5cGUgUHJvcHMgPSAkUmVtb3ZlQ2hpbGRyZW48dHlwZW9mIFRvdWNoYWJsZVJpcHBsZT4gJiB7fFxuICAvKipcbiAgICogU3RhdHVzIG9mIGNoZWNrYm94LlxuICAgKi9cbiAgc3RhdHVzOiAnY2hlY2tlZCcgfCAndW5jaGVja2VkJyB8ICdpbmRldGVybWluYXRlJyxcbiAgLyoqXG4gICAqIFdoZXRoZXIgY2hlY2tib3ggaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW4sXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIHByZXNzLlxuICAgKi9cbiAgb25QcmVzcz86ICgpID0+IG1peGVkLFxuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciBjaGVja2JveC5cbiAgICovXG4gIGNvbG9yPzogc3RyaW5nLFxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogVGhlbWUsXG58fTtcblxuLyoqXG4gKiBDaGVja2JveGVzIGFsbG93IHRoZSBzZWxlY3Rpb24gb2YgbXVsdGlwbGUgb3B0aW9ucyBmcm9tIGEgc2V0LlxuICogVGhpcyBjb21wb25lbnQgZm9sbG93cyBwbGF0Zm9ybSBndWlkZWxpbmVzIGZvciBpT1MuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9jaGVja2JveC1lbmFibGVkLmlvcy5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkVuYWJsZWQ8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvY2hlY2tib3gtZGlzYWJsZWQuaW9zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+RGlzYWJsZWQ8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKi9cbmNsYXNzIENoZWNrYm94SU9TIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBkaXNwbGF5TmFtZSA9ICdDaGVja2JveC5JT1MnO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHN0YXR1cywgZGlzYWJsZWQsIG9uUHJlc3MsIHRoZW1lLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNoZWNrZWQgPSBzdGF0dXMgPT09ICdjaGVja2VkJztcbiAgICBjb25zdCBpbmRldGVybWluYXRlID0gc3RhdHVzID09PSAnaW5kZXRlcm1pbmF0ZSc7XG5cbiAgICBjb25zdCBjaGVja2VkQ29sb3IgPSBkaXNhYmxlZFxuICAgICAgPyB0aGVtZS5jb2xvcnMuZGlzYWJsZWRcbiAgICAgIDogdGhpcy5wcm9wcy5jb2xvciB8fCB0aGVtZS5jb2xvcnMuYWNjZW50O1xuXG4gICAgbGV0IHJpcHBsZUNvbG9yO1xuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByaXBwbGVDb2xvciA9IGNvbG9yKHRoZW1lLmNvbG9ycy50ZXh0KVxuICAgICAgICAuYWxwaGEoMC4xNilcbiAgICAgICAgLnJnYigpXG4gICAgICAgIC5zdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmlwcGxlQ29sb3IgPSBjb2xvcihjaGVja2VkQ29sb3IpXG4gICAgICAgIC5mYWRlKDAuMzIpXG4gICAgICAgIC5yZ2IoKVxuICAgICAgICAuc3RyaW5nKCk7XG4gICAgfVxuXG4gICAgY29uc3QgaWNvbiA9IGluZGV0ZXJtaW5hdGUgPyAncmVtb3ZlJyA6ICdkb25lJztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG91Y2hhYmxlUmlwcGxlXG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgICBib3JkZXJsZXNzXG4gICAgICAgIHJpcHBsZUNvbG9yPXtyaXBwbGVDb2xvcn1cbiAgICAgICAgb25QcmVzcz17b25QcmVzc31cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPXtkaXNhYmxlZCA/IFsnYnV0dG9uJywgJ2Rpc2FibGVkJ10gOiAnYnV0dG9uJ31cbiAgICAgICAgYWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGU9XCJidXR0b25cIlxuICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cImJ1dHRvblwiXG4gICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZXM9e2Rpc2FibGVkID8gWydkaXNhYmxlZCddIDogdW5kZWZpbmVkfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbj1cInBvbGl0ZVwiXG4gICAgICAgIHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfVxuICAgICAgPlxuICAgICAgICA8VmlldyBzdHlsZT17eyBvcGFjaXR5OiBpbmRldGVybWluYXRlIHx8IGNoZWNrZWQgPyAxIDogMCB9fT5cbiAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgYWxsb3dGb250U2NhbGluZz17ZmFsc2V9XG4gICAgICAgICAgICBzb3VyY2U9e2ljb259XG4gICAgICAgICAgICBzaXplPXsyNH1cbiAgICAgICAgICAgIGNvbG9yPXtjaGVja2VkQ29sb3J9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgPC9Ub3VjaGFibGVSaXBwbGU+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIGJvcmRlclJhZGl1czogMTgsXG4gICAgcGFkZGluZzogNixcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQ2hlY2tib3hJT1MpO1xuIl19