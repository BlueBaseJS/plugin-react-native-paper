965e9d4be4474e21a454b633d77341a1
'use strict';

var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
var float32ArraySupported = typeof Float32Array === 'function';

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}

function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}

function C(aA1) {
  return 3.0 * aA1;
}

function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}

function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX,
      currentT,
      i = 0;

  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;

    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);

    if (currentSlope === 0.0) {
      return aGuessT;
    }

    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }

  return aGuessT;
}

module.exports = function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }

    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);

    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }

    if (x === 0) {
      return 0;
    }

    if (x === 1) {
      return 1;
    }

    return calcBezier(getTForX(x), mY1, mY2);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlemllci5qcyJdLCJuYW1lcyI6WyJORVdUT05fSVRFUkFUSU9OUyIsIk5FV1RPTl9NSU5fU0xPUEUiLCJTVUJESVZJU0lPTl9QUkVDSVNJT04iLCJTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyIsImtTcGxpbmVUYWJsZVNpemUiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJGbG9hdDMyQXJyYXkiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsImJpbmFyeVN1YmRpdmlkZSIsImFYIiwiYUEiLCJhQiIsIm1YMSIsIm1YMiIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJpIiwiTWF0aCIsImFicyIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJiZXppZXIiLCJtWTEiLCJtWTIiLCJFcnJvciIsInNhbXBsZVZhbHVlcyIsIkFycmF5IiwiZ2V0VEZvclgiLCJpbnRlcnZhbFN0YXJ0IiwiY3VycmVudFNhbXBsZSIsImxhc3RTYW1wbGUiLCJkaXN0IiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiQmV6aWVyRWFzaW5nIiwieCJdLCJtYXBwaW5ncyI6IkFBU0E7O0FBR0EsSUFBTUEsaUJBQWlCLEdBQUcsQ0FBMUI7QUFDQSxJQUFNQyxnQkFBZ0IsR0FBRyxLQUF6QjtBQUNBLElBQU1DLHFCQUFxQixHQUFHLFNBQTlCO0FBQ0EsSUFBTUMsMEJBQTBCLEdBQUcsRUFBbkM7QUFFQSxJQUFNQyxnQkFBZ0IsR0FBRyxFQUF6QjtBQUNBLElBQU1DLGVBQWUsR0FBRyxPQUFPRCxnQkFBZ0IsR0FBRyxHQUExQixDQUF4QjtBQUVBLElBQU1FLHFCQUFxQixHQUFHLE9BQU9DLFlBQVAsS0FBd0IsVUFBdEQ7O0FBRUEsU0FBU0MsQ0FBVCxDQUFXQyxHQUFYLEVBQWdCQyxHQUFoQixFQUFxQjtBQUNuQixTQUFPLE1B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R0FBWixFQUFpQkMsR0FBakIsQ0FBN0I7O0FBQ0EsUUFBSXVCLFlBQVksSUFBSTNDLGdCQUFwQixFQUFzQztBQUNwQyxhQUFPMEIsb0JBQW9CLENBQUNWLEVBQUQsRUFBSzBCLFNBQUwsRUFBZ0J2QixHQUFoQixFQUFxQkMsR0FBckIsQ0FBM0I7QUFDRCxLQUZELE1BRU8sSUFBSXVCLFlBQVksS0FBSyxHQUFyQixFQUEwQjtBQUMvQixhQUFPRCxTQUFQO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsYUFBTzNCLGVBQWUsQ0FDcEJDLEVBRG9CLEVBRXBCc0IsYUFGb0IsRUFHcEJBLGFBQWEsR0FBR2xDLGVBSEksRUFJcEJlLEdBSm9CLEVBS3BCQyxHQUxvQixDQUF0QjtBQU9EO0FBQ0Y7O0FBRUQsU0FBTyxTQUFTd0IsWUFBVCxDQUFzQkMsQ0FBdEIsRUFBeUM7QUFDOUMsUUFBSTFCLEdBQUcsS0FBS2EsR0FBUixJQUFlWixHQUFHLEtBQUthLEdBQTNCLEVBQWdDO0FBQzlCLGFBQU9ZLENBQVA7QUFDRDs7QUFFRCxRQUFJQSxDQUFDLEtBQUssQ0FBVixFQUFhO0FBQ1gsYUFBTyxDQUFQO0FBQ0Q7O0FBQ0QsUUFBSUEsQ0FBQyxLQUFLLENBQVYsRUFBYTtBQUNYLGFBQU8sQ0FBUDtBQUNEOztBQUNELFdBQU9qQyxVQUFVLENBQUN5QixRQUFRLENBQUNRLENBQUQsQ0FBVCxFQUFjYixHQUFkLEVBQW1CQyxHQUFuQixDQUFqQjtBQUNELEdBWkQ7QUFhRCxDQXJFRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmV6aWVyRWFzaW5nIC0gdXNlIGJlemllciBjdXJ2ZSBmb3IgdHJhbnNpdGlvbiBlYXNpbmcgZnVuY3Rpb25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmUvYmV6aWVyLWVhc2luZ1xuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKiBAY29weXJpZ2h0IDIwMTQtMjAxNSBHYcOrdGFuIFJlbmF1ZGVhdS4gTUlUIExpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcbmNvbnN0IE5FV1RPTl9JVEVSQVRJT05TID0gNDtcbmNvbnN0IE5FV1RPTl9NSU5fU0xPUEUgPSAwLjAwMTtcbmNvbnN0IFNVQkRJVklTSU9OX1BSRUNJU0lPTiA9IDAuMDAwMDAwMTtcbmNvbnN0IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TID0gMTA7XG5cbmNvbnN0IGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbmNvbnN0IGtTYW1wbGVTdGVwU2l6ZSA9IDEuMCAvIChrU3BsaW5lVGFibGVTaXplIC0gMS4wKTtcblxuY29uc3QgZmxvYXQzMkFycmF5U3VwcG9ydGVkID0gdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ2Z1bmN0aW9uJztcblxuZnVuY3Rpb24gQShhQTEsIGFBMikge1xuICByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExO1xufVxuZnVuY3Rpb24gQihhQTEsIGFBMikge1xuICByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExO1xufVxuZnVuY3Rpb24gQyhhQTEpIHtcbiAgcmV0dXJuIDMuMCAqIGFBMTtcbn1cblxuLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cbmZ1bmN0aW9uIGNhbGNCZXppZXIoYVQsIGFBMSwgYUEyKSB7XG4gIHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVDtcbn1cblxuLy8gUmV0dXJucyBkeC9kdCBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciBkeS9kdCBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7XG4gIHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpO1xufVxuXG5mdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgbGV0IGN1cnJlbnRYLFxuICAgIGN1cnJlbnRULFxuICAgIGkgPSAwO1xuICBkbyB7XG4gICAgY3VycmVudFQgPSBhQSArIChhQiAtIGFBKSAvIDIuMDtcbiAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICB9IGVsc2Uge1xuICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICB9XG4gIH0gd2hpbGUgKFxuICAgIE1hdGguYWJzKGN1cnJlbnRYKSA+IFNVQkRJVklTSU9OX1BSRUNJU0lPTiAmJlxuICAgICsraSA8IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TXG4gICk7XG4gIHJldHVybiBjdXJyZW50VDtcbn1cblxuZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGFHdWVzc1QsIG1YMSwgbVgyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTkVXVE9OX0lURVJBVElPTlM7ICsraSkge1xuICAgIGNvbnN0IGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHtcbiAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiAgfVxuICByZXR1cm4gYUd1ZXNzVDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiZXppZXIoXG4gIG1YMTogbnVtYmVyLFxuICBtWTE6IG51bWJlcixcbiAgbVgyOiBudW1iZXIsXG4gIG1ZMjogbnVtYmVyLFxuKSB7XG4gIGlmICghKDAgPD0gbVgxICYmIG1YMSA8PSAxICYmIDAgPD0gbVgyICYmIG1YMiA8PSAxKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignYmV6aWVyIHggdmFsdWVzIG11c3QgYmUgaW4gWzAsIDFdIHJhbmdlJyk7XG4gIH1cblxuICAvLyBQcmVjb21wdXRlIHNhbXBsZXMgdGFibGVcbiAgY29uc3Qgc2FtcGxlVmFsdWVzID0gZmxvYXQzMkFycmF5U3VwcG9ydGVkXG4gICAgPyBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpXG4gICAgOiBuZXcgQXJyYXkoa1NwbGluZVRhYmxlU2l6ZSk7XG4gIGlmIChtWDEgIT09IG1ZMSB8fCBtWDIgIT09IG1ZMikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgICBzYW1wbGVWYWx1ZXNbaV0gPSBjYWxjQmV6aWVyKGkgKiBrU2FtcGxlU3RlcFNpemUsIG1YMSwgbVgyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRURm9yWChhWCkge1xuICAgIGxldCBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgIGxldCBjdXJyZW50U2FtcGxlID0gMTtcbiAgICBjb25zdCBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7XG5cbiAgICBmb3IgKFxuICAgICAgO1xuICAgICAgY3VycmVudFNhbXBsZSAhPT0gbGFzdFNhbXBsZSAmJiBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7XG4gICAgICArK2N1cnJlbnRTYW1wbGVcbiAgICApIHtcbiAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgIH1cbiAgICAtLWN1cnJlbnRTYW1wbGU7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcbiAgICBjb25zdCBkaXN0ID1cbiAgICAgIChhWCAtIHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgL1xuICAgICAgKHNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBzYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pO1xuICAgIGNvbnN0IGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuXG4gICAgY29uc3QgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgaWYgKGluaXRpYWxTbG9wZSA+PSBORVdUT05fTUlOX1NMT1BFKSB7XG4gICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoXG4gICAgICAgIGFYLFxuICAgICAgICBpbnRlcnZhbFN0YXJ0LFxuICAgICAgICBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLFxuICAgICAgICBtWDEsXG4gICAgICAgIG1YMixcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIEJlemllckVhc2luZyh4OiBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikge1xuICAgICAgcmV0dXJuIHg7IC8vIGxpbmVhclxuICAgIH1cbiAgICAvLyBCZWNhdXNlIEphdmFTY3JpcHQgbnVtYmVyIGFyZSBpbXByZWNpc2UsIHdlIHNob3VsZCBndWFyYW50ZWUgdGhlIGV4dHJlbWVzIGFyZSByaWdodC5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGlmICh4ID09PSAxKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGNCZXppZXIoZ2V0VEZvclgoeCksIG1ZMSwgbVkyKTtcbiAgfTtcbn07XG4iXX0=