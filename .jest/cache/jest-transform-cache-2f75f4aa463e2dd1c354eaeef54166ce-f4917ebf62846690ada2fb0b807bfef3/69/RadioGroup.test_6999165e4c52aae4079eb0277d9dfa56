693f8694df832ca109af30d46d2c6d96
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var Radio_1 = require("../../Radio");

var RadioGroup_1 = require("../RadioGroup");

var react_1 = tslib_1.__importDefault(require("react"));

var deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

var CAPTION_COLOR = 'rgba(0, 0, 0, 0.38)';
var ERROR_COLOR = '#f44336';
describe('RadioGroup', function () {
  it('should map onValueChange fn to onChange fn', function _callee() {
    var cb, component, radio, onPress;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cb = jest.fn();
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(RadioGroup_1.RadioGroup, {
              onValueChange: cb
            }, react_1.default.createElement(Radio_1.Radio, {
              label: "Option A",
              value: "option-a"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option B",
              value: "option-b"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option C",
              value: "option-c"
            }))));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup));

          case 4:
            radio = component.find('TouchableRipple').first();
            onPress = radio.prop('onPress');
            onPress();
            expect(cb).toBeCalledTimes(1);
            expect(cb).toBeCalledWith('option-a');

          case 9:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should display label & helperText', function _callee2() {
    var component, label, helperText;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(RadioGroup_1.RadioGroup, {
              label: "FooBar",
              helperText: "description"
            }, react_1.default.createElement(Radio_1.Radio, {
              label: "Option A",
              value: "option-a"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option B",
              value: "option-b"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option C",
              value: "option-c"
            }))));
            _context2.next = 3;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup));

          case 3:
            label = component.find('FormControlLabel Text').last();
            helperText = component.find('FormHelperText Text').last();
            expect(label.getElements()).toHaveLength(1);
            expect(label.text()).toBe('FooBar');
            expect(helperText.getElements()).toHaveLength(1);
            expect(helperText.text()).toBe('description');

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should display label & helperText in grey color if error is true', function _callee3() {
    var component, label, helperText, labelStyleProp, labelStyle, helperTextStyleProp, helperTextStyle;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(RadioGroup_1.RadioGroup, {
              label: "FooBar",
              helperText: "description"
            }, react_1.default.createElement(Radio_1.Radio, {
              label: "Option A",
              value: "option-a"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option B",
              value: "option-b"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option C",
              value: "option-c"
            }))));
            _context3.next = 3;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup));

          case 3:
            label = component.find('FormControlLabel Text').last();
            helperText = component.find('FormHelperText Text').last();
            labelStyleProp = label.prop('style');
            labelStyle = deepmerge_1.default(labelStyleProp[0], deepmerge_1.default.all(labelStyleProp[1].filter(function (x) {
              return !!x;
            })));
            expect(labelStyle.color).toBe(CAPTION_COLOR);
            helperTextStyleProp = helperText.prop('style');
            helperTextStyle = deepmerge_1.default(helperTextStyleProp[0], deepmerge_1.default.all(helperTextStyleProp[1].filter(function (x) {
              return !!x;
            })));
            expect(helperTextStyle.color).toBe(CAPTION_COLOR);

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should display label & helperText in red color if error is true', function _callee4() {
    var component, label, helperText, labelStyleProp, labelStyle, helperTextStyleProp, helperTextStyle;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              plugins: [index_1.default]
            }, react_1.default.createElement(RadioGroup_1.RadioGroup, {
              error: true,
              label: "FooBar",
              helperText: "description"
            }, react_1.default.createElement(Radio_1.Radio, {
              label: "Option A",
              value: "option-a"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option B",
              value: "option-b"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option C",
              value: "option-c"
            }))));
            _context4.next = 3;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup));

          case 3:
            label = component.find('FormControlLabel Text').last();
            helperText = component.find('FormHelperText Text').last();
            labelStyleProp = label.prop('style');
            labelStyle = deepmerge_1.default(labelStyleProp[0], deepmerge_1.default.all(labelStyleProp[1].filter(function (x) {
              return !!x;
            })));
            expect(labelStyle.color).toBe(ERROR_COLOR);
            helperTextStyleProp = helperText.prop('style');
            helperTextStyle = deepmerge_1.default(helperTextStyleProp[0], deepmerge_1.default.all(helperTextStyleProp[1].filter(function (x) {
              return !!x;
            })));
            expect(helperTextStyle.color).toBe(ERROR_COLOR);

          case 11:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('should only render display label and not helperText', function _callee5() {
    var component, label, helperText;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                RadioGroup: RadioGroup_1.RadioGroup,
                Radio: Radio_1.Radio
              }
            }, react_1.default.createElement(RadioGroup_1.RadioGroup, {
              label: "FooBar"
            }, react_1.default.createElement(Radio_1.Radio, {
              label: "Option A",
              value: "option-a"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option B",
              value: "option-b"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option C",
              value: "option-c"
            }))));
            _context5.next = 3;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup));

          case 3:
            label = component.find('FormControlLabel Text').last();
            helperText = component.find('FormHelperText Text').last();
            expect(label.getElements()).toHaveLength(1);
            expect(label.text()).toBe('FooBar');
            expect(helperText.getElements()).toHaveLength(0);

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
  it('should only render display helperText and not label', function _callee6() {
    var component, label, helperText;
    return _regenerator.default.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                RadioGroup: RadioGroup_1.RadioGroup,
                Radio: Radio_1.Radio
              }
            }, react_1.default.createElement(RadioGroup_1.RadioGroup, {
              helperText: "description"
            }, react_1.default.createElement(Radio_1.Radio, {
              label: "Option A",
              value: "option-a"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option B",
              value: "option-b"
            }), react_1.default.createElement(Radio_1.Radio, {
              label: "Option C",
              value: "option-c"
            }))));
            _context6.next = 3;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, RadioGroup_1.RadioGroup));

          case 3:
            label = component.find('FormControlLabel Text').last();
            helperText = component.find('FormHelperText Text').last();
            expect(label.getElements()).toHaveLength(0);
            expect(helperText.getElements()).toHaveLength(1);
            expect(helperText.text()).toBe('description');

          case 8:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,