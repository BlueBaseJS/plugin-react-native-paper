{"version":3,"sources":["/Users/adnan/Desktop/plugin-react-native-paper/src/components/RadioGroup/__tests__/RadioGroup.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlueBaseApp } from '@bluebase/core';\nimport Plugin from '../../../index';\nimport { Radio } from '../../Radio';\nimport { RadioGroup } from '../RadioGroup';\nimport React from 'react';\nimport deepmerge from 'deepmerge';\nimport { mount } from 'enzyme';\nimport { waitForElement } from 'enzyme-async-helpers';\n\nconst CAPTION_COLOR = 'rgba(0, 0, 0, 0.38)';\nconst ERROR_COLOR = '#f44336';\n\ndescribe('RadioGroup', () => {\n\n\tit('should map onValueChange fn to onChange fn', async () => {\n\n\t\tconst cb = jest.fn();\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<RadioGroup onValueChange={cb}>\n\t\t\t\t\t<Radio label=\"Option A\" value=\"option-a\" />\n\t\t\t\t\t<Radio label=\"Option B\" value=\"option-b\" />\n\t\t\t\t\t<Radio label=\"Option C\" value=\"option-c\" />\n\t\t\t\t</RadioGroup>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, RadioGroup);\n\n\t\tconst radio = component.find('TouchableRipple').first();\n\n\t\t// expect(component).toMatchSnapshot();\n\t\tconst onPress = radio.prop('onPress') as any;\n\n\t\tonPress();\n\n\t\texpect(cb).toBeCalledTimes(1);\n\t\texpect(cb).toBeCalledWith('option-a');\n\t});\n\n\t// it('should make the radio passed by \"value\" prop as selected on render', async () => {\n\n\t// \tconst component = mount(\n\t// \t\t<BlueBaseApp plugins={[Plugin]}>\n\t// \t\t\t<RadioGroup value=\"option-c\">\n\t// \t\t\t\t<Radio label=\"Option A\" value=\"option-a\" />\n\t// \t\t\t\t<Radio label=\"Option B\" value=\"option-b\" />\n\t// \t\t\t\t<Radio label=\"Option C\" value=\"option-c\" />\n\t// \t\t\t</RadioGroup>\n\t// \t\t</BlueBaseApp>\n\t// \t);\n\n\t// \tawait waitForElement(component as any, RadioGroup);\n\t// \t// expect(component).toMatchSnapshot();\n\n\t// \tconst radio = component.find('[value=\"option-c\"]').last();\n\n\t// \texpect(radio.prop('status')).toBe('checked');\n\t// });\n\n\tit('should display label & helperText', async () => {\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<RadioGroup label=\"FooBar\" helperText=\"description\">\n\t\t\t\t\t<Radio label=\"Option A\" value=\"option-a\" />\n\t\t\t\t\t<Radio label=\"Option B\" value=\"option-b\" />\n\t\t\t\t\t<Radio label=\"Option C\" value=\"option-c\" />\n\t\t\t\t</RadioGroup>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, RadioGroup);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\tconst label = component.find('FormControlLabel Text').last();\n\t\tconst helperText = component.find('FormHelperText Text').last();\n\n\t\texpect(label.getElements()).toHaveLength(1);\n\t\texpect(label.text()).toBe('FooBar');\n\n\t\texpect(helperText.getElements()).toHaveLength(1);\n\t\texpect(helperText.text()).toBe('description');\n\n\t});\n\n\tit('should display label & helperText in grey color if error is true', async () => {\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<RadioGroup label=\"FooBar\" helperText=\"description\">\n\t\t\t\t\t<Radio label=\"Option A\" value=\"option-a\" />\n\t\t\t\t\t<Radio label=\"Option B\" value=\"option-b\" />\n\t\t\t\t\t<Radio label=\"Option C\" value=\"option-c\" />\n\t\t\t\t</RadioGroup>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, RadioGroup);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\tconst label = component.find('FormControlLabel Text').last();\n\t\tconst helperText = component.find('FormHelperText Text').last();\n\n\t\tconst labelStyleProp: any = label.prop('style');\n\t\tconst labelStyle: any = deepmerge(\n\t\t\tlabelStyleProp[0],\n\t\t\tdeepmerge.all(\n\t\t\t\tlabelStyleProp[1].filter((x: any) => !!x)\n\t\t\t)\n\t\t);\n\n\t\texpect(labelStyle.color).toBe(CAPTION_COLOR);\n\n\t\tconst helperTextStyleProp: any = helperText.prop('style');\n\t\tconst helperTextStyle: any = deepmerge(\n\t\t\thelperTextStyleProp[0],\n\t\t\tdeepmerge.all(\n\t\t\t\thelperTextStyleProp[1].filter((x: any) => !!x)\n\t\t\t)\n\t\t);\n\n\t\texpect(helperTextStyle.color).toBe(CAPTION_COLOR);\n\n\t});\n\n\tit('should display label & helperText in red color if error is true', async () => {\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<RadioGroup error label=\"FooBar\" helperText=\"description\">\n\t\t\t\t\t<Radio label=\"Option A\" value=\"option-a\" />\n\t\t\t\t\t<Radio label=\"Option B\" value=\"option-b\" />\n\t\t\t\t\t<Radio label=\"Option C\" value=\"option-c\" />\n\t\t\t\t</RadioGroup>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, RadioGroup);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\tconst label = component.find('FormControlLabel Text').last();\n\t\tconst helperText = component.find('FormHelperText Text').last();\n\n\t\tconst labelStyleProp: any = label.prop('style');\n\t\tconst labelStyle: any = deepmerge(\n\t\t\tlabelStyleProp[0],\n\t\t\tdeepmerge.all(\n\t\t\t\tlabelStyleProp[1].filter((x: any) => !!x)\n\t\t\t)\n\t\t);\n\n\t\texpect(labelStyle.color).toBe(ERROR_COLOR);\n\n\t\tconst helperTextStyleProp: any = helperText.prop('style');\n\t\tconst helperTextStyle: any = deepmerge(\n\t\t\thelperTextStyleProp[0],\n\t\t\tdeepmerge.all(\n\t\t\t\thelperTextStyleProp[1].filter((x: any) => !!x)\n\t\t\t)\n\t\t);\n\n\t\texpect(helperTextStyle.color).toBe(ERROR_COLOR);\n\n\t});\n\n\tit('should only render display label and not helperText', async () => {\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp components={{ RadioGroup, Radio }}>\n\t\t\t\t<RadioGroup label=\"FooBar\">\n\t\t\t\t\t<Radio label=\"Option A\" value=\"option-a\" />\n\t\t\t\t\t<Radio label=\"Option B\" value=\"option-b\" />\n\t\t\t\t\t<Radio label=\"Option C\" value=\"option-c\" />\n\t\t\t\t</RadioGroup>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, RadioGroup);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\tconst label = component.find('FormControlLabel Text').last();\n\t\tconst helperText = component.find('FormHelperText Text').last();\n\n\t\texpect(label.getElements()).toHaveLength(1);\n\t\texpect(label.text()).toBe('FooBar');\n\n\t\texpect(helperText.getElements()).toHaveLength(0);\n\t});\n\n\tit('should only render display helperText and not label', async () => {\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp components={{ RadioGroup, Radio }}>\n\t\t\t\t<RadioGroup helperText=\"description\">\n\t\t\t\t\t<Radio label=\"Option A\" value=\"option-a\" />\n\t\t\t\t\t<Radio label=\"Option B\" value=\"option-b\" />\n\t\t\t\t\t<Radio label=\"Option C\" value=\"option-c\" />\n\t\t\t\t</RadioGroup>\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, RadioGroup);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\tconst label = component.find('FormControlLabel Text').last();\n\t\tconst helperText = component.find('FormHelperText Text').last();\n\n\t\texpect(label.getElements()).toHaveLength(0);\n\n\t\texpect(helperText.getElements()).toHaveLength(1);\n\t\texpect(helperText.text()).toBe('description');\n\t});\n\n});\n\n\n"]}