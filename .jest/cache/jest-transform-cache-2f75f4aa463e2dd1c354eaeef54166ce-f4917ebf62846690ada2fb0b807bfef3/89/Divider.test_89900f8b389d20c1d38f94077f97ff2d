385f3f8d9e0ed1ba241ddd600129fa9c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var components_1 = require("@bluebase/components");

var index_1 = tslib_1.__importDefault(require("../../../index"));

var react_1 = tslib_1.__importDefault(require("react"));

var react_test_renderer_1 = tslib_1.__importDefault(require("react-test-renderer"));

var deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));

describe('android enviornment', function () {
  test('Divider component with inset prop=true', function (done) {
    var rendered = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, {
      plugins: [index_1.default]
    }, react_1.default.createElement(components_1.Divider, {
      inset: true
    })));
    setTimeout(function () {
      var styleProp = rendered.toJSON().children[0].props.style;
      var style = deepmerge_1.default.all(styleProp.filter(function (x) {
        return x !== undefined;
      }));
      expect(style.marginLeft).toBeGreaterThan(0);
      done();
    });
  });
  test('Divider component with inset prop=false', function (done) {
    var rendered = react_test_renderer_1.default.create(react_1.default.createElement(core_1.BlueBaseApp, {
      plugins: [index_1.default]
    }, react_1.default.createElement(components_1.Divider, {
      inset: false
    })));
    setTimeout(function () {
      var styleProp = rendered.toJSON().children[0].props.style;
      var style = deepmerge_1.default.all(styleProp.filter(function (x) {
        return x !== undefined;
      }));
      expect(style.marginLeft).toBeUndefined();
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG5hbi9EZXNrdG9wL3BsdWdpbi1yZWFjdC1uYXRpdmUtcGFwZXIvc3JjL2NvbXBvbmVudHMvRGl2aWRlci9fX3Rlc3RzX18vRGl2aWRlci50ZXN0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxzQkFBQSxDQUFBOztBQUNBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLHFCQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEscUJBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsV0FBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsT0FBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBOztBQUVBLFFBQVEsQ0FBQyxxQkFBRCxFQUF3QixZQUFLO0FBRXBDLEVBQUEsSUFBSSxDQUFDLHdDQUFELEVBQTJDLFVBQUMsSUFBRCxFQUFTO0FBRXZELFFBQU0sUUFBUSxHQUFHLHFCQUFBLENBQUEsT0FBQSxDQUFhLE1BQWIsQ0FDaEIsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsTUFBQSxDQUFBLFdBQUQsRUFBWTtBQUFDLE1BQUEsT0FBTyxFQUFFLENBQUMsT0FBQSxDQUFBLE9BQUQ7QUFBVixLQUFaLEVBQ0MsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFBLE9BQUQsRUFBUTtBQUFDLE1BQUEsS0FBSyxFQUFFO0FBQVIsS0FBUixDQURELENBRGdCLENBQWpCO0FBTUEsSUFBQSxVQUFVLENBQUMsWUFBSztBQUdmLFVBQU0sU0FBUyxHQUFXLFFBQWdCLENBQUMsTUFBakIsR0FBMEIsUUFBMUIsQ0FBbUMsQ0FBbkMsRUFBc0MsS0FBdEMsQ0FBNEMsS0FBdEU7QUFDQSxVQUFNLEtBQUssR0FBRyxXQUFBLENBQUEsT0FBQSxDQUFVLEdBQVYsQ0FBYyxTQUFTLENBQUMsTUFBVixDQUFpQixVQUFBLENBQUM7QUFBQSxlQUFJLENBQUMsS0FBSyxTQUFWO0FBQUEsT0FBbEIsQ0FBZCxDQUFkO0FBRUEsTUFBQSxNQUFNLENBQUUsS0FBYSxDQUFDLFVBQWhCLENBQU4sQ0FBa0MsZUFBbEMsQ0FBa0QsQ0FBbEQ7QUFDQSxNQUFBLElBQUk7QUFDSixLQVJTLENBQVY7QUFVQSxHQWxCRyxDQUFKO0FBb0JBLEVBQUEsSUFBSSxDQUFDLHlDQUFELEVBQTRDLFVBQUMsSUFBRCxFQUFTO0FBRXhELFFBQU0sUUFBUSxHQUFHLHFCQUFBLENBQUEsT0FBQSxDQUFhLE1BQWIsQ0FDaEIsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsTUFBQSxDQUFBLFdBQUQsRUFBWTtBQUFDLE1BQUEsT0FBTyxFQUFFLENBQUMsT0FBQSxDQUFBLE9BQUQ7QUFBVixLQUFaLEVBQ0MsT0FBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFBLE9BQUQsRUFBUTtBQUFDLE1BQUEsS0FBSyxFQUFFO0FBQVIsS0FBUixDQURELENBRGdCLENBQWpCO0FBTUEsSUFBQSxVQUFVLENBQUMsWUFBSztBQUdmLFVBQU0sU0FBUyxHQUFXLFFBQWdCLENBQUMsTUFBakIsR0FBMEIsUUFBMUIsQ0FBbUMsQ0FBbkMsRUFBc0MsS0FBdEMsQ0FBNEMsS0FBdEU7QUFDQSxVQUFNLEtBQUssR0FBRyxXQUFBLENBQUEsT0FBQSxDQUFVLEdBQVYsQ0FBYyxTQUFTLENBQUMsTUFBVixDQUFpQixVQUFBLENBQUM7QUFBQSxlQUFJLENBQUMsS0FBSyxTQUFWO0FBQUEsT0FBbEIsQ0FBZCxDQUFkO0FBRUEsTUFBQSxNQUFNLENBQUUsS0FBYSxDQUFDLFVBQWhCLENBQU4sQ0FBa0MsYUFBbEM7QUFDQSxNQUFBLElBQUk7QUFDSixLQVJTLENBQVY7QUFVQSxHQWxCRyxDQUFKO0FBb0JBLENBMUNPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbHVlQmFzZUFwcCB9IGZyb20gJ0BibHVlYmFzZS9jb3JlJztcbmltcG9ydCB7IERpdmlkZXIgfSBmcm9tICdAYmx1ZWJhc2UvY29tcG9uZW50cyc7XG5pbXBvcnQgUGx1Z2luIGZyb20gJy4uLy4uLy4uL2luZGV4JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGVzdFJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuXG5kZXNjcmliZSgnYW5kcm9pZCBlbnZpb3JubWVudCcsICgpID0+IHtcblxuXHR0ZXN0KCdEaXZpZGVyIGNvbXBvbmVudCB3aXRoIGluc2V0IHByb3A9dHJ1ZScsIChkb25lKSA9PiB7XG5cblx0XHRjb25zdCByZW5kZXJlZCA9IFRlc3RSZW5kZXJlci5jcmVhdGUoXG5cdFx0XHQ8Qmx1ZUJhc2VBcHAgcGx1Z2lucz17W1BsdWdpbl19PlxuXHRcdFx0XHQ8RGl2aWRlciBpbnNldD17dHJ1ZX0gLz5cblx0XHRcdDwvQmx1ZUJhc2VBcHA+XG5cdFx0KTtcblxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Ly8gZXhwZWN0KHJlbmRlcmVkKS50b01hdGNoU25hcHNob3QoKTtcblxuXHRcdFx0Y29uc3Qgc3R5bGVQcm9wOiBhbnlbXSA9IChyZW5kZXJlZCBhcyBhbnkpLnRvSlNPTigpLmNoaWxkcmVuWzBdLnByb3BzLnN0eWxlO1xuXHRcdFx0Y29uc3Qgc3R5bGUgPSBkZWVwbWVyZ2UuYWxsKHN0eWxlUHJvcC5maWx0ZXIoeCA9PiB4ICE9PSB1bmRlZmluZWQpKTtcblxuXHRcdFx0ZXhwZWN0KChzdHlsZSBhcyBhbnkpLm1hcmdpbkxlZnQpLnRvQmVHcmVhdGVyVGhhbigwKTtcblx0XHRcdGRvbmUoKTtcblx0XHR9KTtcblxuXHR9KTtcblxuXHR0ZXN0KCdEaXZpZGVyIGNvbXBvbmVudCB3aXRoIGluc2V0IHByb3A9ZmFsc2UnLCAoZG9uZSkgPT4ge1xuXG5cdFx0Y29uc3QgcmVuZGVyZWQgPSBUZXN0UmVuZGVyZXIuY3JlYXRlKFxuXHRcdFx0PEJsdWVCYXNlQXBwIHBsdWdpbnM9e1tQbHVnaW5dfT5cblx0XHRcdFx0PERpdmlkZXIgaW5zZXQ9e2ZhbHNlfSAvPlxuXHRcdFx0PC9CbHVlQmFzZUFwcD5cblx0XHQpO1xuXG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHQvLyBleHBlY3QocmVuZGVyZWQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuXG5cdFx0XHRjb25zdCBzdHlsZVByb3A6IGFueVtdID0gKHJlbmRlcmVkIGFzIGFueSkudG9KU09OKCkuY2hpbGRyZW5bMF0ucHJvcHMuc3R5bGU7XG5cdFx0XHRjb25zdCBzdHlsZSA9IGRlZXBtZXJnZS5hbGwoc3R5bGVQcm9wLmZpbHRlcih4ID0+IHggIT09IHVuZGVmaW5lZCkpO1xuXG5cdFx0XHRleHBlY3QoKHN0eWxlIGFzIGFueSkubWFyZ2luTGVmdCkudG9CZVVuZGVmaW5lZCgpO1xuXHRcdFx0ZG9uZSgpO1xuXHRcdH0pO1xuXG5cdH0pO1xuXG59KTtcbiJdfQ==