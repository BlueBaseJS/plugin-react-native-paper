{"version":3,"sources":["/Users/adnan/Desktop/plugin-react-native-paper/src/components/Divider/__tests__/Divider.test.tsx"],"names":[],"mappings":";;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,QAAQ,CAAC,qBAAD,EAAwB,YAAK;AAEpC,EAAA,IAAI,CAAC,wCAAD,EAA2C,UAAC,IAAD,EAAS;AAEvD,QAAM,QAAQ,GAAG,qBAAA,CAAA,OAAA,CAAa,MAAb,CAChB,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAA,WAAD,EAAY;AAAC,MAAA,OAAO,EAAE,CAAC,OAAA,CAAA,OAAD;AAAV,KAAZ,EACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAA,OAAD,EAAQ;AAAC,MAAA,KAAK,EAAE;AAAR,KAAR,CADD,CADgB,CAAjB;AAMA,IAAA,UAAU,CAAC,YAAK;AAGf,UAAM,SAAS,GAAW,QAAgB,CAAC,MAAjB,GAA0B,QAA1B,CAAmC,CAAnC,EAAsC,KAAtC,CAA4C,KAAtE;AACA,UAAM,KAAK,GAAG,WAAA,CAAA,OAAA,CAAU,GAAV,CAAc,SAAS,CAAC,MAAV,CAAiB,UAAA,CAAC;AAAA,eAAI,CAAC,KAAK,SAAV;AAAA,OAAlB,CAAd,CAAd;AAEA,MAAA,MAAM,CAAE,KAAa,CAAC,UAAhB,CAAN,CAAkC,eAAlC,CAAkD,CAAlD;AACA,MAAA,IAAI;AACJ,KARS,CAAV;AAUA,GAlBG,CAAJ;AAoBA,EAAA,IAAI,CAAC,yCAAD,EAA4C,UAAC,IAAD,EAAS;AAExD,QAAM,QAAQ,GAAG,qBAAA,CAAA,OAAA,CAAa,MAAb,CAChB,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAA,WAAD,EAAY;AAAC,MAAA,OAAO,EAAE,CAAC,OAAA,CAAA,OAAD;AAAV,KAAZ,EACC,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAA,OAAD,EAAQ;AAAC,MAAA,KAAK,EAAE;AAAR,KAAR,CADD,CADgB,CAAjB;AAMA,IAAA,UAAU,CAAC,YAAK;AAGf,UAAM,SAAS,GAAW,QAAgB,CAAC,MAAjB,GAA0B,QAA1B,CAAmC,CAAnC,EAAsC,KAAtC,CAA4C,KAAtE;AACA,UAAM,KAAK,GAAG,WAAA,CAAA,OAAA,CAAU,GAAV,CAAc,SAAS,CAAC,MAAV,CAAiB,UAAA,CAAC;AAAA,eAAI,CAAC,KAAK,SAAV;AAAA,OAAlB,CAAd,CAAd;AAEA,MAAA,MAAM,CAAE,KAAa,CAAC,UAAhB,CAAN,CAAkC,aAAlC;AACA,MAAA,IAAI;AACJ,KARS,CAAV;AAUA,GAlBG,CAAJ;AAoBA,CA1CO,CAAR","sourcesContent":["import { BlueBaseApp } from '@bluebase/core';\nimport { Divider } from '@bluebase/components';\nimport Plugin from '../../../index';\nimport React from 'react';\nimport TestRenderer from 'react-test-renderer';\nimport deepmerge from 'deepmerge';\n\ndescribe('android enviornment', () => {\n\n\ttest('Divider component with inset prop=true', (done) => {\n\n\t\tconst rendered = TestRenderer.create(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<Divider inset={true} />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tsetTimeout(() => {\n\t\t\t// expect(rendered).toMatchSnapshot();\n\n\t\t\tconst styleProp: any[] = (rendered as any).toJSON().children[0].props.style;\n\t\t\tconst style = deepmerge.all(styleProp.filter(x => x !== undefined));\n\n\t\t\texpect((style as any).marginLeft).toBeGreaterThan(0);\n\t\t\tdone();\n\t\t});\n\n\t});\n\n\ttest('Divider component with inset prop=false', (done) => {\n\n\t\tconst rendered = TestRenderer.create(\n\t\t\t<BlueBaseApp plugins={[Plugin]}>\n\t\t\t\t<Divider inset={false} />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tsetTimeout(() => {\n\t\t\t// expect(rendered).toMatchSnapshot();\n\n\t\t\tconst styleProp: any[] = (rendered as any).toJSON().children[0].props.style;\n\t\t\tconst style = deepmerge.all(styleProp.filter(x => x !== undefined));\n\n\t\t\texpect((style as any).marginLeft).toBeUndefined();\n\t\t\tdone();\n\t\t});\n\n\t});\n\n});\n"]}