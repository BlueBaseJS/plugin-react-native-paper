28425e8a42810d2c40dac61831be706b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tslib_1 = require("tslib");

var core_1 = require("@bluebase/core");

var react_1 = tslib_1.__importDefault(require("react"));

var Switch_1 = require("../Switch");

var components_1 = require("@bluebase/components");

var enzyme_1 = require("enzyme");

var enzyme_async_helpers_1 = require("enzyme-async-helpers");

describe.only('Switch', function () {
  it('should set the checked to true when checked is true', function () {
    var component = enzyme_1.mount(react_1.default.createElement(Switch_1.Switch, {
      checked: true
    }));
    expect(component.find('Switch').first().prop('value')).toEqual(true);
  });
  it('should set the checked to false when checked is false', function () {
    var component = enzyme_1.mount(react_1.default.createElement(Switch_1.Switch, {
      checked: false
    }));
    expect(component.find('Switch').first().prop('value')).toEqual(false);
  });
  it('should pass the color as is when set to "primary"', function _callee() {
    var BBSwitch, component;
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            BBSwitch = components_1.getComponent('Switch');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Switch: Switch_1.Switch
              }
            }, react_1.default.createElement(BBSwitch, {
              color: "primary"
            })));
            _context.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBSwitch));

          case 4:
            expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#3f51b5');

          case 5:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('should pass the color as is when set to "secondary"', function _callee2() {
    var BBSwitch, component;
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            BBSwitch = components_1.getComponent('Switch');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Switch: Switch_1.Switch
              }
            }, react_1.default.createElement(BBSwitch, {
              color: "secondary"
            })));
            _context2.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBSwitch));

          case 4:
            expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#f50057');

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('should pass the color as is when set to "default"', function _callee3() {
    var BBSwitch, component;
    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            BBSwitch = components_1.getComponent('Switch');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Switch: Switch_1.Switch
              }
            }, react_1.default.createElement(BBSwitch, {
              color: "default"
            })));
            _context3.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBSwitch));

          case 4:
            expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#03dac4');

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('should set the color prop to undefined and create classes for custom colors', function _callee4() {
    var BBSwitch, component;
    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            BBSwitch = components_1.getComponent('Switch');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Switch: Switch_1.Switch
              }
            }, react_1.default.createElement(BBSwitch, {
              color: "red"
            })));
            _context4.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBSwitch));

          case 4:
            expect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('red');

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('should set the label component', function _callee5() {
    var BBSwitch, component;
    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            BBSwitch = components_1.getComponent('Switch');
            component = enzyme_1.mount(react_1.default.createElement(core_1.BlueBaseApp, {
              components: {
                Switch: Switch_1.Switch
              }
            }, react_1.default.createElement(BBSwitch, {
              label: "Foo"
            })));
            _context5.next = 4;
            return _regenerator.default.awrap(enzyme_async_helpers_1.waitForElement(component, BBSwitch));

          case 4:
            expect(component.find('Switch Text').last().text()).toEqual('Foo');

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,