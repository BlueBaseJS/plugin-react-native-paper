{"version":3,"sources":["/Users/adnan/Desktop/plugin-react-native-paper/src/components/Switch/__tests__/Switch.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { BlueBaseApp } from '@bluebase/core';\nimport React from 'react';\nimport { Switch } from '../Switch';\nimport { getComponent } from '@bluebase/components';\nimport { mount } from 'enzyme';\nimport { waitForElement } from 'enzyme-async-helpers';\n\ndescribe.only('Switch', () => {\n\n\tit('should set the checked to true when checked is true', () => {\n\t\tconst component = mount(\n\t\t\t<Switch checked />\n\t\t);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\texpect(component.find('Switch').first().prop('value')).toEqual(true);\n\t});\n\n\tit('should set the checked to false when checked is false', () => {\n\t\tconst component = mount(\n\t\t\t<Switch checked={false} />\n\t\t);\n\n\t\texpect(component.find('Switch').first().prop('value')).toEqual(false);\n\t});\n\n\tit('should pass the color as is when set to \"primary\"', async () => {\n\n\t\tconst BBSwitch = getComponent('Switch');\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp components={{ Switch }}>\n\t\t\t\t<BBSwitch color=\"primary\" />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, BBSwitch);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\texpect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#3f51b5');\n\t});\n\n\tit('should pass the color as is when set to \"secondary\"', async () => {\n\n\t\tconst BBSwitch = getComponent('Switch');\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp components={{ Switch }}>\n\t\t\t\t<BBSwitch color=\"secondary\" />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, BBSwitch);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\texpect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#f50057');\n\t});\n\n\tit('should pass the color as is when set to \"default\"', async () => {\n\n\t\tconst BBSwitch = getComponent('Switch');\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp components={{ Switch }}>\n\t\t\t\t<BBSwitch color=\"default\" />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, BBSwitch);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\texpect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('#03dac4');\n\t});\n\n\tit('should set the color prop to undefined and create classes for custom colors', async () => {\n\t\tconst BBSwitch = getComponent('Switch');\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp components={{ Switch }}>\n\t\t\t\t<BBSwitch color=\"red\" />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, BBSwitch);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\texpect(component.find('RCTSwitch').last().prop('onTintColor')).toEqual('red');\n\t});\n\n\tit('should set the label component', async () => {\n\t\tconst BBSwitch = getComponent('Switch');\n\n\t\tconst component = mount(\n\t\t\t<BlueBaseApp components={{ Switch }}>\n\t\t\t\t<BBSwitch label=\"Foo\" />\n\t\t\t</BlueBaseApp>\n\t\t);\n\n\t\tawait waitForElement(component as any, BBSwitch);\n\n\t\t// expect(component).toMatchSnapshot();\n\t\texpect(component.find('Switch Text').last().text()).toEqual('Foo');\n\t});\n\n});\n\n\n"]}