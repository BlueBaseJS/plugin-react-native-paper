933f4444de72e51cf1107502369c7b37
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

var Searchbar = function (_React$Component) {
  (0, _inherits2.default)(Searchbar, _React$Component);

  function Searchbar() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Searchbar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Searchbar)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_handleClearPress", function () {
      _this.clear();

      _this.props.onChangeText && _this.props.onChangeText('');
    });
    return _this;
  }

  (0, _createClass2.default)(Searchbar, [{
    key: "setNativeProps",
    value: function setNativeProps() {
      var _this$_root;

      return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      return this._root && this._root.isFocused();
    }
  }, {
    key: "clear",
    value: function clear() {
      return this._root && this._root.clear();
    }
  }, {
    key: "focus",
    value: function focus() {
      return this._root && this._root.focus();
    }
  }, {
    key: "blur",
    value: function blur() {
      return this._root && this._root.blur();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          placeholder = _this$props.placeholder,
          onIconPress = _this$props.onIconPress,
          icon = _this$props.icon,
          value = _this$props.value,
          theme = _this$props.theme,
          style = _this$props.style,
          customIconColor = _this$props.iconColor,
          inputStyle = _this$props.inputStyle,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["placeholder", "onIconPress", "icon", "value", "theme", "style", "iconColor", "inputStyle"]);
      var colors = theme.colors,
          roundness = theme.roundness,
          dark = theme.dark,
          fonts = theme.fonts;
      var textColor = colors.text;
      var fontFamily = fonts.regular;
      var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());
      var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
      return React.createElement(_Surface.default, {
        style: [{
          borderRadius: roundness,
          elevation: 4
        }, styles.container, style]
      }, React.createElement(_IconButton.default, {
        borderless: true,
        rippleColor: rippleColor,
        onPress: onIconPress,
        color: iconColor,
        icon: icon || 'search'
      }), React.createElement(_reactNative.TextInput, (0, _extends2.default)({
        style: [styles.input, {
          color: textColor,
          fontFamily: fontFamily
        }, inputStyle],
        placeholder: placeholder || '',
        placeholderTextColor: colors.placeholder,
        selectionColor: colors.primary,
        underlineColorAndroid: "transparent",
        returnKeyType: "search",
        keyboardAppearance: dark ? 'dark' : 'light',
        accessibilityTraits: "search",
        accessibilityRole: "search",
        ref: function ref(c) {
          _this2._root = c;
        },
        value: value
      }, rest)), React.createElement(_IconButton.default, {
        borderless: true,
        disabled: !value,
        color: value ? iconColor : 'rgba(255, 255, 255, 0)',
        rippleColor: rippleColor,
        onPress: this._handleClearPress,
        icon: "close",
        accessibilityTraits: "button",
        accessibilityComponentType: "button",
        accessibilityRole: "button"
      }));
    }
  }]);
  return Searchbar;
}(React.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  input: {
    flex: 1,
    fontSize: 18,
    paddingLeft: 8,
    alignSelf: 'stretch',
    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
    minWidth: 0
  }
});

var _default = (0, _theming.withTheme)(Searchbar);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlYXJjaGJhci5qcyJdLCJuYW1lcyI6WyJTZWFyY2hiYXIiLCJjbGVhciIsInByb3BzIiwib25DaGFuZ2VUZXh0IiwiX3Jvb3QiLCJzZXROYXRpdmVQcm9wcyIsImlzRm9jdXNlZCIsImZvY3VzIiwiYmx1ciIsInBsYWNlaG9sZGVyIiwib25JY29uUHJlc3MiLCJpY29uIiwidmFsdWUiLCJ0aGVtZSIsInN0eWxlIiwiY3VzdG9tSWNvbkNvbG9yIiwiaWNvbkNvbG9yIiwiaW5wdXRTdHlsZSIsInJlc3QiLCJjb2xvcnMiLCJyb3VuZG5lc3MiLCJkYXJrIiwiZm9udHMiLCJ0ZXh0Q29sb3IiLCJ0ZXh0IiwiZm9udEZhbWlseSIsInJlZ3VsYXIiLCJhbHBoYSIsInJnYiIsInN0cmluZyIsInJpcHBsZUNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiZWxldmF0aW9uIiwic3R5bGVzIiwiY29udGFpbmVyIiwiaW5wdXQiLCJjb2xvciIsInByaW1hcnkiLCJjIiwiX2hhbmRsZUNsZWFyUHJlc3MiLCJSZWFjdCIsIkNvbXBvbmVudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImZsZXgiLCJmb250U2l6ZSIsInBhZGRpbmdMZWZ0IiwiYWxpZ25TZWxmIiwidGV4dEFsaWduIiwiSTE4bk1hbmFnZXIiLCJpc1JUTCIsIm1pbldpZHRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7SUF1RU1BLFM7Ozs7Ozs7Ozs7Ozs7OztvR0FDZ0IsWUFBTTtBQUN4QixZQUFLQyxLQUFMOztBQUNBLFlBQUtDLEtBQUwsQ0FBV0MsWUFBWCxJQUEyQixNQUFLRCxLQUFMLENBQVdDLFlBQVgsQ0FBd0IsRUFBeEIsQ0FBM0I7QUFDRCxLOzs7Ozs7cUNBT3VCO0FBQUE7O0FBQ3RCLGFBQU8sS0FBS0MsS0FBTCxJQUFjLG9CQUFLQSxLQUFMLEVBQVdDLGNB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QUFha0MsQ0FBYjtBQUNELFNBWkg7QUFhRSxRQUFBLEtBQUssRUFBRTFCO0FBYlQsU0FjTU0sSUFkTixFQWRGLEVBOEJFLG9CQUFDLG1CQUFEO0FBQ0UsUUFBQSxVQUFVLE1BRFo7QUFFRSxRQUFBLFFBQVEsRUFBRSxDQUFDTixLQUZiO0FBR0UsUUFBQSxLQUFLLEVBQUVBLEtBQUssR0FBR0ksU0FBSCxHQUFlLHdCQUg3QjtBQUlFLFFBQUEsV0FBVyxFQUFFYyxXQUpmO0FBS0UsUUFBQSxPQUFPLEVBQUUsS0FBS1MsaUJBTGhCO0FBTUUsUUFBQSxJQUFJLEVBQUMsT0FOUDtBQU9FLFFBQUEsbUJBQW1CLEVBQUMsUUFQdEI7QUFRRSxRQUFBLDBCQUEwQixFQUFDLFFBUjdCO0FBU0UsUUFBQSxpQkFBaUIsRUFBQztBQVRwQixRQTlCRixDQURGO0FBNENEOzs7RUFuSHFCQyxLQUFLLENBQUNDLFM7O0FBc0g5QixJQUFNUixNQUFNLEdBQUdTLHdCQUFXQyxNQUFYLENBQWtCO0FBQy9CVCxFQUFBQSxTQUFTLEVBQUU7QUFDVFUsSUFBQUEsYUFBYSxFQUFFLEtBRE47QUFFVEMsSUFBQUEsVUFBVSxFQUFFO0FBRkgsR0FEb0I7QUFLL0JWLEVBQUFBLEtBQUssRUFBRTtBQUNMVyxJQUFBQSxJQUFJLEVBQUUsQ0FERDtBQUVMQyxJQUFBQSxRQUFRLEVBQUUsRUFGTDtBQUdMQyxJQUFBQSxXQUFXLEVBQUUsQ0FIUjtBQUlMQyxJQUFBQSxTQUFTLEVBQUUsU0FKTjtBQUtMQyxJQUFBQSxTQUFTLEVBQUVDLHlCQUFZQyxLQUFaLEdBQW9CLE9BQXBCLEdBQThCLE1BTHBDO0FBTUxDLElBQUFBLFFBQVEsRUFBRTtBQU5MO0FBTHdCLENBQWxCLENBQWY7O2VBZWUsd0JBQVVyRCxTQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBUZXh0SW5wdXQsIEkxOG5NYW5hZ2VyIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBjb2xvciBmcm9tICdjb2xvcic7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuL0ljb25CdXR0b24nO1xuaW1wb3J0IFN1cmZhY2UgZnJvbSAnLi9TdXJmYWNlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uL2NvcmUvdGhlbWluZyc7XG5pbXBvcnQgdHlwZSB7IFRoZW1lIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJY29uU291cmNlIH0gZnJvbSAnLi9JY29uJztcblxudHlwZSBQcm9wcyA9IFJlYWN0LkVsZW1lbnRDb25maWc8dHlwZW9mIFRleHRJbnB1dD4gJiB7fFxuICAvKipcbiAgICogSGludCB0ZXh0IHNob3duIHdoZW4gdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgKi9cbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHRleHQgaW5wdXQuXG4gICAqL1xuICB2YWx1ZTogc3RyaW5nLFxuICAvKipcbiAgICogSWNvbiBuYW1lIGZvciB0aGUgbGVmdCBpY29uIGJ1dHRvbiAoc2VlIGBvbkljb25QcmVzc2ApLlxuICAgKi9cbiAgaWNvbj86IEljb25Tb3VyY2UsXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB0ZXh0IGlucHV0J3MgdGV4dCBjaGFuZ2VzLlxuICAgKi9cbiAgb25DaGFuZ2VUZXh0PzogKHF1ZXJ5OiBzdHJpbmcpID0+IHZvaWQsXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0byBleGVjdXRlIGlmIHdlIHdhbnQgdGhlIGxlZnQgaWNvbiB0byBhY3QgYXMgYnV0dG9uLlxuICAgKi9cbiAgb25JY29uUHJlc3M/OiAoKSA9PiBtaXhlZCxcbiAgLyoqXG4gICAqIFNldCBzdHlsZSBvZiB0aGUgVGV4dElucHV0IGNvbXBvbmVudCBpbnNpZGUgdGhlIHNlYXJjaGJhclxuICAgKi9cbiAgaW5wdXRTdHlsZT86IGFueSxcbiAgc3R5bGU/OiBhbnksXG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFRoZW1lLFxuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciBpY29uLCBkZWZhdWx0IHdpbGwgYmUgZGVyaXZlZCBmcm9tIHRoZW1lXG4gICAqL1xuICBpY29uQ29sb3I/OiBzdHJpbmcsXG58fTtcblxuLyoqXG4gKiBTZWFyY2hiYXIgaXMgYSBzaW1wbGUgaW5wdXQgYm94IHdoZXJlIHVzZXJzIGNhbiB0eXBlIHNlYXJjaCBxdWVyaWVzLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8aW1nIGNsYXNzPVwibWVkaXVtXCIgc3JjPVwic2NyZWVuc2hvdHMvc2VhcmNoYmFyLnBuZ1wiIC8+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IFNlYXJjaGJhciB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICogICBzdGF0ZSA9IHtcbiAqICAgICBmaXJzdFF1ZXJ5OiAnJyxcbiAqICAgfTtcbiAqXG4gKiAgIHJlbmRlcigpIHtcbiAqICAgICBjb25zdCB7IGZpcnN0UXVlcnkgfSA9IHRoaXMuc3RhdGU7XG4gKiAgICAgcmV0dXJuIChcbiAqICAgICAgIDxTZWFyY2hiYXJcbiAqICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2hcIlxuICogICAgICAgICBvbkNoYW5nZVRleHQ9e3F1ZXJ5ID0+IHsgdGhpcy5zZXRTdGF0ZSh7IGZpcnN0UXVlcnk6IHF1ZXJ5IH0pOyB9fVxuICogICAgICAgICB2YWx1ZT17Zmlyc3RRdWVyeX1cbiAqICAgICAgIC8+XG4gKiAgICAgKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIFNlYXJjaGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBfaGFuZGxlQ2xlYXJQcmVzcyA9ICgpID0+IHtcbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZVRleHQgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZVRleHQoJycpO1xuICB9O1xuXG4gIF9yb290OiA/VGV4dElucHV0O1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHNldE5hdGl2ZVByb3BzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdCAmJiB0aGlzLl9yb290LnNldE5hdGl2ZVByb3BzKC4uLmFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBpbnB1dCBpcyBjdXJyZW50bHkgZm9jdXNlZCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAqL1xuICBpc0ZvY3VzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5pc0ZvY3VzZWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCB0ZXh0IGZyb20gdGhlIFRleHRJbnB1dC5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIHJldHVybiB0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb2N1c2VzIHRoZSBpbnB1dC5cbiAgICovXG4gIGZvY3VzKCkge1xuICAgIHJldHVybiB0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QuZm9jdXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGZvY3VzIGZyb20gdGhlIGlucHV0LlxuICAgKi9cbiAgYmx1cigpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdCAmJiB0aGlzLl9yb290LmJsdXIoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIG9uSWNvblByZXNzLFxuICAgICAgaWNvbixcbiAgICAgIHZhbHVlLFxuICAgICAgdGhlbWUsXG4gICAgICBzdHlsZSxcbiAgICAgIGljb25Db2xvcjogY3VzdG9tSWNvbkNvbG9yLFxuICAgICAgaW5wdXRTdHlsZSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGNvbG9ycywgcm91bmRuZXNzLCBkYXJrLCBmb250cyB9ID0gdGhlbWU7XG4gICAgY29uc3QgdGV4dENvbG9yID0gY29sb3JzLnRleHQ7XG4gICAgY29uc3QgZm9udEZhbWlseSA9IGZvbnRzLnJlZ3VsYXI7XG4gICAgY29uc3QgaWNvbkNvbG9yID1cbiAgICAgIGN1c3RvbUljb25Db2xvciB8fFxuICAgICAgKGRhcmtcbiAgICAgICAgPyB0ZXh0Q29sb3JcbiAgICAgICAgOiBjb2xvcih0ZXh0Q29sb3IpXG4gICAgICAgICAgICAuYWxwaGEoMC41NClcbiAgICAgICAgICAgIC5yZ2IoKVxuICAgICAgICAgICAgLnN0cmluZygpKTtcbiAgICBjb25zdCByaXBwbGVDb2xvciA9IGNvbG9yKHRleHRDb2xvcilcbiAgICAgIC5hbHBoYSgwLjMyKVxuICAgICAgLnJnYigpXG4gICAgICAuc3RyaW5nKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFN1cmZhY2VcbiAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICB7IGJvcmRlclJhZGl1czogcm91bmRuZXNzLCBlbGV2YXRpb246IDQgfSxcbiAgICAgICAgICBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICAgIHN0eWxlLFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgIGJvcmRlcmxlc3NcbiAgICAgICAgICByaXBwbGVDb2xvcj17cmlwcGxlQ29sb3J9XG4gICAgICAgICAgb25QcmVzcz17b25JY29uUHJlc3N9XG4gICAgICAgICAgY29sb3I9e2ljb25Db2xvcn1cbiAgICAgICAgICBpY29uPXtpY29uIHx8ICdzZWFyY2gnfVxuICAgICAgICAvPlxuICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgc3R5bGU9e1tzdHlsZXMuaW5wdXQsIHsgY29sb3I6IHRleHRDb2xvciwgZm9udEZhbWlseSB9LCBpbnB1dFN0eWxlXX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXIgfHwgJyd9XG4gICAgICAgICAgcGxhY2Vob2xkZXJUZXh0Q29sb3I9e2NvbG9ycy5wbGFjZWhvbGRlcn1cbiAgICAgICAgICBzZWxlY3Rpb25Db2xvcj17Y29sb3JzLnByaW1hcnl9XG4gICAgICAgICAgdW5kZXJsaW5lQ29sb3JBbmRyb2lkPVwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgIHJldHVybktleVR5cGU9XCJzZWFyY2hcIlxuICAgICAgICAgIGtleWJvYXJkQXBwZWFyYW5jZT17ZGFyayA/ICdkYXJrJyA6ICdsaWdodCd9XG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVRyYWl0cz1cInNlYXJjaFwiXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9XCJzZWFyY2hcIlxuICAgICAgICAgIHJlZj17YyA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yb290ID0gYztcbiAgICAgICAgICB9fVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgLz5cbiAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICBib3JkZXJsZXNzXG4gICAgICAgICAgZGlzYWJsZWQ9eyF2YWx1ZX1cbiAgICAgICAgICBjb2xvcj17dmFsdWUgPyBpY29uQ29sb3IgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKSd9XG4gICAgICAgICAgcmlwcGxlQ29sb3I9e3JpcHBsZUNvbG9yfVxuICAgICAgICAgIG9uUHJlc3M9e3RoaXMuX2hhbmRsZUNsZWFyUHJlc3N9XG4gICAgICAgICAgaWNvbj1cImNsb3NlXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPVwiYnV0dG9uXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9XCJidXR0b25cIlxuICAgICAgICAvPlxuICAgICAgPC9TdXJmYWNlPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBmbGV4OiAxLFxuICAgIGZvbnRTaXplOiAxOCxcbiAgICBwYWRkaW5nTGVmdDogOCxcbiAgICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgICB0ZXh0QWxpZ246IEkxOG5NYW5hZ2VyLmlzUlRMID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICBtaW5XaWR0aDogMCxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoU2VhcmNoYmFyKTtcbiJdfQ==