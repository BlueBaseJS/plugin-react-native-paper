{"version":3,"sources":["Chip.js"],"names":["Chip","elevation","Animated","Value","timing","state","toValue","duration","start","props","mode","children","icon","avatar","selected","disabled","accessibilityLabel","onPress","onClose","style","theme","testID","selectedColor","rest","dark","colors","StyleSheet","flatten","backgroundColor","surface","borderRadius","borderColor","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityStates","push","styles","container","Platform","OS","_handlePressIn","_handlePressOut","content","avatarWrapper","opacity","React","isValidElement","cloneElement","avatarSelected","color","marginRight","marginLeft","Component","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","position","top","left"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { Theme } from '../types';\nimport type { IconSource } from './Icon';\n\ntype Props = React.ElementConfig<typeof Surface> & {|\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined',\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.Node,\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource,\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.Node,\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean,\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string,\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => mixed,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string,\n|};\n\ntype State = {\n  elevation: Animated.Value,\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"info\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  _handlePressIn = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200,\n    }).start();\n  };\n\n  _handlePressOut = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onClose,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n          ? '#383838'\n          : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits = ['button'];\n    const accessibilityStates = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={[\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onPressIn={this._handlePressIn}\n          onPressOut={this._handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'done'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n              ]}\n            >\n              {(children: any)}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"cancel\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]}